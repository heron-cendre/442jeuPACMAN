
Pacman_15_05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011780  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003098  08011950  08011950  00012950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149e8  080149e8  000160e8  2**0
                  CONTENTS
  4 .ARM          00000008  080149e8  080149e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149f0  080149f0  000160e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149f0  080149f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080149f4  080149f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  080149f8  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005744  200000e8  08014ae0  000160e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000582c  08014ae0  0001682c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000160e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030bdb  00000000  00000000  00016118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000753d  00000000  00000000  00046cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002850  00000000  00000000  0004e230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f2b  00000000  00000000  00050a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000314e7  00000000  00000000  000529ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035516  00000000  00000000  00083e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011824a  00000000  00000000  000b93a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d15f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b130  00000000  00000000  001d1638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001dc768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011938 	.word	0x08011938

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08011938 	.word	0x08011938

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000f7c:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <MX_ADC1_Init+0x9c>)
 8000f7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000f82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <MX_ADC1_Init+0xa0>)
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000fca:	f006 fa07 	bl	80073dc <HAL_ADC_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fd4:	f001 ff98 	bl	8002f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_ADC1_Init+0x98>)
 8000fea:	f006 fba1 	bl	8007730 <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff4:	f001 ff88 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000104 	.word	0x20000104
 8001004:	40012000 	.word	0x40012000
 8001008:	0f000001 	.word	0x0f000001

0800100c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <MX_ADC3_Init+0x98>)
 8001020:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <MX_ADC3_Init+0x9c>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <MX_ADC3_Init+0x98>)
 8001026:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800102a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800102c:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <MX_ADC3_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_ADC3_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <MX_ADC3_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <MX_ADC3_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_ADC3_Init+0x98>)
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <MX_ADC3_Init+0xa0>)
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_ADC3_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_ADC3_Init+0x98>)
 800105a:	2201      	movs	r2, #1
 800105c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_ADC3_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_ADC3_Init+0x98>)
 8001068:	2201      	movs	r2, #1
 800106a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <MX_ADC3_Init+0x98>)
 800106e:	f006 f9b5 	bl	80073dc <HAL_ADC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001078:	f001 ff46 	bl	8002f08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800107c:	2306      	movs	r3, #6
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <MX_ADC3_Init+0x98>)
 800108e:	f006 fb4f 	bl	8007730 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001098:	f001 ff36 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000014c 	.word	0x2000014c
 80010a8:	40012200 	.word	0x40012200
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	@ 0x30
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001178 <HAL_ADC_MspInit+0xc8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d124      	bne.n	800111c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	4a29      	ldr	r2, [pc, #164]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010de:	4b27      	ldr	r3, [pc, #156]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b24      	ldr	r3, [pc, #144]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a23      	ldr	r2, [pc, #140]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b21      	ldr	r3, [pc, #132]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001102:	2301      	movs	r3, #1
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	481a      	ldr	r0, [pc, #104]	@ (8001180 <HAL_ADC_MspInit+0xd0>)
 8001116:	f007 fc81 	bl	8008a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800111a:	e029      	b.n	8001170 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xd4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d124      	bne.n	8001170 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a14      	ldr	r2, [pc, #80]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 800112c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 8001144:	f043 0320 	orr.w	r3, r3, #32
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <HAL_ADC_MspInit+0xcc>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001156:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4807      	ldr	r0, [pc, #28]	@ (8001188 <HAL_ADC_MspInit+0xd8>)
 800116c:	f007 fc56 	bl	8008a1c <HAL_GPIO_Init>
}
 8001170:	bf00      	nop
 8001172:	3730      	adds	r7, #48	@ 0x30
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012000 	.word	0x40012000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000
 8001184:	40012200 	.word	0x40012200
 8001188:	40021400 	.word	0x40021400

0800118c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_DAC_Init+0x4c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <MX_DAC_Init+0x50>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <MX_DAC_Init+0x4c>)
 80011a2:	f006 fdfb 	bl	8007d9c <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ac:	f001 feac 	bl	8002f08 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <MX_DAC_Init+0x4c>)
 80011c0:	f006 fe6e 	bl	8007ea0 <HAL_DAC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ca:	f001 fe9d 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000194 	.word	0x20000194
 80011dc:	40007400 	.word	0x40007400

080011e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <HAL_DAC_MspInit+0x84>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12b      	bne.n	800125a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_DAC_MspInit+0x88>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <HAL_DAC_MspInit+0x88>)
 8001208:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <HAL_DAC_MspInit+0x88>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <HAL_DAC_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <HAL_DAC_MspInit+0x88>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_DAC_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001232:	2310      	movs	r3, #16
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4809      	ldr	r0, [pc, #36]	@ (800126c <HAL_DAC_MspInit+0x8c>)
 8001246:	f007 fbe9 	bl	8008a1c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	210f      	movs	r1, #15
 800124e:	2036      	movs	r0, #54	@ 0x36
 8001250:	f006 fd7a 	bl	8007d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001254:	2036      	movs	r0, #54	@ 0x36
 8001256:	f006 fd93 	bl	8007d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	@ 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40007400 	.word	0x40007400
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 8001276:	4a16      	ldr	r2, [pc, #88]	@ (80012d0 <MX_DMA2D_Init+0x60>)
 8001278:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 800129a:	2200      	movs	r2, #0
 800129c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80012a4:	4809      	ldr	r0, [pc, #36]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 80012a6:	f007 f81d 	bl	80082e4 <HAL_DMA2D_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80012b0:	f001 fe2a 	bl	8002f08 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80012b4:	2101      	movs	r1, #1
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_DMA2D_Init+0x5c>)
 80012b8:	f007 fa82 	bl	80087c0 <HAL_DMA2D_ConfigLayer>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80012c2:	f001 fe21 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001a8 	.word	0x200001a8
 80012d0:	4002b000 	.word	0x4002b000

080012d4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001318 <HAL_DMA2D_MspInit+0x44>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d113      	bne.n	800130e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80012e6:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <HAL_DMA2D_MspInit+0x48>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <HAL_DMA2D_MspInit+0x48>)
 80012ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_DMA2D_MspInit+0x48>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2105      	movs	r1, #5
 8001302:	205a      	movs	r0, #90	@ 0x5a
 8001304:	f006 fd20 	bl	8007d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001308:	205a      	movs	r0, #90	@ 0x5a
 800130a:	f006 fd39 	bl	8007d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	4002b000 	.word	0x4002b000
 800131c:	40023800 	.word	0x40023800

08001320 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001338:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <MX_FMC_Init+0x98>)
 800133a:	4a20      	ldr	r2, [pc, #128]	@ (80013bc <MX_FMC_Init+0x9c>)
 800133c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800133e:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <MX_FMC_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001344:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <MX_FMC_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800134a:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <MX_FMC_Init+0x98>)
 800134c:	2204      	movs	r2, #4
 800134e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <MX_FMC_Init+0x98>)
 8001352:	2210      	movs	r2, #16
 8001354:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_FMC_Init+0x98>)
 8001358:	2240      	movs	r2, #64	@ 0x40
 800135a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_FMC_Init+0x98>)
 800135e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001362:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_FMC_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <MX_FMC_Init+0x98>)
 800136c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001370:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_FMC_Init+0x98>)
 8001374:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_FMC_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001384:	2307      	movs	r3, #7
 8001386:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001388:	2304      	movs	r3, #4
 800138a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800138c:	2307      	movs	r3, #7
 800138e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001390:	2303      	movs	r3, #3
 8001392:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_FMC_Init+0x98>)
 80013a2:	f00a fc85 	bl	800bcb0 <HAL_SDRAM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80013ac:	f001 fdac 	bl	8002f08 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001e8 	.word	0x200001e8
 80013bc:	a0000140 	.word	0xa0000140

080013c0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013d4:	4b3a      	ldr	r3, [pc, #232]	@ (80014c0 <HAL_FMC_MspInit+0x100>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d16d      	bne.n	80014b8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80013dc:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_FMC_MspInit+0x100>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e2:	4b38      	ldr	r3, [pc, #224]	@ (80014c4 <HAL_FMC_MspInit+0x104>)
 80013e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e6:	4a37      	ldr	r2, [pc, #220]	@ (80014c4 <HAL_FMC_MspInit+0x104>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80013ee:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <HAL_FMC_MspInit+0x104>)
 80013f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80013fa:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80013fe:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140c:	230c      	movs	r3, #12
 800140e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	482c      	ldr	r0, [pc, #176]	@ (80014c8 <HAL_FMC_MspInit+0x108>)
 8001416:	f007 fb01 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800141a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800141e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	230c      	movs	r3, #12
 800142e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4825      	ldr	r0, [pc, #148]	@ (80014cc <HAL_FMC_MspInit+0x10c>)
 8001436:	f007 faf1 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800143a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800143e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144c:	230c      	movs	r3, #12
 800144e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	481e      	ldr	r0, [pc, #120]	@ (80014d0 <HAL_FMC_MspInit+0x110>)
 8001456:	f007 fae1 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800145a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800145e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146c:	230c      	movs	r3, #12
 800146e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <HAL_FMC_MspInit+0x114>)
 8001476:	f007 fad1 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800147a:	2328      	movs	r3, #40	@ 0x28
 800147c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800148a:	230c      	movs	r3, #12
 800148c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <HAL_FMC_MspInit+0x118>)
 8001494:	f007 fac2 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001498:	2308      	movs	r3, #8
 800149a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014a8:	230c      	movs	r3, #12
 80014aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	4619      	mov	r1, r3
 80014b0:	480a      	ldr	r0, [pc, #40]	@ (80014dc <HAL_FMC_MspInit+0x11c>)
 80014b2:	f007 fab3 	bl	8008a1c <HAL_GPIO_Init>
 80014b6:	e000      	b.n	80014ba <HAL_FMC_MspInit+0xfa>
    return;
 80014b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000021c 	.word	0x2000021c
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021400 	.word	0x40021400
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40020800 	.word	0x40020800

080014e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014e8:	f7ff ff6a 	bl	80013c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <vApplicationGetIdleTaskMemory>:

static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <vApplicationGetIdleTaskMemory+0x2c>)
 8001504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <vApplicationGetIdleTaskMemory+0x30>)
 800150a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2280      	movs	r2, #128	@ 0x80
 8001510:	601a      	str	r2, [r3, #0]
  /* Espace pour le code utilisateur */
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000248 	.word	0x20000248
 8001524:	2000029c 	.word	0x2000029c

08001528 <MX_FREERTOS_Init>:
/**
  * @brief  Initialisation de FreeRTOS
  * @param  Aucun
  * @retval Aucun
  */
void MX_FREERTOS_Init(void) {
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b0b0      	sub	sp, #192	@ 0xc0
 800152c:	af00      	add	r7, sp, #0
  /* Initialisation utilisateur */

  /* RTOS_MUTEX utilisateur */
  // Creer le mutex pour la protection de l'etat du jeu
  osMutexDef(gameMutex);
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  gameMutexHandle = osMutexCreate(osMutex(gameMutex));
 800153a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800153e:	4618      	mov	r0, r3
 8001540:	f00b ffb7 	bl	800d4b2 <osMutexCreate>
 8001544:	4603      	mov	r3, r0
 8001546:	4a4d      	ldr	r2, [pc, #308]	@ (800167c <MX_FREERTOS_Init+0x154>)
 8001548:	6013      	str	r3, [r2, #0]
  
  // Creer le semaphore pour la synchronisation de l'affichage
  osSemaphoreDef(displaySem);
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  displaySemHandle = osSemaphoreCreate(osSemaphore(displaySem), 1);
 8001556:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800155a:	2101      	movs	r1, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f00c f845 	bl	800d5ec <osSemaphoreCreate>
 8001562:	4603      	mov	r3, r0
 8001564:	4a46      	ldr	r2, [pc, #280]	@ (8001680 <MX_FREERTOS_Init+0x158>)
 8001566:	6013      	str	r3, [r2, #0]
  /* Demarrer les timers, ajouter de nouveaux, ... */
  /* FIN RTOS_TIMERS utilisateur */

  /* Creation des files d'attente */
  /* definition et creation de queue_PacMan */
  osMessageQDef(queue_PacMan, 16, uint16_t);
 8001568:	4b46      	ldr	r3, [pc, #280]	@ (8001684 <MX_FREERTOS_Init+0x15c>)
 800156a:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 800156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queue_PacManHandle = osMessageCreate(osMessageQ(queue_PacMan), NULL);
 8001574:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f00c f868 	bl	800d650 <osMessageCreate>
 8001580:	4603      	mov	r3, r0
 8001582:	4a41      	ldr	r2, [pc, #260]	@ (8001688 <MX_FREERTOS_Init+0x160>)
 8001584:	6013      	str	r3, [r2, #0]

  /* definition et creation de queue_points */
  osMessageQDef(queue_points, 16, uint16_t);
 8001586:	4b3f      	ldr	r3, [pc, #252]	@ (8001684 <MX_FREERTOS_Init+0x15c>)
 8001588:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800158c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queue_pointsHandle = osMessageCreate(osMessageQ(queue_points), NULL);
 8001592:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f00c f859 	bl	800d650 <osMessageCreate>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a3a      	ldr	r2, [pc, #232]	@ (800168c <MX_FREERTOS_Init+0x164>)
 80015a2:	6013      	str	r3, [r2, #0]

  /* definition et creation de joystickQueue */
  osMessageQDef(joystickQueue, 32, uint32_t);
 80015a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001690 <MX_FREERTOS_Init+0x168>)
 80015a6:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 80015aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  joystickQueueHandle = osMessageCreate(osMessageQ(joystickQueue), NULL);
 80015b0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f00c f84a 	bl	800d650 <osMessageCreate>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a35      	ldr	r2, [pc, #212]	@ (8001694 <MX_FREERTOS_Init+0x16c>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* definition et creation de vieQueue */
  osMessageQDef(vieQueue, 16, uint16_t);
 80015c2:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <MX_FREERTOS_Init+0x15c>)
 80015c4:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80015c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vieQueueHandle = osMessageCreate(osMessageQ(vieQueue), NULL);
 80015ce:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00c f83b 	bl	800d650 <osMessageCreate>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <MX_FREERTOS_Init+0x170>)
 80015de:	6013      	str	r3, [r2, #0]
  /* Ajouter des files d'attente, ... */
  /* FIN RTOS_QUEUES utilisateur */

  /* Creation des threads */
  /* definition et creation de tache_jeu */
  osThreadDef(tache_jeu, fonction_jeu, osPriorityAboveNormal, 0, 128);
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <MX_FREERTOS_Init+0x174>)
 80015e2:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80015e6:	461d      	mov	r5, r3
 80015e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tache_jeuHandle = osThreadCreate(osThread(tache_jeu), NULL);
 80015f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00b fef9 	bl	800d3f2 <osThreadCreate>
 8001600:	4603      	mov	r3, r0
 8001602:	4a27      	ldr	r2, [pc, #156]	@ (80016a0 <MX_FREERTOS_Init+0x178>)
 8001604:	6013      	str	r3, [r2, #0]

  /* definition et creation de tache_affichage */
  osThreadDef(tache_affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <MX_FREERTOS_Init+0x17c>)
 8001608:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800160c:	461d      	mov	r5, r3
 800160e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tache_affichageHandle = osThreadCreate(osThread(tache_affichage), NULL);
 800161a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f00b fee6 	bl	800d3f2 <osThreadCreate>
 8001626:	4603      	mov	r3, r0
 8001628:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <MX_FREERTOS_Init+0x180>)
 800162a:	6013      	str	r3, [r2, #0]

  /* definition et creation de tache_entrees */
  osThreadDef(tache_entrees, fonction_entrees, osPriorityHigh, 0, 128);
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_FREERTOS_Init+0x184>)
 800162e:	f107 041c 	add.w	r4, r7, #28
 8001632:	461d      	mov	r5, r3
 8001634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800163c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tache_entreesHandle = osThreadCreate(osThread(tache_entrees), NULL);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f00b fed3 	bl	800d3f2 <osThreadCreate>
 800164c:	4603      	mov	r3, r0
 800164e:	4a18      	ldr	r2, [pc, #96]	@ (80016b0 <MX_FREERTOS_Init+0x188>)
 8001650:	6013      	str	r3, [r2, #0]

  /* definition et creation de tache_fantome */
  osThreadDef(tache_fantome, fonction_fantome, osPriorityNormal, 0, 128);
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_FREERTOS_Init+0x18c>)
 8001654:	463c      	mov	r4, r7
 8001656:	461d      	mov	r5, r3
 8001658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tache_fantomeHandle = osThreadCreate(osThread(tache_fantome), NULL);
 8001664:	463b      	mov	r3, r7
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00b fec2 	bl	800d3f2 <osThreadCreate>
 800166e:	4603      	mov	r3, r0
 8001670:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <MX_FREERTOS_Init+0x190>)
 8001672:	6013      	str	r3, [r2, #0]

  /* RTOS_THREADS utilisateur */
  /* Ajouter des threads, ... */
  /* FIN RTOS_THREADS utilisateur */

}
 8001674:	bf00      	nop
 8001676:	37c0      	adds	r7, #192	@ 0xc0
 8001678:	46bd      	mov	sp, r7
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	20000220 	.word	0x20000220
 8001680:	20000224 	.word	0x20000224
 8001684:	08011950 	.word	0x08011950
 8001688:	20000238 	.word	0x20000238
 800168c:	2000023c 	.word	0x2000023c
 8001690:	08011960 	.word	0x08011960
 8001694:	20000240 	.word	0x20000240
 8001698:	20000244 	.word	0x20000244
 800169c:	0801197c 	.word	0x0801197c
 80016a0:	20000228 	.word	0x20000228
 80016a4:	080119a8 	.word	0x080119a8
 80016a8:	2000022c 	.word	0x2000022c
 80016ac:	080119d4 	.word	0x080119d4
 80016b0:	20000230 	.word	0x20000230
 80016b4:	08011a00 	.word	0x08011a00
 80016b8:	20000234 	.word	0x20000234

080016bc <fonction_jeu>:
* @brief Fonction implementant le thread tache_jeu.
* @param argument: Non utilise
* @retval Aucun
*/
void fonction_jeu(void const * argument)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Fonction utilisateur tache_jeu */

    static uint32_t joystick_v, joystick_h;
    for(;;) {
        switch(etat) {
 80016c4:	4b74      	ldr	r3, [pc, #464]	@ (8001898 <fonction_jeu+0x1dc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	f200 80e1 	bhi.w	8001890 <fonction_jeu+0x1d4>
 80016ce:	a201      	add	r2, pc, #4	@ (adr r2, 80016d4 <fonction_jeu+0x18>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	08001751 	.word	0x08001751
 80016dc:	080017fd 	.word	0x080017fd
 80016e0:	0800183d 	.word	0x0800183d
            case STATE_MENU:
                // Controle des LED en fonction des boutons
                HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin));
 80016e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e8:	486c      	ldr	r0, [pc, #432]	@ (800189c <fonction_jeu+0x1e0>)
 80016ea:	f007 fc4f 	bl	8008f8c <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016f6:	486a      	ldr	r0, [pc, #424]	@ (80018a0 <fonction_jeu+0x1e4>)
 80016f8:	f007 fc60 	bl	8008fbc <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin, HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin));
 80016fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001700:	4866      	ldr	r0, [pc, #408]	@ (800189c <fonction_jeu+0x1e0>)
 8001702:	f007 fc43 	bl	8008f8c <HAL_GPIO_ReadPin>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	2120      	movs	r1, #32
 800170c:	4865      	ldr	r0, [pc, #404]	@ (80018a4 <fonction_jeu+0x1e8>)
 800170e:	f007 fc55 	bl	8008fbc <HAL_GPIO_WritePin>
                // Mesure des potentiometres et du joystick
                ReadSensors(&joystick_v, &joystick_h);
 8001712:	4965      	ldr	r1, [pc, #404]	@ (80018a8 <fonction_jeu+0x1ec>)
 8001714:	4865      	ldr	r0, [pc, #404]	@ (80018ac <fonction_jeu+0x1f0>)
 8001716:	f002 ffaf 	bl	8004678 <ReadSensors>
                // Transition vers l'etat 1 (jeu) si BP1 est enfonce
                if (!(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin))) {
 800171a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171e:	485f      	ldr	r0, [pc, #380]	@ (800189c <fonction_jeu+0x1e0>)
 8001720:	f007 fc34 	bl	8008f8c <HAL_GPIO_ReadPin>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 80ab 	bne.w	8001882 <fonction_jeu+0x1c6>
                    HAL_Delay(200);
 800172c:	20c8      	movs	r0, #200	@ 0xc8
 800172e:	f005 fe31 	bl	8007394 <HAL_Delay>
                    if (!(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin))) {
 8001732:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001736:	4859      	ldr	r0, [pc, #356]	@ (800189c <fonction_jeu+0x1e0>)
 8001738:	f007 fc28 	bl	8008f8c <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 809f 	bne.w	8001882 <fonction_jeu+0x1c6>
                        InitGame();
 8001744:	f002 ff74 	bl	8004630 <InitGame>
                        etat = STATE_GAME_RUNNING;
 8001748:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <fonction_jeu+0x1dc>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 800174e:	e098      	b.n	8001882 <fonction_jeu+0x1c6>
            case STATE_GAME_RUNNING:


                uint32_t current_time = HAL_GetTick();
 8001750:	f005 fe14 	bl	800737c <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]
                // Mise a jour de Pac-Man toutes les 50ms
                if(current_time - last_update_time > 50) {
 8001756:	4b56      	ldr	r3, [pc, #344]	@ (80018b0 <fonction_jeu+0x1f4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b32      	cmp	r3, #50	@ 0x32
 8001760:	d929      	bls.n	80017b6 <fonction_jeu+0xfa>
                    last_update_time = current_time;
 8001762:	4a53      	ldr	r2, [pc, #332]	@ (80018b0 <fonction_jeu+0x1f4>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6013      	str	r3, [r2, #0]
                    ReadSensors(&joystick_v, &joystick_h);
 8001768:	494f      	ldr	r1, [pc, #316]	@ (80018a8 <fonction_jeu+0x1ec>)
 800176a:	4850      	ldr	r0, [pc, #320]	@ (80018ac <fonction_jeu+0x1f0>)
 800176c:	f002 ff84 	bl	8004678 <ReadSensors>
                    MovePacMan(&pacman, joystick_h, joystick_v);
 8001770:	4b4d      	ldr	r3, [pc, #308]	@ (80018a8 <fonction_jeu+0x1ec>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a4d      	ldr	r2, [pc, #308]	@ (80018ac <fonction_jeu+0x1f0>)
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	484e      	ldr	r0, [pc, #312]	@ (80018b4 <fonction_jeu+0x1f8>)
 800177c:	f002 f934 	bl	80039e8 <MovePacMan>
                    if (AllPointsEaten()) {
 8001780:	f002 f8da 	bl	8003938 <AllPointsEaten>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <fonction_jeu+0xe0>
                        etat = STATE_LEVEL_COMPLETE;
 800178a:	4b43      	ldr	r3, [pc, #268]	@ (8001898 <fonction_jeu+0x1dc>)
 800178c:	2203      	movs	r2, #3
 800178e:	701a      	strb	r2, [r3, #0]
                        state_change_delay = HAL_GetTick();
 8001790:	f005 fdf4 	bl	800737c <HAL_GetTick>
 8001794:	4603      	mov	r3, r0
 8001796:	4a48      	ldr	r2, [pc, #288]	@ (80018b8 <fonction_jeu+0x1fc>)
 8001798:	6013      	str	r3, [r2, #0]
                        break;
 800179a:	e079      	b.n	8001890 <fonction_jeu+0x1d4>
                    }
                    if (pacman.lives <= 0) {
 800179c:	4b45      	ldr	r3, [pc, #276]	@ (80018b4 <fonction_jeu+0x1f8>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dc08      	bgt.n	80017b6 <fonction_jeu+0xfa>
                        etat = STATE_GAME_OVER;
 80017a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <fonction_jeu+0x1dc>)
 80017a6:	2202      	movs	r2, #2
 80017a8:	701a      	strb	r2, [r3, #0]
                        state_change_delay = HAL_GetTick();
 80017aa:	f005 fde7 	bl	800737c <HAL_GetTick>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a41      	ldr	r2, [pc, #260]	@ (80018b8 <fonction_jeu+0x1fc>)
 80017b2:	6013      	str	r3, [r2, #0]
                        break;
 80017b4:	e06c      	b.n	8001890 <fonction_jeu+0x1d4>
                    }
                }
                // Mise a jour des fantomes toutes les 75ms
                if(current_time - ghost_update_time > 75) {
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <fonction_jeu+0x200>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b4b      	cmp	r3, #75	@ 0x4b
 80017c0:	d905      	bls.n	80017ce <fonction_jeu+0x112>
                    ghost_update_time = current_time;
 80017c2:	4a3e      	ldr	r2, [pc, #248]	@ (80018bc <fonction_jeu+0x200>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6013      	str	r3, [r2, #0]
                    MoveGhosts(&pacman);
 80017c8:	483a      	ldr	r0, [pc, #232]	@ (80018b4 <fonction_jeu+0x1f8>)
 80017ca:	f002 fec5 	bl	8004558 <MoveGhosts>
                }
                // Retour a l'etat 0 si BP1 est enfonce a nouveau
                if (!(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin))) {
 80017ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017d2:	4832      	ldr	r0, [pc, #200]	@ (800189c <fonction_jeu+0x1e0>)
 80017d4:	f007 fbda 	bl	8008f8c <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d153      	bne.n	8001886 <fonction_jeu+0x1ca>
                    HAL_Delay(200);
 80017de:	20c8      	movs	r0, #200	@ 0xc8
 80017e0:	f005 fdd8 	bl	8007394 <HAL_Delay>
                    if (!(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin))) {
 80017e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017e8:	482c      	ldr	r0, [pc, #176]	@ (800189c <fonction_jeu+0x1e0>)
 80017ea:	f007 fbcf 	bl	8008f8c <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d148      	bne.n	8001886 <fonction_jeu+0x1ca>
                        etat = STATE_MENU;
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <fonction_jeu+0x1dc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
                    }
                }
                break;
 80017fa:	e044      	b.n	8001886 <fonction_jeu+0x1ca>
            case STATE_GAME_OVER:
                if (HAL_GetTick() - state_change_delay > 2000) {
 80017fc:	f005 fdbe 	bl	800737c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <fonction_jeu+0x1fc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800180c:	d93d      	bls.n	800188a <fonction_jeu+0x1ce>
                    if (!(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin))) {
 800180e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001812:	4822      	ldr	r0, [pc, #136]	@ (800189c <fonction_jeu+0x1e0>)
 8001814:	f007 fbba 	bl	8008f8c <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d135      	bne.n	800188a <fonction_jeu+0x1ce>
                        HAL_Delay(200);
 800181e:	20c8      	movs	r0, #200	@ 0xc8
 8001820:	f005 fdb8 	bl	8007394 <HAL_Delay>
                        if (!(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin))) {
 8001824:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001828:	481c      	ldr	r0, [pc, #112]	@ (800189c <fonction_jeu+0x1e0>)
 800182a:	f007 fbaf 	bl	8008f8c <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d12a      	bne.n	800188a <fonction_jeu+0x1ce>
                            etat = STATE_MENU;
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <fonction_jeu+0x1dc>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
                        }
                    }
                }
                break;
 800183a:	e026      	b.n	800188a <fonction_jeu+0x1ce>
            case STATE_LEVEL_COMPLETE:
                if (HAL_GetTick() - state_change_delay > 2000) {
 800183c:	f005 fd9e 	bl	800737c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <fonction_jeu+0x1fc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800184c:	d91f      	bls.n	800188e <fonction_jeu+0x1d2>
                    if (!(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin))) {
 800184e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001852:	4812      	ldr	r0, [pc, #72]	@ (800189c <fonction_jeu+0x1e0>)
 8001854:	f007 fb9a 	bl	8008f8c <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d117      	bne.n	800188e <fonction_jeu+0x1d2>
                        HAL_Delay(200);
 800185e:	20c8      	movs	r0, #200	@ 0xc8
 8001860:	f005 fd98 	bl	8007394 <HAL_Delay>
                        if (!(HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin))) {
 8001864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001868:	480c      	ldr	r0, [pc, #48]	@ (800189c <fonction_jeu+0x1e0>)
 800186a:	f007 fb8f 	bl	8008f8c <HAL_GPIO_ReadPin>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10c      	bne.n	800188e <fonction_jeu+0x1d2>
                            ResetLevel(&pacman);
 8001874:	480f      	ldr	r0, [pc, #60]	@ (80018b4 <fonction_jeu+0x1f8>)
 8001876:	f002 f889 	bl	800398c <ResetLevel>
                            etat = STATE_GAME_RUNNING;
 800187a:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <fonction_jeu+0x1dc>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
                        }
                    }
                }
                break;
 8001880:	e005      	b.n	800188e <fonction_jeu+0x1d2>
                break;
 8001882:	bf00      	nop
 8001884:	e004      	b.n	8001890 <fonction_jeu+0x1d4>
                break;
 8001886:	bf00      	nop
 8001888:	e002      	b.n	8001890 <fonction_jeu+0x1d4>
                break;
 800188a:	bf00      	nop
 800188c:	e000      	b.n	8001890 <fonction_jeu+0x1d4>
                break;
 800188e:	bf00      	nop
        }
        vTaskDelay(pdMS_TO_TICKS(20));
 8001890:	2014      	movs	r0, #20
 8001892:	f00c ff65 	bl	800e760 <vTaskDelay>
        switch(etat) {
 8001896:	e715      	b.n	80016c4 <fonction_jeu+0x8>
 8001898:	20000714 	.word	0x20000714
 800189c:	40020000 	.word	0x40020000
 80018a0:	40021c00 	.word	0x40021c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	200004a0 	.word	0x200004a0
 80018ac:	2000049c 	.word	0x2000049c
 80018b0:	20000718 	.word	0x20000718
 80018b4:	200006f0 	.word	0x200006f0
 80018b8:	20000720 	.word	0x20000720
 80018bc:	2000071c 	.word	0x2000071c

080018c0 <fonction_affichage>:
* @brief Fonction implementant le thread tache_affichage.
* @param argument: Non utilise
* @retval Aucun
*/
void fonction_affichage(void const * argument)
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b09c      	sub	sp, #112	@ 0x70
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Fonction utilisateur tache_affichage */
  static TS_StateTypeDef TS_State;
  static GameState lastEtat = -1;
  static bool points_erased[MAX_POINTS] = {0};
  for(;;) {
    if(osMutexWait(gameMutexHandle, osWaitForever) == osOK) {
 80018c8:	4bb6      	ldr	r3, [pc, #728]	@ (8001ba4 <fonction_affichage+0x2e4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00b fe07 	bl	800d4e4 <osMutexWait>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f040 81be 	bne.w	8001c5a <fonction_affichage+0x39a>
      GameState localEtat = etat;
 80018de:	4bb2      	ldr	r3, [pc, #712]	@ (8001ba8 <fonction_affichage+0x2e8>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
      PacMan localPacman = pacman;
 80018e6:	4bb1      	ldr	r3, [pc, #708]	@ (8001bac <fonction_affichage+0x2ec>)
 80018e8:	f107 040c 	add.w	r4, r7, #12
 80018ec:	461d      	mov	r5, r3
 80018ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f6:	682b      	ldr	r3, [r5, #0]
 80018f8:	6023      	str	r3, [r4, #0]
      osMutexRelease(gameMutexHandle);
 80018fa:	4baa      	ldr	r3, [pc, #680]	@ (8001ba4 <fonction_affichage+0x2e4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f00b fe3e 	bl	800d580 <osMutexRelease>

      // Detecter le changement d'etat pour reinitialiser les couches et le suivi
      if (localEtat != lastEtat) {
 8001904:	4baa      	ldr	r3, [pc, #680]	@ (8001bb0 <fonction_affichage+0x2f0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800190c:	429a      	cmp	r2, r3
 800190e:	d040      	beq.n	8001992 <fonction_affichage+0xd2>
        if (localEtat == STATE_GAME_RUNNING) {
 8001910:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001914:	2b01      	cmp	r3, #1
 8001916:	d119      	bne.n	800194c <fonction_affichage+0x8c>
          BSP_LCD_SelectLayer(0);
 8001918:	2000      	movs	r0, #0
 800191a:	f003 fafd 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(LCD_COLOR_BLACK);
 800191e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001922:	f003 fb55 	bl	8004fd0 <BSP_LCD_Clear>
          DrawMaze(LCD_COLOR_BLUE);
 8001926:	48a3      	ldr	r0, [pc, #652]	@ (8001bb4 <fonction_affichage+0x2f4>)
 8001928:	f001 fcb2 	bl	8003290 <DrawMaze>
          DrawPoints(LCD_COLOR_YELLOW);
 800192c:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001930:	f001 fd40 	bl	80033b4 <DrawPoints>
          BSP_LCD_SelectLayer(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f003 faef 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(0x00000000); // Transparent
 800193a:	2000      	movs	r0, #0
 800193c:	f003 fb48 	bl	8004fd0 <BSP_LCD_Clear>
          memset(points_erased, 0, sizeof(points_erased));
 8001940:	22c8      	movs	r2, #200	@ 0xc8
 8001942:	2100      	movs	r1, #0
 8001944:	489c      	ldr	r0, [pc, #624]	@ (8001bb8 <fonction_affichage+0x2f8>)
 8001946:	f00e f9e9 	bl	800fd1c <memset>
 800194a:	e01e      	b.n	800198a <fonction_affichage+0xca>
        } else if (localEtat == STATE_MENU) {
 800194c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10d      	bne.n	8001970 <fonction_affichage+0xb0>
          BSP_LCD_SelectLayer(0);
 8001954:	2000      	movs	r0, #0
 8001956:	f003 fadf 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(LCD_COLOR_BLACK);
 800195a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800195e:	f003 fb37 	bl	8004fd0 <BSP_LCD_Clear>
          BSP_LCD_SelectLayer(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f003 fad8 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(0x00000000);
 8001968:	2000      	movs	r0, #0
 800196a:	f003 fb31 	bl	8004fd0 <BSP_LCD_Clear>
 800196e:	e00c      	b.n	800198a <fonction_affichage+0xca>
        } else {
          BSP_LCD_SelectLayer(0);
 8001970:	2000      	movs	r0, #0
 8001972:	f003 fad1 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001976:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800197a:	f003 fb29 	bl	8004fd0 <BSP_LCD_Clear>
          BSP_LCD_SelectLayer(1);
 800197e:	2001      	movs	r0, #1
 8001980:	f003 faca 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(0x00000000);
 8001984:	2000      	movs	r0, #0
 8001986:	f003 fb23 	bl	8004fd0 <BSP_LCD_Clear>
        }
        lastEtat = localEtat;
 800198a:	4a89      	ldr	r2, [pc, #548]	@ (8001bb0 <fonction_affichage+0x2f0>)
 800198c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001990:	7013      	strb	r3, [r2, #0]
      }

      switch(localEtat) {
 8001992:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001996:	2b03      	cmp	r3, #3
 8001998:	f200 815f 	bhi.w	8001c5a <fonction_affichage+0x39a>
 800199c:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <fonction_affichage+0xe4>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019b5 	.word	0x080019b5
 80019a8:	08001aeb 	.word	0x08001aeb
 80019ac:	08001b8d 	.word	0x08001b8d
 80019b0:	08001be5 	.word	0x08001be5
        case STATE_MENU:
          BSP_LCD_SelectLayer(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f003 faaf 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80019ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019be:	f003 fabb 	bl	8004f38 <BSP_LCD_SetTextColor>
          BSP_TS_GetState(&TS_State);
 80019c2:	487e      	ldr	r0, [pc, #504]	@ (8001bbc <fonction_affichage+0x2fc>)
 80019c4:	f004 fd60 	bl	8006488 <BSP_TS_GetState>
          if(TS_State.touchDetected) {
 80019c8:	4b7c      	ldr	r3, [pc, #496]	@ (8001bbc <fonction_affichage+0x2fc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d026      	beq.n	8001a1e <fonction_affichage+0x15e>
            int x = TS_State.touchX[0];
 80019d0:	4b7a      	ldr	r3, [pc, #488]	@ (8001bbc <fonction_affichage+0x2fc>)
 80019d2:	885b      	ldrh	r3, [r3, #2]
 80019d4:	667b      	str	r3, [r7, #100]	@ 0x64
            int y = TS_State.touchY[0];
 80019d6:	4b79      	ldr	r3, [pc, #484]	@ (8001bbc <fonction_affichage+0x2fc>)
 80019d8:	899b      	ldrh	r3, [r3, #12]
 80019da:	663b      	str	r3, [r7, #96]	@ 0x60
            int rayon = 2;
 80019dc:	2302      	movs	r3, #2
 80019de:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (((x - rayon >= 0) && (x + rayon < LCD_LONGUEUR) && (y - rayon >= 0) && (y + rayon < LCD_LARGEUR))) {
 80019e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db19      	blt.n	8001a1e <fonction_affichage+0x15e>
 80019ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80019ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019ee:	4413      	add	r3, r2
 80019f0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80019f4:	da13      	bge.n	8001a1e <fonction_affichage+0x15e>
 80019f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0e      	blt.n	8001a1e <fonction_affichage+0x15e>
 8001a00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a04:	4413      	add	r3, r2
 8001a06:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001a0a:	da08      	bge.n	8001a1e <fonction_affichage+0x15e>
              BSP_LCD_FillCircle(x, y, rayon);
 8001a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a12:	b291      	uxth	r1, r2
 8001a14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001a16:	b292      	uxth	r2, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fee3 	bl	80057e4 <BSP_LCD_FillCircle>
            }
          }
          if (HAL_GetTick() - animation_time > 500) {
 8001a1e:	f005 fcad 	bl	800737c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b66      	ldr	r3, [pc, #408]	@ (8001bc0 <fonction_affichage+0x300>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a2e:	f240 8113 	bls.w	8001c58 <fonction_affichage+0x398>
            animation_time = HAL_GetTick();
 8001a32:	f005 fca3 	bl	800737c <HAL_GetTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a61      	ldr	r2, [pc, #388]	@ (8001bc0 <fonction_affichage+0x300>)
 8001a3a:	6013      	str	r3, [r2, #0]
            BSP_LCD_SelectLayer(0);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f003 fa6b 	bl	8004f18 <BSP_LCD_SelectLayer>
            BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001a42:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001a46:	f003 fac3 	bl	8004fd0 <BSP_LCD_Clear>
            BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001a4a:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001a4e:	f003 fa73 	bl	8004f38 <BSP_LCD_SetTextColor>
            BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001a52:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001a56:	f003 fa87 	bl	8004f68 <BSP_LCD_SetBackColor>
            BSP_LCD_SetFont(&Font24);
 8001a5a:	485a      	ldr	r0, [pc, #360]	@ (8001bc4 <fonction_affichage+0x304>)
 8001a5c:	f003 fa9e 	bl	8004f9c <BSP_LCD_SetFont>
            BSP_LCD_DisplayStringAt(140, 100, (uint8_t*)"PAC-MAN", LEFT_MODE);
 8001a60:	2303      	movs	r3, #3
 8001a62:	4a59      	ldr	r2, [pc, #356]	@ (8001bc8 <fonction_affichage+0x308>)
 8001a64:	2164      	movs	r1, #100	@ 0x64
 8001a66:	208c      	movs	r0, #140	@ 0x8c
 8001a68:	f003 fb1e 	bl	80050a8 <BSP_LCD_DisplayStringAt>
            BSP_LCD_SetFont(&Font16);
 8001a6c:	4857      	ldr	r0, [pc, #348]	@ (8001bcc <fonction_affichage+0x30c>)
 8001a6e:	f003 fa95 	bl	8004f9c <BSP_LCD_SetFont>
            BSP_LCD_DisplayStringAt(140, 150, (uint8_t*)"Appuyez sur BP1", LEFT_MODE);
 8001a72:	2303      	movs	r3, #3
 8001a74:	4a56      	ldr	r2, [pc, #344]	@ (8001bd0 <fonction_affichage+0x310>)
 8001a76:	2196      	movs	r1, #150	@ 0x96
 8001a78:	208c      	movs	r0, #140	@ 0x8c
 8001a7a:	f003 fb15 	bl	80050a8 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(140, 170, (uint8_t*)"pour commencer", LEFT_MODE);
 8001a7e:	2303      	movs	r3, #3
 8001a80:	4a54      	ldr	r2, [pc, #336]	@ (8001bd4 <fonction_affichage+0x314>)
 8001a82:	21aa      	movs	r1, #170	@ 0xaa
 8001a84:	208c      	movs	r0, #140	@ 0x8c
 8001a86:	f003 fb0f 	bl	80050a8 <BSP_LCD_DisplayStringAt>
            static bool mouth_open = true;
            if (mouth_open) {
 8001a8a:	4b53      	ldr	r3, [pc, #332]	@ (8001bd8 <fonction_affichage+0x318>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <fonction_affichage+0x1e4>
              BSP_LCD_FillCircle(240, 220, 15);
 8001a92:	220f      	movs	r2, #15
 8001a94:	21dc      	movs	r1, #220	@ 0xdc
 8001a96:	20f0      	movs	r0, #240	@ 0xf0
 8001a98:	f003 fea4 	bl	80057e4 <BSP_LCD_FillCircle>
              mouth_open = false;
 8001a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd8 <fonction_affichage+0x318>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e01b      	b.n	8001adc <fonction_affichage+0x21c>
            } else {
              BSP_LCD_FillCircle(240, 220, 15);
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	21dc      	movs	r1, #220	@ 0xdc
 8001aa8:	20f0      	movs	r0, #240	@ 0xf0
 8001aaa:	f003 fe9b 	bl	80057e4 <BSP_LCD_FillCircle>
              BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001aae:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001ab2:	f003 fa41 	bl	8004f38 <BSP_LCD_SetTextColor>
              Point tri[3] = {
 8001ab6:	4a49      	ldr	r2, [pc, #292]	@ (8001bdc <fonction_affichage+0x31c>)
 8001ab8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                {240, 220},
                {240+15, 220-10},
                {240+15, 220+10}
              };
              BSP_LCD_FillPolygon(tri, 3);
 8001ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac6:	2103      	movs	r1, #3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 ff2b 	bl	8005924 <BSP_LCD_FillPolygon>
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001ace:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001ad2:	f003 fa31 	bl	8004f38 <BSP_LCD_SetTextColor>
              mouth_open = true;
 8001ad6:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <fonction_affichage+0x318>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
            }
            BSP_LCD_SelectLayer(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f003 fa1b 	bl	8004f18 <BSP_LCD_SelectLayer>
            BSP_LCD_Clear(0x00000000);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f003 fa74 	bl	8004fd0 <BSP_LCD_Clear>
          }
          break;
 8001ae8:	e0b6      	b.n	8001c58 <fonction_affichage+0x398>
        case STATE_GAME_RUNNING:
          // 1. Effacer la couche transparente pour les objets en mouvement
          BSP_LCD_SelectLayer(1);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f003 fa14 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(0x00000000); // Transparent
 8001af0:	2000      	movs	r0, #0
 8001af2:	f003 fa6d 	bl	8004fd0 <BSP_LCD_Clear>

          // 2. Dessiner Pac-Man et les fantomes a leur position actuelle

          DrawGameInfo(&pacman);
 8001af6:	482d      	ldr	r0, [pc, #180]	@ (8001bac <fonction_affichage+0x2ec>)
 8001af8:	f001 fe78 	bl	80037ec <DrawGameInfo>
          DrawPacMan(&pacman, LCD_COLOR_YELLOW);
 8001afc:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8001b00:	482a      	ldr	r0, [pc, #168]	@ (8001bac <fonction_affichage+0x2ec>)
 8001b02:	f001 fcf9 	bl	80034f8 <DrawPacMan>
          DrawGhosts();
 8001b06:	f002 fa6f 	bl	8003fe8 <DrawGhosts>

          // 3. Pour les points manges, dessiner un cercle noir sur la couche 0 (fond) si pas deja efface
          BSP_LCD_SelectLayer(0);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f003 fa04 	bl	8004f18 <BSP_LCD_SelectLayer>
          for (int i = 0; i < MAX_POINTS; i++) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b14:	e036      	b.n	8001b84 <fonction_affichage+0x2c4>
            if (points[i].eaten && !points_erased[i]) {
 8001b16:	4932      	ldr	r1, [pc, #200]	@ (8001be0 <fonction_affichage+0x320>)
 8001b18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	3308      	adds	r3, #8
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d028      	beq.n	8001b7e <fonction_affichage+0x2be>
 8001b2c:	4a22      	ldr	r2, [pc, #136]	@ (8001bb8 <fonction_affichage+0x2f8>)
 8001b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d01f      	beq.n	8001b7e <fonction_affichage+0x2be>
              BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b3e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001b42:	f003 f9f9 	bl	8004f38 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(points[i].x, points[i].y, 2);
 8001b46:	4926      	ldr	r1, [pc, #152]	@ (8001be0 <fonction_affichage+0x320>)
 8001b48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	b298      	uxth	r0, r3
 8001b58:	4921      	ldr	r1, [pc, #132]	@ (8001be0 <fonction_affichage+0x320>)
 8001b5a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	3304      	adds	r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f003 fe38 	bl	80057e4 <BSP_LCD_FillCircle>
              points_erased[i] = true;
 8001b74:	4a10      	ldr	r2, [pc, #64]	@ (8001bb8 <fonction_affichage+0x2f8>)
 8001b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b78:	4413      	add	r3, r2
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < MAX_POINTS; i++) {
 8001b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b80:	3301      	adds	r3, #1
 8001b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b86:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b88:	ddc5      	ble.n	8001b16 <fonction_affichage+0x256>
            }
          }
          break;
 8001b8a:	e066      	b.n	8001c5a <fonction_affichage+0x39a>
        case STATE_GAME_OVER:
          BSP_LCD_SelectLayer(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f003 f9c3 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001b92:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001b96:	f003 fa1b 	bl	8004fd0 <BSP_LCD_Clear>
          ShowGameOverScreen(localPacman.score);
 8001b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fcfb 	bl	8004598 <ShowGameOverScreen>
          break;
 8001ba2:	e05a      	b.n	8001c5a <fonction_affichage+0x39a>
 8001ba4:	20000220 	.word	0x20000220
 8001ba8:	20000714 	.word	0x20000714
 8001bac:	200006f0 	.word	0x200006f0
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	ff0000ff 	.word	0xff0000ff
 8001bb8:	200004a4 	.word	0x200004a4
 8001bbc:	2000056c 	.word	0x2000056c
 8001bc0:	20000724 	.word	0x20000724
 8001bc4:	2000005c 	.word	0x2000005c
 8001bc8:	08011a1c 	.word	0x08011a1c
 8001bcc:	20000064 	.word	0x20000064
 8001bd0:	08011a24 	.word	0x08011a24
 8001bd4:	08011a34 	.word	0x08011a34
 8001bd8:	20000001 	.word	0x20000001
 8001bdc:	08011a70 	.word	0x08011a70
 8001be0:	200008d8 	.word	0x200008d8
        case STATE_LEVEL_COMPLETE:
          BSP_LCD_SelectLayer(0);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f003 f997 	bl	8004f18 <BSP_LCD_SelectLayer>
          BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001bea:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001bee:	f003 f9ef 	bl	8004fd0 <BSP_LCD_Clear>
          BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001bf2:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8001bf6:	f003 f99f 	bl	8004f38 <BSP_LCD_SetTextColor>
          BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001bfa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001bfe:	f003 f9b3 	bl	8004f68 <BSP_LCD_SetBackColor>
          BSP_LCD_SetFont(&Font24);
 8001c02:	4818      	ldr	r0, [pc, #96]	@ (8001c64 <fonction_affichage+0x3a4>)
 8001c04:	f003 f9ca 	bl	8004f9c <BSP_LCD_SetFont>
          BSP_LCD_DisplayStringAt(240, 100, (uint8_t*)"NIVEAU TERMINE!", CENTER_MODE);
 8001c08:	2301      	movs	r3, #1
 8001c0a:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <fonction_affichage+0x3a8>)
 8001c0c:	2164      	movs	r1, #100	@ 0x64
 8001c0e:	20f0      	movs	r0, #240	@ 0xf0
 8001c10:	f003 fa4a 	bl	80050a8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c18:	f003 f98e 	bl	8004f38 <BSP_LCD_SetTextColor>
          BSP_LCD_SetFont(&Font16);
 8001c1c:	4813      	ldr	r0, [pc, #76]	@ (8001c6c <fonction_affichage+0x3ac>)
 8001c1e:	f003 f9bd 	bl	8004f9c <BSP_LCD_SetFont>
          char scoreText[30];
          sprintf(scoreText, "Score: %d", localPacman.score);
 8001c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c28:	4911      	ldr	r1, [pc, #68]	@ (8001c70 <fonction_affichage+0x3b0>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00e f856 	bl	800fcdc <siprintf>
          BSP_LCD_DisplayStringAt(240, 150, (uint8_t*)scoreText, CENTER_MODE);
 8001c30:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c34:	2301      	movs	r3, #1
 8001c36:	2196      	movs	r1, #150	@ 0x96
 8001c38:	20f0      	movs	r0, #240	@ 0xf0
 8001c3a:	f003 fa35 	bl	80050a8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(240, 190, (uint8_t*)"Appuyez sur BP1", CENTER_MODE);
 8001c3e:	2301      	movs	r3, #1
 8001c40:	4a0c      	ldr	r2, [pc, #48]	@ (8001c74 <fonction_affichage+0x3b4>)
 8001c42:	21be      	movs	r1, #190	@ 0xbe
 8001c44:	20f0      	movs	r0, #240	@ 0xf0
 8001c46:	f003 fa2f 	bl	80050a8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(240, 210, (uint8_t*)"pour continuer", CENTER_MODE);
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <fonction_affichage+0x3b8>)
 8001c4e:	21d2      	movs	r1, #210	@ 0xd2
 8001c50:	20f0      	movs	r0, #240	@ 0xf0
 8001c52:	f003 fa29 	bl	80050a8 <BSP_LCD_DisplayStringAt>
          break;
 8001c56:	e000      	b.n	8001c5a <fonction_affichage+0x39a>
          break;
 8001c58:	bf00      	nop
      }
    }
    vTaskDelay(pdMS_TO_TICKS(20));
 8001c5a:	2014      	movs	r0, #20
 8001c5c:	f00c fd80 	bl	800e760 <vTaskDelay>
    if(osMutexWait(gameMutexHandle, osWaitForever) == osOK) {
 8001c60:	e632      	b.n	80018c8 <fonction_affichage+0x8>
 8001c62:	bf00      	nop
 8001c64:	2000005c 	.word	0x2000005c
 8001c68:	08011a44 	.word	0x08011a44
 8001c6c:	20000064 	.word	0x20000064
 8001c70:	08011a54 	.word	0x08011a54
 8001c74:	08011a24 	.word	0x08011a24
 8001c78:	08011a60 	.word	0x08011a60

08001c7c <fonction_entrees>:
* @brief Fonction implementant le thread tache_entrees.
* @param argument: Non utilise
* @retval Aucun
*/
void fonction_entrees(void const * argument)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Fonction utilisateur tache_entrees */
  // TODO: Implementer la logique d'entree ici
  for(;;) {
    vTaskDelay(pdMS_TO_TICKS(100));
 8001c84:	2064      	movs	r0, #100	@ 0x64
 8001c86:	f00c fd6b 	bl	800e760 <vTaskDelay>
 8001c8a:	e7fb      	b.n	8001c84 <fonction_entrees+0x8>

08001c8c <fonction_fantome>:
* @brief Fonction implementant le thread tache_fantome.
* @param argument: Non utilise
* @retval Aucun
*/
void fonction_fantome(void const * argument)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Fonction utilisateur tache_fantome */
  /* Boucle infinie */
  for(;;)
  {
    osDelay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f00b fbf8 	bl	800d48a <osDelay>
 8001c9a:	e7fb      	b.n	8001c94 <fonction_fantome+0x8>

08001c9c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001ca6:	20c8      	movs	r0, #200	@ 0xc8
 8001ca8:	f003 f832 	bl	8004d10 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001cac:	f000 fa7a 	bl	80021a4 <ft5336_I2C_InitializeIfRequired>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001ce4:	f000 fa5e 	bl	80021a4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e010      	b.n	8001d10 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	21a8      	movs	r1, #168	@ 0xa8
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 ffed 	bl	8004cd4 <TS_IO_Read>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001cfe:	7b7b      	ldrb	r3, [r7, #13]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b51      	cmp	r3, #81	@ 0x51
 8001d04:	d101      	bne.n	8001d0a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d802      	bhi.n	8001d1c <ft5336_ReadID+0x4e>
 8001d16:	7bbb      	ldrb	r3, [r7, #14]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0e8      	beq.n	8001cee <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001d1c:	7b7b      	ldrb	r3, [r7, #13]
 8001d1e:	b2db      	uxtb	r3, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fa45 	bl	80021c4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f933 	bl	8001fa8 <ft5336_TS_DisableIT>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2102      	movs	r1, #2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 ffb7 	bl	8004cd4 <TS_IO_Read>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d901      	bls.n	8001d82 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <ft5336_TS_DetectTouch+0x50>)
 8001d88:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001d8a:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <ft5336_TS_DetectTouch+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	b2db      	uxtb	r3, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000598 	.word	0x20000598

08001da0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f78 <ft5336_TS_GetXY+0x1d8>)
 8001dc4:	789a      	ldrb	r2, [r3, #2]
 8001dc6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f78 <ft5336_TS_GetXY+0x1d8>)
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	f080 80cf 	bcs.w	8001f6e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001dd0:	4b69      	ldr	r3, [pc, #420]	@ (8001f78 <ft5336_TS_GetXY+0x1d8>)
 8001dd2:	789b      	ldrb	r3, [r3, #2]
 8001dd4:	2b09      	cmp	r3, #9
 8001dd6:	d871      	bhi.n	8001ebc <ft5336_TS_GetXY+0x11c>
 8001dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8001de0 <ft5336_TS_GetXY+0x40>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	08001e1b 	.word	0x08001e1b
 8001de8:	08001e2d 	.word	0x08001e2d
 8001dec:	08001e3f 	.word	0x08001e3f
 8001df0:	08001e51 	.word	0x08001e51
 8001df4:	08001e63 	.word	0x08001e63
 8001df8:	08001e75 	.word	0x08001e75
 8001dfc:	08001e87 	.word	0x08001e87
 8001e00:	08001e99 	.word	0x08001e99
 8001e04:	08001eab 	.word	0x08001eab
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001e10:	2306      	movs	r3, #6
 8001e12:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001e14:	2305      	movs	r3, #5
 8001e16:	753b      	strb	r3, [r7, #20]
      break;
 8001e18:	e051      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001e1e:	2309      	movs	r3, #9
 8001e20:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001e22:	230c      	movs	r3, #12
 8001e24:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001e26:	230b      	movs	r3, #11
 8001e28:	753b      	strb	r3, [r7, #20]
      break;
 8001e2a:	e048      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001e2c:	2310      	movs	r3, #16
 8001e2e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001e30:	230f      	movs	r3, #15
 8001e32:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001e34:	2312      	movs	r3, #18
 8001e36:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001e38:	2311      	movs	r3, #17
 8001e3a:	753b      	strb	r3, [r7, #20]
      break;
 8001e3c:	e03f      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001e3e:	2316      	movs	r3, #22
 8001e40:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001e42:	2315      	movs	r3, #21
 8001e44:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001e46:	2318      	movs	r3, #24
 8001e48:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001e4a:	2317      	movs	r3, #23
 8001e4c:	753b      	strb	r3, [r7, #20]
      break;
 8001e4e:	e036      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001e50:	231c      	movs	r3, #28
 8001e52:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001e54:	231b      	movs	r3, #27
 8001e56:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001e58:	231e      	movs	r3, #30
 8001e5a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001e5c:	231d      	movs	r3, #29
 8001e5e:	753b      	strb	r3, [r7, #20]
      break;
 8001e60:	e02d      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001e62:	2322      	movs	r3, #34	@ 0x22
 8001e64:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001e66:	2321      	movs	r3, #33	@ 0x21
 8001e68:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001e6a:	2324      	movs	r3, #36	@ 0x24
 8001e6c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001e6e:	2323      	movs	r3, #35	@ 0x23
 8001e70:	753b      	strb	r3, [r7, #20]
      break;
 8001e72:	e024      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001e74:	2328      	movs	r3, #40	@ 0x28
 8001e76:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001e78:	2327      	movs	r3, #39	@ 0x27
 8001e7a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001e7c:	232a      	movs	r3, #42	@ 0x2a
 8001e7e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001e80:	2329      	movs	r3, #41	@ 0x29
 8001e82:	753b      	strb	r3, [r7, #20]
      break;
 8001e84:	e01b      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001e86:	232e      	movs	r3, #46	@ 0x2e
 8001e88:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001e8a:	232d      	movs	r3, #45	@ 0x2d
 8001e8c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001e8e:	2330      	movs	r3, #48	@ 0x30
 8001e90:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001e92:	232f      	movs	r3, #47	@ 0x2f
 8001e94:	753b      	strb	r3, [r7, #20]
      break;
 8001e96:	e012      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001e98:	2334      	movs	r3, #52	@ 0x34
 8001e9a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001e9c:	2333      	movs	r3, #51	@ 0x33
 8001e9e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001ea0:	2336      	movs	r3, #54	@ 0x36
 8001ea2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001ea4:	2335      	movs	r3, #53	@ 0x35
 8001ea6:	753b      	strb	r3, [r7, #20]
      break;
 8001ea8:	e009      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001eaa:	233a      	movs	r3, #58	@ 0x3a
 8001eac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001eae:	2339      	movs	r3, #57	@ 0x39
 8001eb0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001eb2:	233c      	movs	r3, #60	@ 0x3c
 8001eb4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001eb6:	233b      	movs	r3, #59	@ 0x3b
 8001eb8:	753b      	strb	r3, [r7, #20]
      break;
 8001eba:	e000      	b.n	8001ebe <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001ebc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	7dfa      	ldrb	r2, [r7, #23]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 ff04 	bl	8004cd4 <TS_IO_Read>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <ft5336_TS_GetXY+0x1dc>)
 8001ed8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	7dba      	ldrb	r2, [r7, #22]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fef6 	bl	8004cd4 <TS_IO_Read>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <ft5336_TS_GetXY+0x1dc>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <ft5336_TS_GetXY+0x1dc>)
 8001f06:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <ft5336_TS_GetXY+0x1dc>)
 8001f0a:	881a      	ldrh	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001f10:	89fb      	ldrh	r3, [r7, #14]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	7d7a      	ldrb	r2, [r7, #21]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fedb 	bl	8004cd4 <TS_IO_Read>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001f22:	7cfb      	ldrb	r3, [r7, #19]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <ft5336_TS_GetXY+0x1dc>)
 8001f2a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001f2c:	89fb      	ldrh	r3, [r7, #14]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	7d3a      	ldrb	r2, [r7, #20]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 fecd 	bl	8004cd4 <TS_IO_Read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001f3e:	7cfb      	ldrb	r3, [r7, #19]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <ft5336_TS_GetXY+0x1dc>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <ft5336_TS_GetXY+0x1dc>)
 8001f58:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <ft5336_TS_GetXY+0x1dc>)
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001f62:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <ft5336_TS_GetXY+0x1d8>)
 8001f64:	789b      	ldrb	r3, [r3, #2]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <ft5336_TS_GetXY+0x1d8>)
 8001f6c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000598 	.word	0x20000598
 8001f7c:	2000059c 	.word	0x2000059c

08001f80 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	21a4      	movs	r1, #164	@ 0xa4
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fe80 	bl	8004ca0 <TS_IO_Write>
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	21a4      	movs	r1, #164	@ 0xa4
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 fe6c 	bl	8004ca0 <TS_IO_Write>
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	6039      	str	r1, [r7, #0]
 8002008:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2101      	movs	r1, #1
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fe5d 	bl	8004cd4 <TS_IO_Read>
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	601a      	str	r2, [r3, #0]
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4603      	mov	r3, r0
 800203e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8002050:	4b4d      	ldr	r3, [pc, #308]	@ (8002188 <ft5336_TS_GetTouchInfo+0x158>)
 8002052:	785b      	ldrb	r3, [r3, #1]
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4293      	cmp	r3, r2
 800205a:	f080 8090 	bcs.w	800217e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b09      	cmp	r3, #9
 8002062:	d85d      	bhi.n	8002120 <ft5336_TS_GetTouchInfo+0xf0>
 8002064:	a201      	add	r2, pc, #4	@ (adr r2, 800206c <ft5336_TS_GetTouchInfo+0x3c>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	08002095 	.word	0x08002095
 8002070:	080020a3 	.word	0x080020a3
 8002074:	080020b1 	.word	0x080020b1
 8002078:	080020bf 	.word	0x080020bf
 800207c:	080020cd 	.word	0x080020cd
 8002080:	080020db 	.word	0x080020db
 8002084:	080020e9 	.word	0x080020e9
 8002088:	080020f7 	.word	0x080020f7
 800208c:	08002105 	.word	0x08002105
 8002090:	08002113 	.word	0x08002113
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8002094:	2303      	movs	r3, #3
 8002096:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8002098:	2307      	movs	r3, #7
 800209a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800209c:	2308      	movs	r3, #8
 800209e:	757b      	strb	r3, [r7, #21]
      break;
 80020a0:	e03f      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80020a2:	2309      	movs	r3, #9
 80020a4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80020a6:	230d      	movs	r3, #13
 80020a8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80020aa:	230e      	movs	r3, #14
 80020ac:	757b      	strb	r3, [r7, #21]
      break;
 80020ae:	e038      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80020b0:	230f      	movs	r3, #15
 80020b2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80020b4:	2313      	movs	r3, #19
 80020b6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80020b8:	2314      	movs	r3, #20
 80020ba:	757b      	strb	r3, [r7, #21]
      break;
 80020bc:	e031      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80020be:	2315      	movs	r3, #21
 80020c0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80020c2:	2319      	movs	r3, #25
 80020c4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80020c6:	231a      	movs	r3, #26
 80020c8:	757b      	strb	r3, [r7, #21]
      break;
 80020ca:	e02a      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80020cc:	231b      	movs	r3, #27
 80020ce:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80020d0:	231f      	movs	r3, #31
 80020d2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80020d4:	2320      	movs	r3, #32
 80020d6:	757b      	strb	r3, [r7, #21]
      break;
 80020d8:	e023      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80020da:	2321      	movs	r3, #33	@ 0x21
 80020dc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80020de:	2325      	movs	r3, #37	@ 0x25
 80020e0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80020e2:	2326      	movs	r3, #38	@ 0x26
 80020e4:	757b      	strb	r3, [r7, #21]
      break;
 80020e6:	e01c      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80020e8:	2327      	movs	r3, #39	@ 0x27
 80020ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80020ec:	232b      	movs	r3, #43	@ 0x2b
 80020ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80020f0:	232c      	movs	r3, #44	@ 0x2c
 80020f2:	757b      	strb	r3, [r7, #21]
      break;
 80020f4:	e015      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80020f6:	232d      	movs	r3, #45	@ 0x2d
 80020f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80020fa:	2331      	movs	r3, #49	@ 0x31
 80020fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80020fe:	2332      	movs	r3, #50	@ 0x32
 8002100:	757b      	strb	r3, [r7, #21]
      break;
 8002102:	e00e      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002104:	2333      	movs	r3, #51	@ 0x33
 8002106:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8002108:	2337      	movs	r3, #55	@ 0x37
 800210a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 800210c:	2338      	movs	r3, #56	@ 0x38
 800210e:	757b      	strb	r3, [r7, #21]
      break;
 8002110:	e007      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002112:	2339      	movs	r3, #57	@ 0x39
 8002114:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8002116:	233d      	movs	r3, #61	@ 0x3d
 8002118:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800211a:	233e      	movs	r3, #62	@ 0x3e
 800211c:	757b      	strb	r3, [r7, #21]
      break;
 800211e:	e000      	b.n	8002122 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002120:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	7dfa      	ldrb	r2, [r7, #23]
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f002 fdd2 	bl	8004cd4 <TS_IO_Read>
 8002130:	4603      	mov	r3, r0
 8002132:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002134:	7d3b      	ldrb	r3, [r7, #20]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	119b      	asrs	r3, r3, #6
 800213a:	f003 0203 	and.w	r2, r3, #3
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002142:	89fb      	ldrh	r3, [r7, #14]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	7dba      	ldrb	r2, [r7, #22]
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fdc2 	bl	8004cd4 <TS_IO_Read>
 8002150:	4603      	mov	r3, r0
 8002152:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002154:	7d3b      	ldrb	r3, [r7, #20]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800215e:	89fb      	ldrh	r3, [r7, #14]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	7d7a      	ldrb	r2, [r7, #21]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fdb4 	bl	8004cd4 <TS_IO_Read>
 800216c:	4603      	mov	r3, r0
 800216e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8002170:	7d3b      	ldrb	r3, [r7, #20]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	111b      	asrs	r3, r3, #4
 8002176:	f003 0204 	and.w	r2, r3, #4
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000598 	.word	0x20000598

0800218c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8002192:	781b      	ldrb	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000598 	.word	0x20000598

080021a4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80021a8:	f7ff fff0 	bl	800218c <ft5336_Get_I2C_InitializedStatus>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d104      	bne.n	80021bc <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80021b2:	f002 fd6b 	bl	8004c8c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80021b6:	4b02      	ldr	r3, [pc, #8]	@ (80021c0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
  }
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000598 	.word	0x20000598

080021c4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b090      	sub	sp, #64	@ 0x40
 80021e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021f6:	4baf      	ldr	r3, [pc, #700]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4aae      	ldr	r2, [pc, #696]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80021fc:	f043 0310 	orr.w	r3, r3, #16
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4bac      	ldr	r3, [pc, #688]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800220e:	4ba9      	ldr	r3, [pc, #676]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4aa8      	ldr	r2, [pc, #672]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4ba6      	ldr	r3, [pc, #664]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	4ba3      	ldr	r3, [pc, #652]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4aa2      	ldr	r2, [pc, #648]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4ba0      	ldr	r3, [pc, #640]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800223e:	4b9d      	ldr	r3, [pc, #628]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	4a9c      	ldr	r2, [pc, #624]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	6313      	str	r3, [r2, #48]	@ 0x30
 800224a:	4b9a      	ldr	r3, [pc, #616]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	4b97      	ldr	r3, [pc, #604]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a96      	ldr	r2, [pc, #600]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b94      	ldr	r3, [pc, #592]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b91      	ldr	r3, [pc, #580]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a90      	ldr	r2, [pc, #576]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b8e      	ldr	r3, [pc, #568]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002286:	4b8b      	ldr	r3, [pc, #556]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a8a      	ldr	r2, [pc, #552]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 800228c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b88      	ldr	r3, [pc, #544]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800229e:	4b85      	ldr	r3, [pc, #532]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a84      	ldr	r2, [pc, #528]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b82      	ldr	r3, [pc, #520]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80022b6:	4b7f      	ldr	r3, [pc, #508]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a7e      	ldr	r2, [pc, #504]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b7c      	ldr	r3, [pc, #496]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ce:	4b79      	ldr	r3, [pc, #484]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4a78      	ldr	r2, [pc, #480]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022d4:	f043 0320 	orr.w	r3, r3, #32
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022da:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e6:	4b73      	ldr	r3, [pc, #460]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	4a72      	ldr	r2, [pc, #456]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f2:	4b70      	ldr	r3, [pc, #448]	@ (80024b4 <MX_GPIO_Init+0x2d4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	2160      	movs	r1, #96	@ 0x60
 8002302:	486d      	ldr	r0, [pc, #436]	@ (80024b8 <MX_GPIO_Init+0x2d8>)
 8002304:	f006 fe5a 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002308:	2201      	movs	r2, #1
 800230a:	2120      	movs	r1, #32
 800230c:	486b      	ldr	r0, [pc, #428]	@ (80024bc <MX_GPIO_Init+0x2dc>)
 800230e:	f006 fe55 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	2108      	movs	r1, #8
 8002316:	4869      	ldr	r0, [pc, #420]	@ (80024bc <MX_GPIO_Init+0x2dc>)
 8002318:	f006 fe50 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800231c:	2201      	movs	r2, #1
 800231e:	2108      	movs	r1, #8
 8002320:	4867      	ldr	r0, [pc, #412]	@ (80024c0 <MX_GPIO_Init+0x2e0>)
 8002322:	f006 fe4b 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002326:	2201      	movs	r2, #1
 8002328:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800232c:	4865      	ldr	r0, [pc, #404]	@ (80024c4 <MX_GPIO_Init+0x2e4>)
 800232e:	f006 fe45 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002332:	2200      	movs	r2, #0
 8002334:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002338:	4863      	ldr	r0, [pc, #396]	@ (80024c8 <MX_GPIO_Init+0x2e8>)
 800233a:	f006 fe3f 	bl	8008fbc <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	21c8      	movs	r1, #200	@ 0xc8
 8002342:	4862      	ldr	r0, [pc, #392]	@ (80024cc <MX_GPIO_Init+0x2ec>)
 8002344:	f006 fe3a 	bl	8008fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002348:	2308      	movs	r3, #8
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002358:	4619      	mov	r1, r3
 800235a:	4857      	ldr	r0, [pc, #348]	@ (80024b8 <MX_GPIO_Init+0x2d8>)
 800235c:	f006 fb5e 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002360:	2304      	movs	r3, #4
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002370:	2309      	movs	r3, #9
 8002372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	484f      	ldr	r0, [pc, #316]	@ (80024b8 <MX_GPIO_Init+0x2d8>)
 800237c:	f006 fb4e 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002380:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002392:	230b      	movs	r3, #11
 8002394:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002396:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800239a:	4619      	mov	r1, r3
 800239c:	484b      	ldr	r0, [pc, #300]	@ (80024cc <MX_GPIO_Init+0x2ec>)
 800239e:	f006 fb3d 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80023a2:	f643 0323 	movw	r3, #14371	@ 0x3823
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023b4:	230a      	movs	r3, #10
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023bc:	4619      	mov	r1, r3
 80023be:	4844      	ldr	r0, [pc, #272]	@ (80024d0 <MX_GPIO_Init+0x2f0>)
 80023c0:	f006 fb2c 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80023d4:	2308      	movs	r3, #8
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023dc:	4619      	mov	r1, r3
 80023de:	4837      	ldr	r0, [pc, #220]	@ (80024bc <MX_GPIO_Init+0x2dc>)
 80023e0:	f006 fb1c 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80023e4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023f6:	230c      	movs	r3, #12
 80023f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023fe:	4619      	mov	r1, r3
 8002400:	4834      	ldr	r0, [pc, #208]	@ (80024d4 <MX_GPIO_Init+0x2f4>)
 8002402:	f006 fb0b 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002406:	f248 1340 	movw	r3, #33088	@ 0x8140
 800240a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240c:	2300      	movs	r3, #0
 800240e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002418:	4619      	mov	r1, r3
 800241a:	482f      	ldr	r0, [pc, #188]	@ (80024d8 <MX_GPIO_Init+0x2f8>)
 800241c:	f006 fafe 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002420:	2360      	movs	r3, #96	@ 0x60
 8002422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002430:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002434:	4619      	mov	r1, r3
 8002436:	4820      	ldr	r0, [pc, #128]	@ (80024b8 <MX_GPIO_Init+0x2d8>)
 8002438:	f006 faf0 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800243c:	2340      	movs	r3, #64	@ 0x40
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800244c:	230a      	movs	r3, #10
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002454:	4619      	mov	r1, r3
 8002456:	481e      	ldr	r0, [pc, #120]	@ (80024d0 <MX_GPIO_Init+0x2f0>)
 8002458:	f006 fae0 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800245c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002462:	2300      	movs	r3, #0
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800246e:	4619      	mov	r1, r3
 8002470:	481a      	ldr	r0, [pc, #104]	@ (80024dc <MX_GPIO_Init+0x2fc>)
 8002472:	f006 fad3 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002476:	2340      	movs	r3, #64	@ 0x40
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800247a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800247e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002488:	4619      	mov	r1, r3
 800248a:	480c      	ldr	r0, [pc, #48]	@ (80024bc <MX_GPIO_Init+0x2dc>)
 800248c:	f006 fac6 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002490:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024a2:	230a      	movs	r3, #10
 80024a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	480a      	ldr	r0, [pc, #40]	@ (80024d8 <MX_GPIO_Init+0x2f8>)
 80024ae:	f006 fab5 	bl	8008a1c <HAL_GPIO_Init>
 80024b2:	e015      	b.n	80024e0 <MX_GPIO_Init+0x300>
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40022800 	.word	0x40022800
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40021c00 	.word	0x40021c00
 80024cc:	40021800 	.word	0x40021800
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020000 	.word	0x40020000
 80024dc:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80024e0:	23f0      	movs	r3, #240	@ 0xf0
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80024f0:	230a      	movs	r3, #10
 80024f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f8:	4619      	mov	r1, r3
 80024fa:	4891      	ldr	r0, [pc, #580]	@ (8002740 <MX_GPIO_Init+0x560>)
 80024fc:	f006 fa8e 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002512:	230a      	movs	r3, #10
 8002514:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002516:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800251a:	4619      	mov	r1, r3
 800251c:	4889      	ldr	r0, [pc, #548]	@ (8002744 <MX_GPIO_Init+0x564>)
 800251e:	f006 fa7d 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002522:	2328      	movs	r3, #40	@ 0x28
 8002524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	2301      	movs	r3, #1
 8002528:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002532:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002536:	4619      	mov	r1, r3
 8002538:	4883      	ldr	r0, [pc, #524]	@ (8002748 <MX_GPIO_Init+0x568>)
 800253a:	f006 fa6f 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800253e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002544:	2300      	movs	r3, #0
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800254c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002550:	4619      	mov	r1, r3
 8002552:	487e      	ldr	r0, [pc, #504]	@ (800274c <MX_GPIO_Init+0x56c>)
 8002554:	f006 fa62 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002558:	2308      	movs	r3, #8
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255c:	2301      	movs	r3, #1
 800255e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002568:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800256c:	4619      	mov	r1, r3
 800256e:	4878      	ldr	r0, [pc, #480]	@ (8002750 <MX_GPIO_Init+0x570>)
 8002570:	f006 fa54 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002574:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002582:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002586:	4619      	mov	r1, r3
 8002588:	486e      	ldr	r0, [pc, #440]	@ (8002744 <MX_GPIO_Init+0x564>)
 800258a:	f006 fa47 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800258e:	2310      	movs	r3, #16
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002592:	2300      	movs	r3, #0
 8002594:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800259a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800259e:	4619      	mov	r1, r3
 80025a0:	4869      	ldr	r0, [pc, #420]	@ (8002748 <MX_GPIO_Init+0x568>)
 80025a2:	f006 fa3b 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80025a6:	2304      	movs	r3, #4
 80025a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025b6:	230c      	movs	r3, #12
 80025b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025be:	4619      	mov	r1, r3
 80025c0:	4861      	ldr	r0, [pc, #388]	@ (8002748 <MX_GPIO_Init+0x568>)
 80025c2:	f006 fa2b 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80025c6:	f24a 0304 	movw	r3, #40964	@ 0xa004
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025cc:	2300      	movs	r3, #0
 80025ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025d8:	4619      	mov	r1, r3
 80025da:	485e      	ldr	r0, [pc, #376]	@ (8002754 <MX_GPIO_Init+0x574>)
 80025dc:	f006 fa1e 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80025e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80025f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025f6:	4619      	mov	r1, r3
 80025f8:	4851      	ldr	r0, [pc, #324]	@ (8002740 <MX_GPIO_Init+0x560>)
 80025fa:	f006 fa0f 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80025fe:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	2301      	movs	r3, #1
 8002606:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	484f      	ldr	r0, [pc, #316]	@ (8002754 <MX_GPIO_Init+0x574>)
 8002618:	f006 fa00 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800261c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002622:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002626:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800262c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002630:	4619      	mov	r1, r3
 8002632:	4843      	ldr	r0, [pc, #268]	@ (8002740 <MX_GPIO_Init+0x560>)
 8002634:	f006 f9f2 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002638:	2310      	movs	r3, #16
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002648:	230a      	movs	r3, #10
 800264a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002650:	4619      	mov	r1, r3
 8002652:	4840      	ldr	r0, [pc, #256]	@ (8002754 <MX_GPIO_Init+0x574>)
 8002654:	f006 f9e2 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002658:	23c8      	movs	r3, #200	@ 0xc8
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002668:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800266c:	4619      	mov	r1, r3
 800266e:	4835      	ldr	r0, [pc, #212]	@ (8002744 <MX_GPIO_Init+0x564>)
 8002670:	f006 f9d4 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002674:	2305      	movs	r3, #5
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002684:	230a      	movs	r3, #10
 8002686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002688:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800268c:	4619      	mov	r1, r3
 800268e:	482f      	ldr	r0, [pc, #188]	@ (800274c <MX_GPIO_Init+0x56c>)
 8002690:	f006 f9c4 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002694:	2332      	movs	r3, #50	@ 0x32
 8002696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026a4:	230b      	movs	r3, #11
 80026a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026ac:	4619      	mov	r1, r3
 80026ae:	4827      	ldr	r0, [pc, #156]	@ (800274c <MX_GPIO_Init+0x56c>)
 80026b0:	f006 f9b4 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026b4:	2304      	movs	r3, #4
 80026b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026c4:	2309      	movs	r3, #9
 80026c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026cc:	4619      	mov	r1, r3
 80026ce:	4822      	ldr	r0, [pc, #136]	@ (8002758 <MX_GPIO_Init+0x578>)
 80026d0:	f006 f9a4 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80026d4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80026e6:	2309      	movs	r3, #9
 80026e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026ee:	4619      	mov	r1, r3
 80026f0:	4815      	ldr	r0, [pc, #84]	@ (8002748 <MX_GPIO_Init+0x568>)
 80026f2:	f006 f993 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80026f6:	2386      	movs	r3, #134	@ 0x86
 80026f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002706:	230b      	movs	r3, #11
 8002708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800270e:	4619      	mov	r1, r3
 8002710:	4812      	ldr	r0, [pc, #72]	@ (800275c <MX_GPIO_Init+0x57c>)
 8002712:	f006 f983 	bl	8008a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002716:	2328      	movs	r3, #40	@ 0x28
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002722:	2303      	movs	r3, #3
 8002724:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002726:	230a      	movs	r3, #10
 8002728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800272e:	4619      	mov	r1, r3
 8002730:	480a      	ldr	r0, [pc, #40]	@ (800275c <MX_GPIO_Init+0x57c>)
 8002732:	f006 f973 	bl	8008a1c <HAL_GPIO_Init>

}
 8002736:	bf00      	nop
 8002738:	3740      	adds	r7, #64	@ 0x40
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000
 8002744:	40021800 	.word	0x40021800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40020800 	.word	0x40020800
 8002750:	40022800 	.word	0x40022800
 8002754:	40021c00 	.word	0x40021c00
 8002758:	40020400 	.word	0x40020400
 800275c:	40020000 	.word	0x40020000

08002760 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <MX_I2C1_Init+0x74>)
 8002766:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <MX_I2C1_Init+0x78>)
 8002768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800276a:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <MX_I2C1_Init+0x74>)
 800276c:	4a1b      	ldr	r2, [pc, #108]	@ (80027dc <MX_I2C1_Init+0x7c>)
 800276e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002770:	4b18      	ldr	r3, [pc, #96]	@ (80027d4 <MX_I2C1_Init+0x74>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002776:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <MX_I2C1_Init+0x74>)
 8002778:	2201      	movs	r2, #1
 800277a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800277c:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <MX_I2C1_Init+0x74>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <MX_I2C1_Init+0x74>)
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002788:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <MX_I2C1_Init+0x74>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <MX_I2C1_Init+0x74>)
 8002790:	2200      	movs	r2, #0
 8002792:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <MX_I2C1_Init+0x74>)
 8002796:	2200      	movs	r2, #0
 8002798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800279a:	480e      	ldr	r0, [pc, #56]	@ (80027d4 <MX_I2C1_Init+0x74>)
 800279c:	f006 fc28 	bl	8008ff0 <HAL_I2C_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027a6:	f000 fbaf 	bl	8002f08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027aa:	2100      	movs	r1, #0
 80027ac:	4809      	ldr	r0, [pc, #36]	@ (80027d4 <MX_I2C1_Init+0x74>)
 80027ae:	f007 f9e9 	bl	8009b84 <HAL_I2CEx_ConfigAnalogFilter>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027b8:	f000 fba6 	bl	8002f08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027bc:	2100      	movs	r1, #0
 80027be:	4805      	ldr	r0, [pc, #20]	@ (80027d4 <MX_I2C1_Init+0x74>)
 80027c0:	f007 fa2b 	bl	8009c1a <HAL_I2CEx_ConfigDigitalFilter>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ca:	f000 fb9d 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200005a0 	.word	0x200005a0
 80027d8:	40005400 	.word	0x40005400
 80027dc:	00c0eaff 	.word	0x00c0eaff

080027e0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <MX_I2C3_Init+0x74>)
 80027e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002858 <MX_I2C3_Init+0x78>)
 80027e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <MX_I2C3_Init+0x74>)
 80027ec:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <MX_I2C3_Init+0x7c>)
 80027ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80027f0:	4b18      	ldr	r3, [pc, #96]	@ (8002854 <MX_I2C3_Init+0x74>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f6:	4b17      	ldr	r3, [pc, #92]	@ (8002854 <MX_I2C3_Init+0x74>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027fc:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <MX_I2C3_Init+0x74>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002802:	4b14      	ldr	r3, [pc, #80]	@ (8002854 <MX_I2C3_Init+0x74>)
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002808:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <MX_I2C3_Init+0x74>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800280e:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <MX_I2C3_Init+0x74>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002814:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <MX_I2C3_Init+0x74>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800281a:	480e      	ldr	r0, [pc, #56]	@ (8002854 <MX_I2C3_Init+0x74>)
 800281c:	f006 fbe8 	bl	8008ff0 <HAL_I2C_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002826:	f000 fb6f 	bl	8002f08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800282a:	2100      	movs	r1, #0
 800282c:	4809      	ldr	r0, [pc, #36]	@ (8002854 <MX_I2C3_Init+0x74>)
 800282e:	f007 f9a9 	bl	8009b84 <HAL_I2CEx_ConfigAnalogFilter>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002838:	f000 fb66 	bl	8002f08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800283c:	2100      	movs	r1, #0
 800283e:	4805      	ldr	r0, [pc, #20]	@ (8002854 <MX_I2C3_Init+0x74>)
 8002840:	f007 f9eb 	bl	8009c1a <HAL_I2CEx_ConfigDigitalFilter>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800284a:	f000 fb5d 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200005f4 	.word	0x200005f4
 8002858:	40005c00 	.word	0x40005c00
 800285c:	00c0eaff 	.word	0x00c0eaff

08002860 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0ac      	sub	sp, #176	@ 0xb0
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002878:	f107 0318 	add.w	r3, r7, #24
 800287c:	2284      	movs	r2, #132	@ 0x84
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f00d fa4b 	bl	800fd1c <memset>
  if(i2cHandle->Instance==I2C1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a44      	ldr	r2, [pc, #272]	@ (800299c <HAL_I2C_MspInit+0x13c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d13d      	bne.n	800290c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002890:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002894:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002896:	2300      	movs	r3, #0
 8002898:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289a:	f107 0318 	add.w	r3, r7, #24
 800289e:	4618      	mov	r0, r3
 80028a0:	f008 fa44 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028aa:	f000 fb2d 	bl	8002f08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	4b3c      	ldr	r3, [pc, #240]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a3b      	ldr	r2, [pc, #236]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b39      	ldr	r3, [pc, #228]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ce:	2312      	movs	r3, #18
 80028d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028e0:	2304      	movs	r3, #4
 80028e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80028ea:	4619      	mov	r1, r3
 80028ec:	482d      	ldr	r0, [pc, #180]	@ (80029a4 <HAL_I2C_MspInit+0x144>)
 80028ee:	f006 f895 	bl	8008a1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028f2:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	4a2a      	ldr	r2, [pc, #168]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 80028f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fe:	4b28      	ldr	r3, [pc, #160]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800290a:	e042      	b.n	8002992 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a25      	ldr	r2, [pc, #148]	@ (80029a8 <HAL_I2C_MspInit+0x148>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d13d      	bne.n	8002992 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002916:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800291a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	4618      	mov	r0, r3
 8002928:	f008 fa00 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002932:	f000 fae9 	bl	8002f08 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002936:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 800293c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002940:	6313      	str	r3, [r2, #48]	@ 0x30
 8002942:	4b17      	ldr	r3, [pc, #92]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800294e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002956:	2312      	movs	r3, #18
 8002958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800295c:	2301      	movs	r3, #1
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002968:	2304      	movs	r3, #4
 800296a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800296e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002972:	4619      	mov	r1, r3
 8002974:	480d      	ldr	r0, [pc, #52]	@ (80029ac <HAL_I2C_MspInit+0x14c>)
 8002976:	f006 f851 	bl	8008a1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	4a08      	ldr	r2, [pc, #32]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 8002980:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002984:	6413      	str	r3, [r2, #64]	@ 0x40
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_I2C_MspInit+0x140>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
}
 8002992:	bf00      	nop
 8002994:	37b0      	adds	r7, #176	@ 0xb0
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40005400 	.word	0x40005400
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40005c00 	.word	0x40005c00
 80029ac:	40021c00 	.word	0x40021c00

080029b0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a15      	ldr	r2, [pc, #84]	@ (8002a14 <HAL_I2C_MspDeInit+0x64>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d110      	bne.n	80029e4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_I2C_MspDeInit+0x68>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	4a14      	ldr	r2, [pc, #80]	@ (8002a18 <HAL_I2C_MspDeInit+0x68>)
 80029c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029cc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80029ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029d2:	4812      	ldr	r0, [pc, #72]	@ (8002a1c <HAL_I2C_MspDeInit+0x6c>)
 80029d4:	f006 f9ce 	bl	8008d74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80029d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029dc:	480f      	ldr	r0, [pc, #60]	@ (8002a1c <HAL_I2C_MspDeInit+0x6c>)
 80029de:	f006 f9c9 	bl	8008d74 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80029e2:	e013      	b.n	8002a0c <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <HAL_I2C_MspDeInit+0x70>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10e      	bne.n	8002a0c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_I2C_MspDeInit+0x68>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a09      	ldr	r2, [pc, #36]	@ (8002a18 <HAL_I2C_MspDeInit+0x68>)
 80029f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80029fa:	2180      	movs	r1, #128	@ 0x80
 80029fc:	4809      	ldr	r0, [pc, #36]	@ (8002a24 <HAL_I2C_MspDeInit+0x74>)
 80029fe:	f006 f9b9 	bl	8008d74 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a06:	4807      	ldr	r0, [pc, #28]	@ (8002a24 <HAL_I2C_MspDeInit+0x74>)
 8002a08:	f006 f9b4 	bl	8008d74 <HAL_GPIO_DeInit>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40005400 	.word	0x40005400
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40005c00 	.word	0x40005c00
 8002a24:	40021c00 	.word	0x40021c00

08002a28 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08e      	sub	sp, #56	@ 0x38
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2234      	movs	r2, #52	@ 0x34
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00d f971 	bl	800fd1c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b28 <MX_LTDC_Init+0x100>)
 8002a3e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002a40:	4b38      	ldr	r3, [pc, #224]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002a46:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002a4c:	4b35      	ldr	r3, [pc, #212]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002a52:	4b34      	ldr	r3, [pc, #208]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002a58:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a5a:	2228      	movs	r2, #40	@ 0x28
 8002a5c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a60:	2209      	movs	r2, #9
 8002a62:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002a64:	4b2f      	ldr	r3, [pc, #188]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a66:	2235      	movs	r2, #53	@ 0x35
 8002a68:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a6c:	220b      	movs	r2, #11
 8002a6e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002a70:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a72:	f240 2215 	movw	r2, #533	@ 0x215
 8002a76:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002a78:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a7a:	f240 121b 	movw	r2, #283	@ 0x11b
 8002a7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002a80:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a82:	f240 2235 	movw	r2, #565	@ 0x235
 8002a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002a88:	4b26      	ldr	r3, [pc, #152]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a8a:	f240 121d 	movw	r2, #285	@ 0x11d
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002a90:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002a98:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002aa0:	4b20      	ldr	r3, [pc, #128]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002aa8:	481e      	ldr	r0, [pc, #120]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002aaa:	f007 f902 	bl	8009cb2 <HAL_LTDC_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002ab4:	f000 fa28 	bl	8002f08 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002abc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002ac0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002ac6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002aca:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002acc:	2302      	movs	r3, #2
 8002ace:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002ad0:	23ff      	movs	r3, #255	@ 0xff
 8002ad2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ad8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002adc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ade:	2307      	movs	r3, #7
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002ae2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002ae8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002aee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002af2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4805      	ldr	r0, [pc, #20]	@ (8002b24 <MX_LTDC_Init+0xfc>)
 8002b0e:	f007 fa2f 	bl	8009f70 <HAL_LTDC_ConfigLayer>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002b18:	f000 f9f6 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002b1c:	bf00      	nop
 8002b1e:	3738      	adds	r7, #56	@ 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000648 	.word	0x20000648
 8002b28:	40016800 	.word	0x40016800

08002b2c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b0ae      	sub	sp, #184	@ 0xb8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b44:	f107 0320 	add.w	r3, r7, #32
 8002b48:	2284      	movs	r2, #132	@ 0x84
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f00d f8e5 	bl	800fd1c <memset>
  if(ltdcHandle->Instance==LTDC)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6f      	ldr	r2, [pc, #444]	@ (8002d14 <HAL_LTDC_MspInit+0x1e8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	f040 80d6 	bne.w	8002d0a <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b5e:	2308      	movs	r3, #8
 8002b60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002b62:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002b68:	2305      	movs	r3, #5
 8002b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002b70:	2303      	movs	r3, #3
 8002b72:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002b74:	2301      	movs	r3, #1
 8002b76:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002b78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b7e:	f107 0320 	add.w	r3, r7, #32
 8002b82:	4618      	mov	r0, r3
 8002b84:	f008 f8d2 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8002b8e:	f000 f9bb 	bl	8002f08 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b92:	4b61      	ldr	r3, [pc, #388]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	4a60      	ldr	r2, [pc, #384]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002b98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002baa:	4b5b      	ldr	r3, [pc, #364]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4a5a      	ldr	r2, [pc, #360]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bb0:	f043 0310 	orr.w	r3, r3, #16
 8002bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb6:	4b58      	ldr	r3, [pc, #352]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002bc2:	4b55      	ldr	r3, [pc, #340]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	4a54      	ldr	r2, [pc, #336]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bce:	4b52      	ldr	r3, [pc, #328]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002bda:	4b4f      	ldr	r3, [pc, #316]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	4a4e      	ldr	r2, [pc, #312]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002be0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be6:	4b4c      	ldr	r3, [pc, #304]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bf2:	4b49      	ldr	r3, [pc, #292]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a48      	ldr	r2, [pc, #288]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b46      	ldr	r3, [pc, #280]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c0a:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a42      	ldr	r2, [pc, #264]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b40      	ldr	r3, [pc, #256]	@ (8002d18 <HAL_LTDC_MspInit+0x1ec>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002c22:	2310      	movs	r3, #16
 8002c24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c3a:	230e      	movs	r3, #14
 8002c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002c40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4835      	ldr	r0, [pc, #212]	@ (8002d1c <HAL_LTDC_MspInit+0x1f0>)
 8002c48:	f005 fee8 	bl	8008a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002c4c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c66:	230e      	movs	r3, #14
 8002c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002c6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c70:	4619      	mov	r1, r3
 8002c72:	482b      	ldr	r0, [pc, #172]	@ (8002d20 <HAL_LTDC_MspInit+0x1f4>)
 8002c74:	f005 fed2 	bl	8008a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002c78:	23f7      	movs	r3, #247	@ 0xf7
 8002c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c90:	230e      	movs	r3, #14
 8002c92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002c96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4821      	ldr	r0, [pc, #132]	@ (8002d24 <HAL_LTDC_MspInit+0x1f8>)
 8002c9e:	f005 febd 	bl	8008a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002cbc:	2309      	movs	r3, #9
 8002cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4817      	ldr	r0, [pc, #92]	@ (8002d28 <HAL_LTDC_MspInit+0x1fc>)
 8002cca:	f005 fea7 	bl	8008a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002cce:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ce8:	230e      	movs	r3, #14
 8002cea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	480d      	ldr	r0, [pc, #52]	@ (8002d2c <HAL_LTDC_MspInit+0x200>)
 8002cf6:	f005 fe91 	bl	8008a1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2105      	movs	r1, #5
 8002cfe:	2058      	movs	r0, #88	@ 0x58
 8002d00:	f005 f822 	bl	8007d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002d04:	2058      	movs	r0, #88	@ 0x58
 8002d06:	f005 f83b 	bl	8007d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	37b8      	adds	r7, #184	@ 0xb8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40016800 	.word	0x40016800
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40022400 	.word	0x40022400
 8002d24:	40022800 	.word	0x40022800
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40022000 	.word	0x40022000

08002d30 <main>:
/**
  * @brief  Point d'entree de l'application
  * @retval int
  */
int main(void)
{
 8002d30:	b598      	push	{r3, r4, r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d34:	f004 fb01 	bl	800733a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d38:	f000 f862 	bl	8002e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d3c:	f7ff fa50 	bl	80021e0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8002d40:	f7fe f964 	bl	800100c <MX_ADC3_Init>
  MX_DMA2D_Init();
 8002d44:	f7fe fa94 	bl	8001270 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002d48:	f7fe faea 	bl	8001320 <MX_FMC_Init>
  MX_I2C1_Init();
 8002d4c:	f7ff fd08 	bl	8002760 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002d50:	f7ff fd46 	bl	80027e0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002d54:	f7ff fe68 	bl	8002a28 <MX_LTDC_Init>
  MX_RTC_Init();
 8002d58:	f001 fcd0 	bl	80046fc <MX_RTC_Init>
  MX_SPI2_Init();
 8002d5c:	f001 fda0 	bl	80048a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002d60:	f003 fefe 	bl	8006b60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d64:	f003 ff50 	bl	8006c08 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d68:	f003 ff9c 	bl	8006ca4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002d6c:	f003 ffe8 	bl	8006d40 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002d70:	f004 f834 	bl	8006ddc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002d74:	f004 f948 	bl	8007008 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002d78:	f004 f976 	bl	8007068 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8002d7c:	f7fe f8f4 	bl	8000f68 <MX_ADC1_Init>
  MX_DAC_Init();
 8002d80:	f7fe fa04 	bl	800118c <MX_DAC_Init>
  MX_UART7_Init();
 8002d84:	f004 f910 	bl	8006fa8 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  // Initialiser l'ecran LCD
  BSP_LCD_Init();
 8002d88:	f001 ffce 	bl	8004d28 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8002d8c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8002d90:	2000      	movs	r0, #0
 8002d92:	f002 f861 	bl	8004e58 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8002d96:	f002 f837 	bl	8004e08 <BSP_LCD_GetXSize>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	f002 f848 	bl	8004e30 <BSP_LCD_GetYSize>
 8002da0:	4603      	mov	r3, r0
 8002da2:	fb04 f303 	mul.w	r3, r4, r3
 8002da6:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4619      	mov	r1, r3
 8002dae:	2001      	movs	r0, #1
 8002db0:	f002 f852 	bl	8004e58 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f002 f8af 	bl	8004f18 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8002dba:	f002 fe97 	bl	8005aec <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002dbe:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002dc2:	f002 f905 	bl	8004fd0 <BSP_LCD_Clear>
  
  // Initialiser l'ecran tactile
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002dc6:	f002 f81f 	bl	8004e08 <BSP_LCD_GetXSize>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	b29c      	uxth	r4, r3
 8002dce:	f002 f82f 	bl	8004e30 <BSP_LCD_GetYSize>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f003 fb15 	bl	8006408 <BSP_TS_Init>
  
  // Demarrer l'ADC pour le joystick et les potentiometres
  HAL_ADC_Start(&hadc1);
 8002dde:	4806      	ldr	r0, [pc, #24]	@ (8002df8 <main+0xc8>)
 8002de0:	f004 fb40 	bl	8007464 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8002de4:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <main+0xcc>)
 8002de6:	f004 fb3d 	bl	8007464 <HAL_ADC_Start>
  
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002dea:	f7fe fb9d 	bl	8001528 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002dee:	f00a faf9 	bl	800d3e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002df2:	bf00      	nop
 8002df4:	e7fd      	b.n	8002df2 <main+0xc2>
 8002df6:	bf00      	nop
 8002df8:	20000104 	.word	0x20000104
 8002dfc:	2000014c 	.word	0x2000014c

08002e00 <SystemClock_Config>:
/**
  * @brief Configuration de l'horloge du systeme
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b094      	sub	sp, #80	@ 0x50
 8002e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e06:	f107 0320 	add.w	r3, r7, #32
 8002e0a:	2230      	movs	r2, #48	@ 0x30
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f00c ff84 	bl	800fd1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]

  /** Configurer la capacite de pilotage LSE */
  HAL_PWR_EnableBkUpAccess();
 8002e24:	f007 fa66 	bl	800a2f4 <HAL_PWR_EnableBkUpAccess>

  /** Configurer la tension de sortie du regulateur principal interne */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	4b2c      	ldr	r3, [pc, #176]	@ (8002edc <SystemClock_Config+0xdc>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002edc <SystemClock_Config+0xdc>)
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e34:	4b29      	ldr	r3, [pc, #164]	@ (8002edc <SystemClock_Config+0xdc>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e40:	4b27      	ldr	r3, [pc, #156]	@ (8002ee0 <SystemClock_Config+0xe0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a26      	ldr	r2, [pc, #152]	@ (8002ee0 <SystemClock_Config+0xe0>)
 8002e46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <SystemClock_Config+0xe0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]

  /** Initialiser les oscillateurs RCC selon les parametres specifies dans la structure RCC_OscInitTypeDef. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002e58:	2309      	movs	r3, #9
 8002e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002e62:	2301      	movs	r3, #1
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e66:	2302      	movs	r3, #2
 8002e68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002e70:	2319      	movs	r3, #25
 8002e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002e74:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002e78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002e7e:	2309      	movs	r3, #9
 8002e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e82:	f107 0320 	add.w	r3, r7, #32
 8002e86:	4618      	mov	r0, r3
 8002e88:	f007 fa94 	bl	800a3b4 <HAL_RCC_OscConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e92:	f000 f839 	bl	8002f08 <Error_Handler>
  }

  /** Activer le mode Over-Drive */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002e96:	f007 fa3d 	bl	800a314 <HAL_PWREx_EnableOverDrive>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002ea0:	f000 f832 	bl	8002f08 <Error_Handler>
  }

  /** Initialiser les horloges CPU, AHB et APB */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ea4:	230f      	movs	r3, #15
 8002ea6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002eb0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002eb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	2106      	movs	r1, #6
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f007 fd1a 	bl	800a8fc <HAL_RCC_ClockConfig>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002ece:	f000 f81b 	bl	8002f08 <Error_Handler>
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	3750      	adds	r7, #80	@ 0x50
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40007000 	.word	0x40007000

08002ee4 <HAL_TIM_PeriodElapsedCallback>:
  * @note   Cette fonction est appelee lorsque l'interruption TIM6 a eu lieu, a l'interieur de HAL_TIM_IRQHandler(). Elle appelle directement HAL_IncTick() pour incrementer une variable globale "uwTick" utilisee comme base de temps de l'application.
  * @param  htim : handle TIM
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ef6:	f004 fa2d 	bl	8007354 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40001000 	.word	0x40001000

08002f08 <Error_Handler>:
/**
  * @brief  Cette fonction est executee en cas d'erreur.
  * @retval None
  */
void Error_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f0c:	b672      	cpsid	i
}
 8002f0e:	bf00      	nop
  /* USER CODE BEGIN Debug Error_Handler */
	/* L'utilisateur peut ajouter sa propre implementation pour signaler l'etat de retour d'erreur HAL */
	__disable_irq();
	while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <Error_Handler+0x8>

08002f14 <InitWalls>:

MazePoint points[MAX_POINTS];
int pointCount = 0;

void InitWalls(void)
{
 8002f14:	b490      	push	{r4, r7}
 8002f16:	b0ee      	sub	sp, #440	@ 0x1b8
 8002f18:	af00      	add	r7, sp, #0
    int i = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

    // Bordures extérieures
    walls[i++] = (WallRect){X_DEBUT, Y_DEBUT, LONGUEUR_TOT, LARGEUR_MUR};
 8002f20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002f2a:	4abd      	ldr	r2, [pc, #756]	@ (8003220 <InitWalls+0x30c>)
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	4413      	add	r3, r2
 8002f30:	4abc      	ldr	r2, [pc, #752]	@ (8003224 <InitWalls+0x310>)
 8002f32:	461c      	mov	r4, r3
 8002f34:	4613      	mov	r3, r2
 8002f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT, Y_DEBUT + HAUTEUR_TOT, LONGUEUR_TOT + LARGEUR_MUR, LARGEUR_MUR};
 8002f3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002f46:	4ab6      	ldr	r2, [pc, #728]	@ (8003220 <InitWalls+0x30c>)
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4ab6      	ldr	r2, [pc, #728]	@ (8003228 <InitWalls+0x314>)
 8002f4e:	461c      	mov	r4, r3
 8002f50:	4613      	mov	r3, r2
 8002f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT, Y_DEBUT, LARGEUR_MUR, HAUTEUR_TOT};
 8002f58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002f62:	4aaf      	ldr	r2, [pc, #700]	@ (8003220 <InitWalls+0x30c>)
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4413      	add	r3, r2
 8002f68:	4ab0      	ldr	r2, [pc, #704]	@ (800322c <InitWalls+0x318>)
 8002f6a:	461c      	mov	r4, r3
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + LONGUEUR_TOT, Y_DEBUT, LARGEUR_MUR, HAUTEUR_TOT};
 8002f74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002f7e:	4aa8      	ldr	r2, [pc, #672]	@ (8003220 <InitWalls+0x30c>)
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	4413      	add	r3, r2
 8002f84:	4aaa      	ldr	r2, [pc, #680]	@ (8003230 <InitWalls+0x31c>)
 8002f86:	461c      	mov	r4, r3
 8002f88:	4613      	mov	r3, r2
 8002f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // GAUCHE ÉCRAN
    walls[i++] = (WallRect){X_DEBUT + 1 * COTE_CELLULE, Y_DEBUT + 1 * COTE_CELLULE, LARGEUR_MUR, COTE_CELLULE};
 8002f90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002f9a:	4aa1      	ldr	r2, [pc, #644]	@ (8003220 <InitWalls+0x30c>)
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4aa4      	ldr	r2, [pc, #656]	@ (8003234 <InitWalls+0x320>)
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 1 * COTE_CELLULE, Y_DEBUT + 1 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 8002fac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002fb6:	4a9a      	ldr	r2, [pc, #616]	@ (8003220 <InitWalls+0x30c>)
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a9e      	ldr	r2, [pc, #632]	@ (8003238 <InitWalls+0x324>)
 8002fbe:	461c      	mov	r4, r3
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    walls[i++] = (WallRect){X_DEBUT + 1 * COTE_CELLULE, Y_DEBUT + 3 * COTE_CELLULE, LARGEUR_MUR, COTE_CELLULE};
 8002fc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002fd2:	4a93      	ldr	r2, [pc, #588]	@ (8003220 <InitWalls+0x30c>)
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a98      	ldr	r2, [pc, #608]	@ (800323c <InitWalls+0x328>)
 8002fda:	461c      	mov	r4, r3
 8002fdc:	4613      	mov	r3, r2
 8002fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 1 * COTE_CELLULE, Y_DEBUT + 4 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 8002fe4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8002fee:	4a8c      	ldr	r2, [pc, #560]	@ (8003220 <InitWalls+0x30c>)
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4a92      	ldr	r2, [pc, #584]	@ (8003240 <InitWalls+0x32c>)
 8002ff6:	461c      	mov	r4, r3
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    walls[i++] = (WallRect){X_DEBUT + 3 * COTE_CELLULE, Y_DEBUT + 5, LARGEUR_MUR, COTE_CELLULE};
 8003000:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800300a:	4a85      	ldr	r2, [pc, #532]	@ (8003220 <InitWalls+0x30c>)
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	4413      	add	r3, r2
 8003010:	4a8c      	ldr	r2, [pc, #560]	@ (8003244 <InitWalls+0x330>)
 8003012:	461c      	mov	r4, r3
 8003014:	4613      	mov	r3, r2
 8003016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 3 * COTE_CELLULE, Y_DEBUT + 4 * COTE_CELLULE, LARGEUR_MUR, COTE_CELLULE};
 800301c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003026:	4a7e      	ldr	r2, [pc, #504]	@ (8003220 <InitWalls+0x30c>)
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	4413      	add	r3, r2
 800302c:	4a86      	ldr	r2, [pc, #536]	@ (8003248 <InitWalls+0x334>)
 800302e:	461c      	mov	r4, r3
 8003030:	4613      	mov	r3, r2
 8003032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    walls[i++] = (WallRect){X_DEBUT + 2 * COTE_CELLULE, Y_DEBUT + 2 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 8003038:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003042:	4a77      	ldr	r2, [pc, #476]	@ (8003220 <InitWalls+0x30c>)
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4413      	add	r3, r2
 8003048:	4a80      	ldr	r2, [pc, #512]	@ (800324c <InitWalls+0x338>)
 800304a:	461c      	mov	r4, r3
 800304c:	4613      	mov	r3, r2
 800304e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 2 * COTE_CELLULE, Y_DEBUT + 3 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 8003054:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800305e:	4a70      	ldr	r2, [pc, #448]	@ (8003220 <InitWalls+0x30c>)
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	4413      	add	r3, r2
 8003064:	4a7a      	ldr	r2, [pc, #488]	@ (8003250 <InitWalls+0x33c>)
 8003066:	461c      	mov	r4, r3
 8003068:	4613      	mov	r3, r2
 800306a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800306c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // MILIEU
    walls[i++] = (WallRect){X_DEBUT + 4 * COTE_CELLULE, Y_DEBUT + 1 * COTE_CELLULE, 4 * COTE_CELLULE, LARGEUR_MUR};
 8003070:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800307a:	4a69      	ldr	r2, [pc, #420]	@ (8003220 <InitWalls+0x30c>)
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	4413      	add	r3, r2
 8003080:	4a74      	ldr	r2, [pc, #464]	@ (8003254 <InitWalls+0x340>)
 8003082:	461c      	mov	r4, r3
 8003084:	4613      	mov	r3, r2
 8003086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 4 * COTE_CELLULE, Y_DEBUT + 4 * COTE_CELLULE, 4 * COTE_CELLULE, LARGEUR_MUR};
 800308c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003096:	4a62      	ldr	r2, [pc, #392]	@ (8003220 <InitWalls+0x30c>)
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	4413      	add	r3, r2
 800309c:	4a6e      	ldr	r2, [pc, #440]	@ (8003258 <InitWalls+0x344>)
 800309e:	461c      	mov	r4, r3
 80030a0:	4613      	mov	r3, r2
 80030a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 4 * COTE_CELLULE, Y_DEBUT + 2 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 80030a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80030b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003220 <InitWalls+0x30c>)
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	4413      	add	r3, r2
 80030b8:	4a68      	ldr	r2, [pc, #416]	@ (800325c <InitWalls+0x348>)
 80030ba:	461c      	mov	r4, r3
 80030bc:	4613      	mov	r3, r2
 80030be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 7 * COTE_CELLULE, Y_DEBUT + 2 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 80030c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80030ce:	4a54      	ldr	r2, [pc, #336]	@ (8003220 <InitWalls+0x30c>)
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	4413      	add	r3, r2
 80030d4:	4a62      	ldr	r2, [pc, #392]	@ (8003260 <InitWalls+0x34c>)
 80030d6:	461c      	mov	r4, r3
 80030d8:	4613      	mov	r3, r2
 80030da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 4 * COTE_CELLULE, Y_DEBUT + 2 * COTE_CELLULE, LARGEUR_MUR, COTE_CELLULE + LARGEUR_MUR};
 80030e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80030ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003220 <InitWalls+0x30c>)
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	4413      	add	r3, r2
 80030f0:	4a5c      	ldr	r2, [pc, #368]	@ (8003264 <InitWalls+0x350>)
 80030f2:	461c      	mov	r4, r3
 80030f4:	4613      	mov	r3, r2
 80030f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 8 * COTE_CELLULE, Y_DEBUT + 2 * COTE_CELLULE, LARGEUR_MUR, COTE_CELLULE + LARGEUR_MUR};
 80030fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003106:	4a46      	ldr	r2, [pc, #280]	@ (8003220 <InitWalls+0x30c>)
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	4413      	add	r3, r2
 800310c:	4a56      	ldr	r2, [pc, #344]	@ (8003268 <InitWalls+0x354>)
 800310e:	461c      	mov	r4, r3
 8003110:	4613      	mov	r3, r2
 8003112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003114:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 4 * COTE_CELLULE, Y_DEBUT + 3 * COTE_CELLULE, 4 * COTE_CELLULE, LARGEUR_MUR};
 8003118:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003122:	4a3f      	ldr	r2, [pc, #252]	@ (8003220 <InitWalls+0x30c>)
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	4413      	add	r3, r2
 8003128:	4a50      	ldr	r2, [pc, #320]	@ (800326c <InitWalls+0x358>)
 800312a:	461c      	mov	r4, r3
 800312c:	4613      	mov	r3, r2
 800312e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // DROITE ÉCRAN
    walls[i++] = (WallRect){X_DEBUT + 11 * COTE_CELLULE, Y_DEBUT + 1 * COTE_CELLULE, LARGEUR_MUR, COTE_CELLULE};
 8003134:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800313e:	4a38      	ldr	r2, [pc, #224]	@ (8003220 <InitWalls+0x30c>)
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	4413      	add	r3, r2
 8003144:	4a4a      	ldr	r2, [pc, #296]	@ (8003270 <InitWalls+0x35c>)
 8003146:	461c      	mov	r4, r3
 8003148:	4613      	mov	r3, r2
 800314a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800314c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 10 * COTE_CELLULE, Y_DEBUT + 1 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 8003150:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 800315a:	4a31      	ldr	r2, [pc, #196]	@ (8003220 <InitWalls+0x30c>)
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	4413      	add	r3, r2
 8003160:	4a44      	ldr	r2, [pc, #272]	@ (8003274 <InitWalls+0x360>)
 8003162:	461c      	mov	r4, r3
 8003164:	4613      	mov	r3, r2
 8003166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    walls[i++] = (WallRect){X_DEBUT + 11 * COTE_CELLULE, Y_DEBUT + 3 * COTE_CELLULE, LARGEUR_MUR, COTE_CELLULE};
 800316c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003176:	4a2a      	ldr	r2, [pc, #168]	@ (8003220 <InitWalls+0x30c>)
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	4413      	add	r3, r2
 800317c:	4a3e      	ldr	r2, [pc, #248]	@ (8003278 <InitWalls+0x364>)
 800317e:	461c      	mov	r4, r3
 8003180:	4613      	mov	r3, r2
 8003182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 10 * COTE_CELLULE, Y_DEBUT + 4 * COTE_CELLULE, COTE_CELLULE +5, LARGEUR_MUR};
 8003188:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003192:	4a23      	ldr	r2, [pc, #140]	@ (8003220 <InitWalls+0x30c>)
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	4413      	add	r3, r2
 8003198:	4a38      	ldr	r2, [pc, #224]	@ (800327c <InitWalls+0x368>)
 800319a:	461c      	mov	r4, r3
 800319c:	4613      	mov	r3, r2
 800319e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    walls[i++] = (WallRect){X_DEBUT + 9 * COTE_CELLULE, Y_DEBUT + 5, LARGEUR_MUR, COTE_CELLULE};
 80031a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80031ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003220 <InitWalls+0x30c>)
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	4413      	add	r3, r2
 80031b4:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <InitWalls+0x36c>)
 80031b6:	461c      	mov	r4, r3
 80031b8:	4613      	mov	r3, r2
 80031ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 9 * COTE_CELLULE, Y_DEBUT + 4 * COTE_CELLULE, LARGEUR_MUR, COTE_CELLULE};
 80031c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80031ca:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <InitWalls+0x30c>)
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <InitWalls+0x370>)
 80031d2:	461c      	mov	r4, r3
 80031d4:	4613      	mov	r3, r2
 80031d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    walls[i++] = (WallRect){X_DEBUT + 9 * COTE_CELLULE , Y_DEBUT + 2 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 80031dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80031e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003220 <InitWalls+0x30c>)
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	4a26      	ldr	r2, [pc, #152]	@ (8003288 <InitWalls+0x374>)
 80031ee:	461c      	mov	r4, r3
 80031f0:	4613      	mov	r3, r2
 80031f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    walls[i++] = (WallRect){X_DEBUT + 9 * COTE_CELLULE , Y_DEBUT + 3 * COTE_CELLULE, COTE_CELLULE, LARGEUR_MUR};
 80031f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003202:	4a07      	ldr	r2, [pc, #28]	@ (8003220 <InitWalls+0x30c>)
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	4a20      	ldr	r2, [pc, #128]	@ (800328c <InitWalls+0x378>)
 800320a:	461c      	mov	r4, r3
 800320c:	4613      	mov	r3, r2
 800320e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


}
 8003214:	bf00      	nop
 8003216:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 800321a:	46bd      	mov	sp, r7
 800321c:	bc90      	pop	{r4, r7}
 800321e:	4770      	bx	lr
 8003220:	20000728 	.word	0x20000728
 8003224:	08011a7c 	.word	0x08011a7c
 8003228:	08011a8c 	.word	0x08011a8c
 800322c:	08011a9c 	.word	0x08011a9c
 8003230:	08011aac 	.word	0x08011aac
 8003234:	08011abc 	.word	0x08011abc
 8003238:	08011acc 	.word	0x08011acc
 800323c:	08011adc 	.word	0x08011adc
 8003240:	08011aec 	.word	0x08011aec
 8003244:	08011afc 	.word	0x08011afc
 8003248:	08011b0c 	.word	0x08011b0c
 800324c:	08011b1c 	.word	0x08011b1c
 8003250:	08011b2c 	.word	0x08011b2c
 8003254:	08011b3c 	.word	0x08011b3c
 8003258:	08011b4c 	.word	0x08011b4c
 800325c:	08011b5c 	.word	0x08011b5c
 8003260:	08011b6c 	.word	0x08011b6c
 8003264:	08011b7c 	.word	0x08011b7c
 8003268:	08011b8c 	.word	0x08011b8c
 800326c:	08011b9c 	.word	0x08011b9c
 8003270:	08011bac 	.word	0x08011bac
 8003274:	08011bbc 	.word	0x08011bbc
 8003278:	08011bcc 	.word	0x08011bcc
 800327c:	08011bdc 	.word	0x08011bdc
 8003280:	08011bec 	.word	0x08011bec
 8003284:	08011bfc 	.word	0x08011bfc
 8003288:	08011c0c 	.word	0x08011c0c
 800328c:	08011c1c 	.word	0x08011c1c

08003290 <DrawMaze>:


// Dessiner le labyrinthe
void DrawMaze(uint32_t color)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(color);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f001 fe4d 	bl	8004f38 <BSP_LCD_SetTextColor>
    for (int i = 0; i < NUM_WALLS; i++) {
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e01f      	b.n	80032e4 <DrawMaze+0x54>
        BSP_LCD_FillRect(walls[i].x, walls[i].y, walls[i].width, walls[i].height);
 80032a4:	4a13      	ldr	r2, [pc, #76]	@ (80032f4 <DrawMaze+0x64>)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b298      	uxth	r0, r3
 80032b0:	4a10      	ldr	r2, [pc, #64]	@ (80032f4 <DrawMaze+0x64>)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	4413      	add	r3, r2
 80032b8:	3304      	adds	r3, #4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b299      	uxth	r1, r3
 80032be:	4a0d      	ldr	r2, [pc, #52]	@ (80032f4 <DrawMaze+0x64>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	3308      	adds	r3, #8
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	4c09      	ldr	r4, [pc, #36]	@ (80032f4 <DrawMaze+0x64>)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	4423      	add	r3, r4
 80032d4:	330c      	adds	r3, #12
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f002 fa09 	bl	80056f0 <BSP_LCD_FillRect>
    for (int i = 0; i < NUM_WALLS; i++) {
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3301      	adds	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b1a      	cmp	r3, #26
 80032e8:	dddc      	ble.n	80032a4 <DrawMaze+0x14>
    }
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	20000728 	.word	0x20000728

080032f8 <InitPoints>:

// Initialiser les points (pastilles)

void InitPoints(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
    pointCount = 0;
 80032fe:	4b2b      	ldr	r3, [pc, #172]	@ (80033ac <InitPoints+0xb4>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
    int y_debut_point = Y_DEBUT + COTE_CELLULE / 2;
 8003304:	2314      	movs	r3, #20
 8003306:	60fb      	str	r3, [r7, #12]
    int x_debut_point = X_DEBUT + COTE_CELLULE / 2;
 8003308:	2314      	movs	r3, #20
 800330a:	60bb      	str	r3, [r7, #8]
    int margin = 6; // Marge de sécurité pour éviter les collisions avec les murs
 800330c:	2306      	movs	r3, #6
 800330e:	607b      	str	r3, [r7, #4]

    // Créer une grille de points, en évitant les murs
    for (int y = y_debut_point; y < HAUTEUR_TOT; y += COTE_CELLULE / 2) {
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e041      	b.n	800339a <InitPoints+0xa2>
        for (int x = x_debut_point; x < LONGUEUR_TOT; x += COTE_CELLULE / 2) {
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e037      	b.n	800338c <InitPoints+0x94>
            // Vérifier si la position n'est pas dans un mur avec une marge de sécurité
            if (!IsPositionInWall(x, y, margin, margin)) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6979      	ldr	r1, [r7, #20]
 8003322:	6938      	ldr	r0, [r7, #16]
 8003324:	f000 f886 	bl	8003434 <IsPositionInWall>
 8003328:	4603      	mov	r3, r0
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d028      	beq.n	8003386 <InitPoints+0x8e>
                points[pointCount].x = x;
 8003334:	4b1d      	ldr	r3, [pc, #116]	@ (80033ac <InitPoints+0xb4>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	491d      	ldr	r1, [pc, #116]	@ (80033b0 <InitPoints+0xb8>)
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	601a      	str	r2, [r3, #0]
                points[pointCount].y = y;
 8003348:	4b18      	ldr	r3, [pc, #96]	@ (80033ac <InitPoints+0xb4>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4918      	ldr	r1, [pc, #96]	@ (80033b0 <InitPoints+0xb8>)
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	3304      	adds	r3, #4
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	601a      	str	r2, [r3, #0]
                points[pointCount].eaten = false;
 800335e:	4b13      	ldr	r3, [pc, #76]	@ (80033ac <InitPoints+0xb4>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4913      	ldr	r1, [pc, #76]	@ (80033b0 <InitPoints+0xb8>)
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3308      	adds	r3, #8
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
                pointCount++;
 8003374:	4b0d      	ldr	r3, [pc, #52]	@ (80033ac <InitPoints+0xb4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a0c      	ldr	r2, [pc, #48]	@ (80033ac <InitPoints+0xb4>)
 800337c:	6013      	str	r3, [r2, #0]

                // Éviter de dépasser le maximum de points
                if (pointCount >= MAX_POINTS) {
 800337e:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <InitPoints+0xb4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2bc7      	cmp	r3, #199	@ 0xc7
 8003384:	dc0d      	bgt.n	80033a2 <InitPoints+0xaa>
        for (int x = x_debut_point; x < LONGUEUR_TOT; x += COTE_CELLULE / 2) {
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3312      	adds	r3, #18
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8003392:	dbc3      	blt.n	800331c <InitPoints+0x24>
    for (int y = y_debut_point; y < HAUTEUR_TOT; y += COTE_CELLULE / 2) {
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3312      	adds	r3, #18
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2bb3      	cmp	r3, #179	@ 0xb3
 800339e:	ddba      	ble.n	8003316 <InitPoints+0x1e>
 80033a0:	e000      	b.n	80033a4 <InitPoints+0xac>
                    return;
 80033a2:	bf00      	nop
                }
            }
        }
    }
}
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20001238 	.word	0x20001238
 80033b0:	200008d8 	.word	0x200008d8

080033b4 <DrawPoints>:

// Dessiner les points (pastilles)
void DrawPoints(uint32_t color)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(color);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f001 fdbb 	bl	8004f38 <BSP_LCD_SetTextColor>

    for (int i = 0; i < pointCount; i++) {
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e027      	b.n	8003418 <DrawPoints+0x64>
        if (!points[i].eaten) {
 80033c8:	4918      	ldr	r1, [pc, #96]	@ (800342c <DrawPoints+0x78>)
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3308      	adds	r3, #8
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	f083 0301 	eor.w	r3, r3, #1
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d016      	beq.n	8003412 <DrawPoints+0x5e>
            BSP_LCD_FillCircle(points[i].x, points[i].y, 2);
 80033e4:	4911      	ldr	r1, [pc, #68]	@ (800342c <DrawPoints+0x78>)
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	b298      	uxth	r0, r3
 80033f6:	490d      	ldr	r1, [pc, #52]	@ (800342c <DrawPoints+0x78>)
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	3304      	adds	r3, #4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	2202      	movs	r2, #2
 800340c:	4619      	mov	r1, r3
 800340e:	f002 f9e9 	bl	80057e4 <BSP_LCD_FillCircle>
    for (int i = 0; i < pointCount; i++) {
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <DrawPoints+0x7c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	429a      	cmp	r2, r3
 8003420:	dbd2      	blt.n	80033c8 <DrawPoints+0x14>
        }
    }
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	200008d8 	.word	0x200008d8
 8003430:	20001238 	.word	0x20001238

08003434 <IsPositionInWall>:

// Verifier si une position est dans un mur
bool IsPositionInWall(int x, int y, int width, int height)
{
 8003434:	b490      	push	{r4, r7}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < NUM_WALLS; i++) {
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
 8003446:	e025      	b.n	8003494 <IsPositionInWall+0x60>
        WallRect w = walls[i];
 8003448:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <IsPositionInWall+0x74>)
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	4413      	add	r3, r2
 8003450:	f107 0414 	add.w	r4, r7, #20
 8003454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (x < w.x + w.width &&
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4413      	add	r3, r2
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	429a      	cmp	r2, r3
 8003464:	da13      	bge.n	800348e <IsPositionInWall+0x5a>
            x + width > w.x &&
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	441a      	add	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
        if (x < w.x + w.width &&
 800346e:	429a      	cmp	r2, r3
 8003470:	dd0d      	ble.n	800348e <IsPositionInWall+0x5a>
            y < w.y + w.height &&
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	4413      	add	r3, r2
            x + width > w.x &&
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	da07      	bge.n	800348e <IsPositionInWall+0x5a>
            y + height > w.y) {
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	441a      	add	r2, r3
 8003484:	69bb      	ldr	r3, [r7, #24]
            y < w.y + w.height &&
 8003486:	429a      	cmp	r2, r3
 8003488:	dd01      	ble.n	800348e <IsPositionInWall+0x5a>
            return true; // collision détectée
 800348a:	2301      	movs	r3, #1
 800348c:	e006      	b.n	800349c <IsPositionInWall+0x68>
    for (int i = 0; i < NUM_WALLS; i++) {
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	3301      	adds	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	2b1a      	cmp	r3, #26
 8003498:	ddd6      	ble.n	8003448 <IsPositionInWall+0x14>
        }
    }
    return false;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3728      	adds	r7, #40	@ 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc90      	pop	{r4, r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000728 	.word	0x20000728

080034ac <InitPacMan>:

// Initialiser Pac-Man
void InitPacMan(PacMan *pacman)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
    pacman->x = Y_DEBUT + COTE_CELLULE / 2 + 2;; // Position X initiale (bord droit comme sur l'image)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2216      	movs	r2, #22
 80034b8:	601a      	str	r2, [r3, #0]
    pacman->y = X_DEBUT + COTE_CELLULE / 2 + 2; // Position Y initiale
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2216      	movs	r2, #22
 80034be:	605a      	str	r2, [r3, #4]
    pacman->radius = 11; // Rayon
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	220b      	movs	r2, #11
 80034c4:	609a      	str	r2, [r3, #8]
    pacman->direction = DIR_LEFT; // Direction initiale (gauche)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	731a      	strb	r2, [r3, #12]
    pacman->speed = 2; // Vitesse de déplacement
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034d2:	611a      	str	r2, [r3, #16]
    pacman->mouthAngle = 45; // Angle d'ouverture de la bouche (en degrés)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	222d      	movs	r2, #45	@ 0x2d
 80034d8:	615a      	str	r2, [r3, #20]
    pacman->mouthDirection = 1; // Direction de l'animation de la bouche (1: ouverture, -1: fermeture)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	619a      	str	r2, [r3, #24]
    pacman->score = 0; // Score initial
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
    pacman->lives = 3; // Nombre de vies
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <DrawPacMan>:

// Dessiner Pac-Man avec animation de la bouche
void DrawPacMan(PacMan *pacman, uint32_t color)
{
 80034f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034fc:	b092      	sub	sp, #72	@ 0x48
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
    BSP_LCD_SetTextColor(color);
 8003504:	6838      	ldr	r0, [r7, #0]
 8003506:	f001 fd17 	bl	8004f38 <BSP_LCD_SetTextColor>

    // Animation de la bouche
    pacman->mouthAngle += pacman->mouthDirection * 5;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6959      	ldr	r1, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	18ca      	adds	r2, r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	615a      	str	r2, [r3, #20]
    if (pacman->mouthAngle >= 45) {
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b2c      	cmp	r3, #44	@ 0x2c
 8003524:	dd04      	ble.n	8003530 <DrawPacMan+0x38>
        pacman->mouthDirection = -1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800352c:	619a      	str	r2, [r3, #24]
 800352e:	e006      	b.n	800353e <DrawPacMan+0x46>
    } else if (pacman->mouthAngle <= 5) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	2b05      	cmp	r3, #5
 8003536:	dc02      	bgt.n	800353e <DrawPacMan+0x46>
        pacman->mouthDirection = 1;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	619a      	str	r2, [r3, #24]
    }

    // Dessiner un cercle plein pour le corps
    BSP_LCD_FillCircle(pacman->x, pacman->y, pacman->radius);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b298      	uxth	r0, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	b299      	uxth	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	b29b      	uxth	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	f002 f947 	bl	80057e4 <BSP_LCD_FillCircle>

    // Dessiner un triangle pour la bouche (en noir)
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003556:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800355a:	f001 fced 	bl	8004f38 <BSP_LCD_SetTextColor>

    // Calculer les coordonnées du triangle représentant la bouche
    // selon la direction de Pac-Man
    int centerX = pacman->x;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int centerY = pacman->y;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	63bb      	str	r3, [r7, #56]	@ 0x38
    int startAngle, endAngle;

    switch (pacman->direction) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7b1b      	ldrb	r3, [r3, #12]
 800356e:	3b01      	subs	r3, #1
 8003570:	2b03      	cmp	r3, #3
 8003572:	d853      	bhi.n	800361c <DrawPacMan+0x124>
 8003574:	a201      	add	r2, pc, #4	@ (adr r2, 800357c <DrawPacMan+0x84>)
 8003576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357a:	bf00      	nop
 800357c:	0800358d 	.word	0x0800358d
 8003580:	080035fd 	.word	0x080035fd
 8003584:	080035b5 	.word	0x080035b5
 8003588:	080035d9 	.word	0x080035d9
        case DIR_RIGHT:
            startAngle = 270 + pacman->mouthAngle/2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	da00      	bge.n	8003596 <DrawPacMan+0x9e>
 8003594:	3301      	adds	r3, #1
 8003596:	105b      	asrs	r3, r3, #1
 8003598:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800359c:	647b      	str	r3, [r7, #68]	@ 0x44
            endAngle = 270 - pacman->mouthAngle/2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	da00      	bge.n	80035a8 <DrawPacMan+0xb0>
 80035a6:	3301      	adds	r3, #1
 80035a8:	105b      	asrs	r3, r3, #1
 80035aa:	425b      	negs	r3, r3
 80035ac:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 80035b0:	643b      	str	r3, [r7, #64]	@ 0x40
            break;
 80035b2:	e033      	b.n	800361c <DrawPacMan+0x124>
        case DIR_LEFT:
            startAngle = 90 + pacman->mouthAngle/2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	da00      	bge.n	80035be <DrawPacMan+0xc6>
 80035bc:	3301      	adds	r3, #1
 80035be:	105b      	asrs	r3, r3, #1
 80035c0:	335a      	adds	r3, #90	@ 0x5a
 80035c2:	647b      	str	r3, [r7, #68]	@ 0x44
            endAngle = 90 - pacman->mouthAngle/2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	da00      	bge.n	80035ce <DrawPacMan+0xd6>
 80035cc:	3301      	adds	r3, #1
 80035ce:	105b      	asrs	r3, r3, #1
 80035d0:	425b      	negs	r3, r3
 80035d2:	335a      	adds	r3, #90	@ 0x5a
 80035d4:	643b      	str	r3, [r7, #64]	@ 0x40
            break;
 80035d6:	e021      	b.n	800361c <DrawPacMan+0x124>
        case DIR_UP:
            startAngle = 180 + pacman->mouthAngle/2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	da00      	bge.n	80035e2 <DrawPacMan+0xea>
 80035e0:	3301      	adds	r3, #1
 80035e2:	105b      	asrs	r3, r3, #1
 80035e4:	33b4      	adds	r3, #180	@ 0xb4
 80035e6:	647b      	str	r3, [r7, #68]	@ 0x44
            endAngle = 180 - pacman->mouthAngle/2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da00      	bge.n	80035f2 <DrawPacMan+0xfa>
 80035f0:	3301      	adds	r3, #1
 80035f2:	105b      	asrs	r3, r3, #1
 80035f4:	425b      	negs	r3, r3
 80035f6:	33b4      	adds	r3, #180	@ 0xb4
 80035f8:	643b      	str	r3, [r7, #64]	@ 0x40
            break;
 80035fa:	e00f      	b.n	800361c <DrawPacMan+0x124>
        case DIR_DOWN:
            startAngle = 0 + pacman->mouthAngle/2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	da00      	bge.n	8003606 <DrawPacMan+0x10e>
 8003604:	3301      	adds	r3, #1
 8003606:	105b      	asrs	r3, r3, #1
 8003608:	647b      	str	r3, [r7, #68]	@ 0x44
            endAngle = 0 - pacman->mouthAngle/2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da00      	bge.n	8003614 <DrawPacMan+0x11c>
 8003612:	3301      	adds	r3, #1
 8003614:	105b      	asrs	r3, r3, #1
 8003616:	425b      	negs	r3, r3
 8003618:	643b      	str	r3, [r7, #64]	@ 0x40
            break;
 800361a:	bf00      	nop
    }

    // Convertir les angles en radians
    float startRad = startAngle * 3.14159f / 180.0f;
 800361c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003626:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 80037e4 <DrawPacMan+0x2ec>
 800362a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800362e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80037e8 <DrawPacMan+0x2f0>
 8003632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003636:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float endRad = endAngle * 3.14159f / 180.0f;
 800363a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003644:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80037e4 <DrawPacMan+0x2ec>
 8003648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800364c:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80037e8 <DrawPacMan+0x2f0>
 8003650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003654:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Points du triangle
    int x1 = centerX;
 8003658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int y1 = centerY;
 800365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365e:	62bb      	str	r3, [r7, #40]	@ 0x28
    int x2 = centerX + pacman->radius * cos(startRad);
 8003660:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003662:	f7fc ff77 	bl	8000554 <__aeabi_i2d>
 8003666:	4604      	mov	r4, r0
 8003668:	460d      	mov	r5, r1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc ff70 	bl	8000554 <__aeabi_i2d>
 8003674:	4680      	mov	r8, r0
 8003676:	4689      	mov	r9, r1
 8003678:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800367a:	f7fc ff7d 	bl	8000578 <__aeabi_f2d>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	ec43 2b10 	vmov	d0, r2, r3
 8003686:	f00c fff7 	bl	8010678 <cos>
 800368a:	ec53 2b10 	vmov	r2, r3, d0
 800368e:	4640      	mov	r0, r8
 8003690:	4649      	mov	r1, r9
 8003692:	f7fc ffc9 	bl	8000628 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4620      	mov	r0, r4
 800369c:	4629      	mov	r1, r5
 800369e:	f7fc fe0d 	bl	80002bc <__adddf3>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7fd fa6d 	bl	8000b88 <__aeabi_d2iz>
 80036ae:	4603      	mov	r3, r0
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
    int y2 = centerY + pacman->radius * sin(startRad);
 80036b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80036b4:	f7fc ff4e 	bl	8000554 <__aeabi_i2d>
 80036b8:	4604      	mov	r4, r0
 80036ba:	460d      	mov	r5, r1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc ff47 	bl	8000554 <__aeabi_i2d>
 80036c6:	4680      	mov	r8, r0
 80036c8:	4689      	mov	r9, r1
 80036ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80036cc:	f7fc ff54 	bl	8000578 <__aeabi_f2d>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	ec43 2b10 	vmov	d0, r2, r3
 80036d8:	f00d f822 	bl	8010720 <sin>
 80036dc:	ec53 2b10 	vmov	r2, r3, d0
 80036e0:	4640      	mov	r0, r8
 80036e2:	4649      	mov	r1, r9
 80036e4:	f7fc ffa0 	bl	8000628 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4620      	mov	r0, r4
 80036ee:	4629      	mov	r1, r5
 80036f0:	f7fc fde4 	bl	80002bc <__adddf3>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	f7fd fa44 	bl	8000b88 <__aeabi_d2iz>
 8003700:	4603      	mov	r3, r0
 8003702:	623b      	str	r3, [r7, #32]
    int x3 = centerX + pacman->radius * cos(endRad);
 8003704:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003706:	f7fc ff25 	bl	8000554 <__aeabi_i2d>
 800370a:	4604      	mov	r4, r0
 800370c:	460d      	mov	r5, r1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc ff1e 	bl	8000554 <__aeabi_i2d>
 8003718:	4680      	mov	r8, r0
 800371a:	4689      	mov	r9, r1
 800371c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800371e:	f7fc ff2b 	bl	8000578 <__aeabi_f2d>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	ec43 2b10 	vmov	d0, r2, r3
 800372a:	f00c ffa5 	bl	8010678 <cos>
 800372e:	ec53 2b10 	vmov	r2, r3, d0
 8003732:	4640      	mov	r0, r8
 8003734:	4649      	mov	r1, r9
 8003736:	f7fc ff77 	bl	8000628 <__aeabi_dmul>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4620      	mov	r0, r4
 8003740:	4629      	mov	r1, r5
 8003742:	f7fc fdbb 	bl	80002bc <__adddf3>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	4610      	mov	r0, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f7fd fa1b 	bl	8000b88 <__aeabi_d2iz>
 8003752:	4603      	mov	r3, r0
 8003754:	61fb      	str	r3, [r7, #28]
    int y3 = centerY + pacman->radius * sin(endRad);
 8003756:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003758:	f7fc fefc 	bl	8000554 <__aeabi_i2d>
 800375c:	4604      	mov	r4, r0
 800375e:	460d      	mov	r5, r1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc fef5 	bl	8000554 <__aeabi_i2d>
 800376a:	4680      	mov	r8, r0
 800376c:	4689      	mov	r9, r1
 800376e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003770:	f7fc ff02 	bl	8000578 <__aeabi_f2d>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	ec43 2b10 	vmov	d0, r2, r3
 800377c:	f00c ffd0 	bl	8010720 <sin>
 8003780:	ec53 2b10 	vmov	r2, r3, d0
 8003784:	4640      	mov	r0, r8
 8003786:	4649      	mov	r1, r9
 8003788:	f7fc ff4e 	bl	8000628 <__aeabi_dmul>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4620      	mov	r0, r4
 8003792:	4629      	mov	r1, r5
 8003794:	f7fc fd92 	bl	80002bc <__adddf3>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f7fd f9f2 	bl	8000b88 <__aeabi_d2iz>
 80037a4:	4603      	mov	r3, r0
 80037a6:	61bb      	str	r3, [r7, #24]

    // Dessiner le triangle de la bouche
    Point points[3]; // Use the Point struct from the LCD library

    // Fill the points array with your coordinates
    points[0].X = x1;
 80037a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	81bb      	strh	r3, [r7, #12]
    points[0].Y = y1;
 80037ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b0:	b21b      	sxth	r3, r3
 80037b2:	81fb      	strh	r3, [r7, #14]
    points[1].X = x2;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	b21b      	sxth	r3, r3
 80037b8:	823b      	strh	r3, [r7, #16]
    points[1].Y = y2;
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	b21b      	sxth	r3, r3
 80037be:	827b      	strh	r3, [r7, #18]
    points[2].X = x3;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	82bb      	strh	r3, [r7, #20]
    points[2].Y = y3;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	82fb      	strh	r3, [r7, #22]

    // Now pass the properly structured array
    BSP_LCD_FillPolygon(points, 3);
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	2103      	movs	r1, #3
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 f8a6 	bl	8005924 <BSP_LCD_FillPolygon>
}
 80037d8:	bf00      	nop
 80037da:	3748      	adds	r7, #72	@ 0x48
 80037dc:	46bd      	mov	sp, r7
 80037de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037e2:	bf00      	nop
 80037e4:	40490fd0 	.word	0x40490fd0
 80037e8:	43340000 	.word	0x43340000

080037ec <DrawGameInfo>:

// Afficher le score et les vies de Pac-Man
void DrawGameInfo(PacMan *pacman)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	@ 0x30
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
    char scoreText[20];
    sprintf(scoreText, "Score: %d", pacman->score);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	f107 031c 	add.w	r3, r7, #28
 80037fc:	4914      	ldr	r1, [pc, #80]	@ (8003850 <DrawGameInfo+0x64>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f00c fa6c 	bl	800fcdc <siprintf>

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003808:	f001 fb96 	bl	8004f38 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800380c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003810:	f001 fbaa 	bl	8004f68 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font12);
 8003814:	480f      	ldr	r0, [pc, #60]	@ (8003854 <DrawGameInfo+0x68>)
 8003816:	f001 fbc1 	bl	8004f9c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(10, 255, (uint8_t*)scoreText, LEFT_MODE);
 800381a:	f107 021c 	add.w	r2, r7, #28
 800381e:	2303      	movs	r3, #3
 8003820:	21ff      	movs	r1, #255	@ 0xff
 8003822:	200a      	movs	r0, #10
 8003824:	f001 fc40 	bl	80050a8 <BSP_LCD_DisplayStringAt>

    // Afficher les vies restantes
    char livesText[20];
    sprintf(livesText, "Vies: %d", pacman->lives);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1a      	ldr	r2, [r3, #32]
 800382c:	f107 0308 	add.w	r3, r7, #8
 8003830:	4909      	ldr	r1, [pc, #36]	@ (8003858 <DrawGameInfo+0x6c>)
 8003832:	4618      	mov	r0, r3
 8003834:	f00c fa52 	bl	800fcdc <siprintf>
    BSP_LCD_DisplayStringAt(380, 255, (uint8_t*)livesText, LEFT_MODE);
 8003838:	f107 0208 	add.w	r2, r7, #8
 800383c:	2303      	movs	r3, #3
 800383e:	21ff      	movs	r1, #255	@ 0xff
 8003840:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 8003844:	f001 fc30 	bl	80050a8 <BSP_LCD_DisplayStringAt>
}
 8003848:	bf00      	nop
 800384a:	3730      	adds	r7, #48	@ 0x30
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	08011c2c 	.word	0x08011c2c
 8003854:	2000006c 	.word	0x2000006c
 8003858:	08011c38 	.word	0x08011c38

0800385c <CheckPointsCollision>:

// Verifier si Pac-Man mange un point
void CheckPointsCollision(PacMan *pacman)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < pointCount; i++) {
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e057      	b.n	800391a <CheckPointsCollision+0xbe>
        if (!points[i].eaten) {
 800386a:	4931      	ldr	r1, [pc, #196]	@ (8003930 <CheckPointsCollision+0xd4>)
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3308      	adds	r3, #8
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f083 0301 	eor.w	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d046      	beq.n	8003914 <CheckPointsCollision+0xb8>
            // Calculer la distance entre Pac-Man et le point
            int dx = pacman->x - points[i].x;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	4829      	ldr	r0, [pc, #164]	@ (8003930 <CheckPointsCollision+0xd4>)
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4613      	mov	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4403      	add	r3, r0
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1acb      	subs	r3, r1, r3
 800389c:	613b      	str	r3, [r7, #16]
            int dy = pacman->y - points[i].y;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	4823      	ldr	r0, [pc, #140]	@ (8003930 <CheckPointsCollision+0xd4>)
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4403      	add	r3, r0
 80038b0:	3304      	adds	r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	1acb      	subs	r3, r1, r3
 80038b6:	60fb      	str	r3, [r7, #12]
            int distance = sqrt(dx*dx + dy*dy);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	fb03 f203 	mul.w	r2, r3, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	fb03 f303 	mul.w	r3, r3, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fe44 	bl	8000554 <__aeabi_i2d>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	ec43 2b10 	vmov	d0, r2, r3
 80038d4:	f00c fea2 	bl	801061c <sqrt>
 80038d8:	ec53 2b10 	vmov	r2, r3, d0
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	f7fd f952 	bl	8000b88 <__aeabi_d2iz>
 80038e4:	4603      	mov	r3, r0
 80038e6:	60bb      	str	r3, [r7, #8]

            // Si Pac-Man est assez proche du point, le manger
            if (distance < pacman->radius + 3) {
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	3302      	adds	r3, #2
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	dc0f      	bgt.n	8003914 <CheckPointsCollision+0xb8>
                points[i].eaten = true;
 80038f4:	490e      	ldr	r1, [pc, #56]	@ (8003930 <CheckPointsCollision+0xd4>)
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3308      	adds	r3, #8
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
                pacman->score += 10;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f103 020a 	add.w	r2, r3, #10
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	61da      	str	r2, [r3, #28]
    for (int i = 0; i < pointCount; i++) {
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3301      	adds	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <CheckPointsCollision+0xd8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	dba2      	blt.n	800386a <CheckPointsCollision+0xe>
            }
        }
    }
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200008d8 	.word	0x200008d8
 8003934:	20001238 	.word	0x20001238

08003938 <AllPointsEaten>:

// Verifier si tous les points ont ete manges
bool AllPointsEaten(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
    for (int i = 0; i < pointCount; i++) {
 800393e:	2300      	movs	r3, #0
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	e012      	b.n	800396a <AllPointsEaten+0x32>
        if (!points[i].eaten) {
 8003944:	490f      	ldr	r1, [pc, #60]	@ (8003984 <AllPointsEaten+0x4c>)
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3308      	adds	r3, #8
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	f083 0301 	eor.w	r3, r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <AllPointsEaten+0x2c>
            return false;
 8003960:	2300      	movs	r3, #0
 8003962:	e008      	b.n	8003976 <AllPointsEaten+0x3e>
    for (int i = 0; i < pointCount; i++) {
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3301      	adds	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	4b07      	ldr	r3, [pc, #28]	@ (8003988 <AllPointsEaten+0x50>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	dbe7      	blt.n	8003944 <AllPointsEaten+0xc>
        }
    }
    return true;
 8003974:	2301      	movs	r3, #1
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	200008d8 	.word	0x200008d8
 8003988:	20001238 	.word	0x20001238

0800398c <ResetLevel>:

// Reinitialiser le niveau quand tous les points sont manges
void ResetLevel(PacMan *pacman)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < pointCount; i++) {
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e00c      	b.n	80039b4 <ResetLevel+0x28>
        points[i].eaten = false;
 800399a:	4911      	ldr	r1, [pc, #68]	@ (80039e0 <ResetLevel+0x54>)
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3308      	adds	r3, #8
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < pointCount; i++) {
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <ResetLevel+0x58>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	dbed      	blt.n	800399a <ResetLevel+0xe>
    }

    // Ne pas réinitialiser le score, mais augmenter la difficulté
    pacman->speed += 0.5f;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80039c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80039d2:	bf00      	nop
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	200008d8 	.word	0x200008d8
 80039e4:	20001238 	.word	0x20001238

080039e8 <MovePacMan>:

// Deplacer Pac-Man en fonction du joystick
void MovePacMan(PacMan *pacman, uint32_t joy_h, uint32_t joy_v)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
    int new_x = pacman->x;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	61fb      	str	r3, [r7, #28]
    int new_y = pacman->y;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	61bb      	str	r3, [r7, #24]
    int old_direction = pacman->direction;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	7b1b      	ldrb	r3, [r3, #12]
 8003a04:	613b      	str	r3, [r7, #16]
    Direction new_direction = old_direction;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	75fb      	strb	r3, [r7, #23]
    // Déterminer la direction en fonction des valeurs du joystick
    // joy_h : 0 (droite) à 4090 (gauche)
    // joy_v : 4095 (haut) à 10 (bas)

    // Changement de direction horizontal
    if (joy_h > 3000) { // Gauche
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d902      	bls.n	8003a1a <MovePacMan+0x32>
        new_direction = DIR_LEFT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	75fb      	strb	r3, [r7, #23]
 8003a18:	e005      	b.n	8003a26 <MovePacMan+0x3e>
    } else if (joy_h < 1000) { // Droite
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a20:	d201      	bcs.n	8003a26 <MovePacMan+0x3e>
        new_direction = DIR_RIGHT;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    // Changement de direction vertical
    if (joy_v > 3000) { // Haut
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d902      	bls.n	8003a36 <MovePacMan+0x4e>
        new_direction = DIR_UP;
 8003a30:	2304      	movs	r3, #4
 8003a32:	75fb      	strb	r3, [r7, #23]
 8003a34:	e005      	b.n	8003a42 <MovePacMan+0x5a>
    } else if (joy_v < 1000) { // Bas
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a3c:	d201      	bcs.n	8003a42 <MovePacMan+0x5a>
        new_direction = DIR_DOWN;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	75fb      	strb	r3, [r7, #23]
    }

    // Si une nouvelle direction est choisie, essayer de l'appliquer
    if (new_direction != old_direction) {
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d06f      	beq.n	8003b2a <MovePacMan+0x142>
        pacman->direction = new_direction;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	7dfa      	ldrb	r2, [r7, #23]
 8003a4e:	731a      	strb	r2, [r3, #12]

        // Calculer la nouvelle position selon la nouvelle direction
        switch (pacman->direction) {
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	7b1b      	ldrb	r3, [r3, #12]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d84a      	bhi.n	8003af0 <MovePacMan+0x108>
 8003a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <MovePacMan+0x78>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a91 	.word	0x08003a91
 8003a68:	08003ab1 	.word	0x08003ab1
 8003a6c:	08003ad1 	.word	0x08003ad1
            case DIR_RIGHT:
                new_x += pacman->speed;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a88:	ee17 3a90 	vmov	r3, s15
 8003a8c:	61fb      	str	r3, [r7, #28]
                break;
 8003a8e:	e02f      	b.n	8003af0 <MovePacMan+0x108>
            case DIR_DOWN:
                new_y += pacman->speed;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aa8:	ee17 3a90 	vmov	r3, s15
 8003aac:	61bb      	str	r3, [r7, #24]
                break;
 8003aae:	e01f      	b.n	8003af0 <MovePacMan+0x108>
            case DIR_LEFT:
                new_x -= pacman->speed;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ac8:	ee17 3a90 	vmov	r3, s15
 8003acc:	61fb      	str	r3, [r7, #28]
                break;
 8003ace:	e00f      	b.n	8003af0 <MovePacMan+0x108>
            case DIR_UP:
                new_y -= pacman->speed;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae8:	ee17 3a90 	vmov	r3, s15
 8003aec:	61bb      	str	r3, [r7, #24]
                break;
 8003aee:	bf00      	nop
        }

        // Vérifier s'il y a collision avec un mur dans la nouvelle direction
        if (IsPositionInWall(new_x - pacman->radius, new_y - pacman->radius,
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	1ad0      	subs	r0, r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	1ad1      	subs	r1, r2, r3
                             2 * pacman->radius, 2 * pacman->radius)) {
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
        if (IsPositionInWall(new_x - pacman->radius, new_y - pacman->radius,
 8003b04:	005a      	lsls	r2, r3, #1
                             2 * pacman->radius, 2 * pacman->radius)) {
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
        if (IsPositionInWall(new_x - pacman->radius, new_y - pacman->radius,
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	f7ff fc92 	bl	8003434 <IsPositionInWall>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <MovePacMan+0x142>
            // Collision dans la nouvelle direction, revenir à l'ancienne
            pacman->direction = old_direction;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	731a      	strb	r2, [r3, #12]
            new_x = pacman->x;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61fb      	str	r3, [r7, #28]
            new_y = pacman->y;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	61bb      	str	r3, [r7, #24]
        }
    }

    // Déplacement dans la direction actuelle
    switch (pacman->direction) {
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	7b1b      	ldrb	r3, [r3, #12]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d84b      	bhi.n	8003bcc <MovePacMan+0x1e4>
 8003b34:	a201      	add	r2, pc, #4	@ (adr r2, 8003b3c <MovePacMan+0x154>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b6d 	.word	0x08003b6d
 8003b44:	08003b8d 	.word	0x08003b8d
 8003b48:	08003bad 	.word	0x08003bad
        case DIR_RIGHT:
            new_x += pacman->speed;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b64:	ee17 3a90 	vmov	r3, s15
 8003b68:	61fb      	str	r3, [r7, #28]
            break;
 8003b6a:	e02f      	b.n	8003bcc <MovePacMan+0x1e4>
        case DIR_DOWN:
            new_y += pacman->speed;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b84:	ee17 3a90 	vmov	r3, s15
 8003b88:	61bb      	str	r3, [r7, #24]
            break;
 8003b8a:	e01f      	b.n	8003bcc <MovePacMan+0x1e4>
        case DIR_LEFT:
            new_x -= pacman->speed;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba4:	ee17 3a90 	vmov	r3, s15
 8003ba8:	61fb      	str	r3, [r7, #28]
            break;
 8003baa:	e00f      	b.n	8003bcc <MovePacMan+0x1e4>
        case DIR_UP:
            new_y -= pacman->speed;
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc4:	ee17 3a90 	vmov	r3, s15
 8003bc8:	61bb      	str	r3, [r7, #24]
            break;
 8003bca:	bf00      	nop
    }

    // Vérifier s'il y a collision avec un mur
    if (!IsPositionInWall(new_x - pacman->radius, new_y - pacman->radius,
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	1ad0      	subs	r0, r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	1ad1      	subs	r1, r2, r3
                          2 * pacman->radius, 2 * pacman->radius)) {
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
    if (!IsPositionInWall(new_x - pacman->radius, new_y - pacman->radius,
 8003be0:	005a      	lsls	r2, r3, #1
                          2 * pacman->radius, 2 * pacman->radius)) {
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
    if (!IsPositionInWall(new_x - pacman->radius, new_y - pacman->radius,
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	f7ff fc24 	bl	8003434 <IsPositionInWall>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f083 0301 	eor.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <MovePacMan+0x21c>
        // Pas de collision, déplacer Pac-Man
        pacman->x = new_x;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	601a      	str	r2, [r3, #0]
        pacman->y = new_y;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	605a      	str	r2, [r3, #4]
    }

    // Gestion du passage par les tunnels (si présents)
    // Exemple: sortir à droite, réapparaître à gauche
    if (pacman->x > 480 + pacman->radius) {
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003c10:	429a      	cmp	r2, r3
 8003c12:	dd05      	ble.n	8003c20 <MovePacMan+0x238>
        pacman->x = 0 - pacman->radius;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	425a      	negs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e00c      	b.n	8003c3a <MovePacMan+0x252>
    } else if (pacman->x < 0 - pacman->radius) {
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	425b      	negs	r3, r3
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	da05      	bge.n	8003c3a <MovePacMan+0x252>
        pacman->x = 480 + pacman->radius;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f503 72f0 	add.w	r2, r3, #480	@ 0x1e0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	601a      	str	r2, [r3, #0]
    }

    // Vérifier si Pac-Man mange un point
    CheckPointsCollision(pacman);
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff fe0e 	bl	800385c <CheckPointsCollision>

    // Vérifier si tous les points ont été mangés
    if (AllPointsEaten()) {
 8003c40:	f7ff fe7a 	bl	8003938 <AllPointsEaten>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <MovePacMan+0x268>
        ResetLevel(pacman);
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff fe9e 	bl	800398c <ResetLevel>
    }
}
 8003c50:	bf00      	nop
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <InitGhosts>:
int ghostHomeX[NUM_GHOSTS] = {25, 450, 25, 450};
int ghostHomeY[NUM_GHOSTS] = {25, 25, 240, 240};

// Initialiser les fantomes
void InitGhosts(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_GHOSTS; i++) {
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e07e      	b.n	8003d62 <InitGhosts+0x10a>
        ghosts[i].x = 240 + i*30 - 45; // Position initiale au centre, écartés horizontalement
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	f103 01c3 	add.w	r1, r3, #195	@ 0xc3
 8003c72:	4841      	ldr	r0, [pc, #260]	@ (8003d78 <InitGhosts+0x120>)
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4403      	add	r3, r0
 8003c80:	6019      	str	r1, [r3, #0]
        ghosts[i].y = 135;
 8003c82:	493d      	ldr	r1, [pc, #244]	@ (8003d78 <InitGhosts+0x120>)
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	440b      	add	r3, r1
 8003c90:	3304      	adds	r3, #4
 8003c92:	2287      	movs	r2, #135	@ 0x87
 8003c94:	601a      	str	r2, [r3, #0]
        ghosts[i].radius = 10;
 8003c96:	4938      	ldr	r1, [pc, #224]	@ (8003d78 <InitGhosts+0x120>)
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	220a      	movs	r2, #10
 8003ca8:	601a      	str	r2, [r3, #0]
        ghosts[i].direction = i % 2 == 0 ? DIR_LEFT : DIR_RIGHT; // Directions alternées
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <InitGhosts+0x60>
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	e000      	b.n	8003cba <InitGhosts+0x62>
 8003cb8:	2001      	movs	r0, #1
 8003cba:	492f      	ldr	r1, [pc, #188]	@ (8003d78 <InitGhosts+0x120>)
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	330c      	adds	r3, #12
 8003cca:	4602      	mov	r2, r0
 8003ccc:	701a      	strb	r2, [r3, #0]
        ghosts[i].speed = 1.5f;
 8003cce:	492a      	ldr	r1, [pc, #168]	@ (8003d78 <InitGhosts+0x120>)
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	440b      	add	r3, r1
 8003cdc:	3310      	adds	r3, #16
 8003cde:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003ce2:	601a      	str	r2, [r3, #0]
        ghosts[i].color = ghostColors[i];
 8003ce4:	4a25      	ldr	r2, [pc, #148]	@ (8003d7c <InitGhosts+0x124>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cec:	4822      	ldr	r0, [pc, #136]	@ (8003d78 <InitGhosts+0x120>)
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4403      	add	r3, r0
 8003cfa:	3314      	adds	r3, #20
 8003cfc:	6019      	str	r1, [r3, #0]
        ghosts[i].targetX = ghostHomeX[i];
 8003cfe:	4a20      	ldr	r2, [pc, #128]	@ (8003d80 <InitGhosts+0x128>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d06:	481c      	ldr	r0, [pc, #112]	@ (8003d78 <InitGhosts+0x120>)
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4403      	add	r3, r0
 8003d14:	3318      	adds	r3, #24
 8003d16:	6019      	str	r1, [r3, #0]
        ghosts[i].targetY = ghostHomeY[i];
 8003d18:	4a1a      	ldr	r2, [pc, #104]	@ (8003d84 <InitGhosts+0x12c>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d20:	4815      	ldr	r0, [pc, #84]	@ (8003d78 <InitGhosts+0x120>)
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4403      	add	r3, r0
 8003d2e:	331c      	adds	r3, #28
 8003d30:	6019      	str	r1, [r3, #0]
        ghosts[i].isScattered = true;
 8003d32:	4911      	ldr	r1, [pc, #68]	@ (8003d78 <InitGhosts+0x120>)
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	440b      	add	r3, r1
 8003d40:	3320      	adds	r3, #32
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
        ghosts[i].scatterModeTimer = 300; // ~5 secondes à 60 FPS
 8003d46:	490c      	ldr	r1, [pc, #48]	@ (8003d78 <InitGhosts+0x120>)
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	3324      	adds	r3, #36	@ 0x24
 8003d56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d5a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_GHOSTS; i++) {
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	f77f af7d 	ble.w	8003c64 <InitGhosts+0xc>
    }
}
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	2000123c 	.word	0x2000123c
 8003d7c:	2000002c 	.word	0x2000002c
 8003d80:	2000003c 	.word	0x2000003c
 8003d84:	2000004c 	.word	0x2000004c

08003d88 <DrawGhost>:

// Dessiner un fantome
void DrawGhost(Ghost *ghost)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08e      	sub	sp, #56	@ 0x38
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    BSP_LCD_SetTextColor(ghost->color);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 f8cf 	bl	8004f38 <BSP_LCD_SetTextColor>

    // Corps principal (moitié supérieure: cercle)
    BSP_LCD_FillCircle(ghost->x, ghost->y - ghost->radius/2, ghost->radius);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	b298      	uxth	r0, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	da00      	bge.n	8003db0 <DrawGhost+0x28>
 8003dae:	3301      	adds	r3, #1
 8003db0:	105b      	asrs	r3, r3, #1
 8003db2:	425b      	negs	r3, r3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	b299      	uxth	r1, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f001 fd0f 	bl	80057e4 <BSP_LCD_FillCircle>

    // Moitié inférieure (rectangle avec ondulations)
    BSP_LCD_FillRect(ghost->x - ghost->radius, ghost->y - ghost->radius/2,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	b298      	uxth	r0, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da00      	bge.n	8003de6 <DrawGhost+0x5e>
 8003de4:	3301      	adds	r3, #1
 8003de6:	105b      	asrs	r3, r3, #1
 8003de8:	425b      	negs	r3, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	b299      	uxth	r1, r3
                    2 * ghost->radius, ghost->radius + 2);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
    BSP_LCD_FillRect(ghost->x - ghost->radius, ghost->y - ghost->radius/2,
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	b29a      	uxth	r2, r3
                    2 * ghost->radius, ghost->radius + 2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
    BSP_LCD_FillRect(ghost->x - ghost->radius, ghost->y - ghost->radius/2,
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3302      	adds	r3, #2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f001 fc74 	bl	80056f0 <BSP_LCD_FillRect>

    // Ondulations en bas (3 triangles)
    int baseY = ghost->y + ghost->radius/2 + 2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	da00      	bge.n	8003e16 <DrawGhost+0x8e>
 8003e14:	3301      	adds	r3, #1
 8003e16:	105b      	asrs	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int triangleWidth = ghost->radius * 2 / 3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4a6f      	ldr	r2, [pc, #444]	@ (8003fe4 <DrawGhost+0x25c>)
 8003e26:	fb82 1203 	smull	r1, r2, r2, r3
 8003e2a:	17db      	asrs	r3, r3, #31
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (int i = 0; i < 3; i++) {
 8003e30:	2300      	movs	r3, #0
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e34:	e036      	b.n	8003ea4 <DrawGhost+0x11c>
        int startX = ghost->x - ghost->radius + i * triangleWidth;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	1ad2      	subs	r2, r2, r3
 8003e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

        // Create an array of Point structs
        Point points[3];

        // Fill the points with coordinates
        points[0].X = startX;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	813b      	strh	r3, [r7, #8]
        points[0].Y = baseY;
 8003e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e54:	b21b      	sxth	r3, r3
 8003e56:	817b      	strh	r3, [r7, #10]

        points[1].X = startX + triangleWidth/2;
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da00      	bge.n	8003e60 <DrawGhost+0xd8>
 8003e5e:	3301      	adds	r3, #1
 8003e60:	105b      	asrs	r3, r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	81bb      	strh	r3, [r7, #12]
        points[1].Y = baseY + 4;
 8003e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3304      	adds	r3, #4
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	81fb      	strh	r3, [r7, #14]

        points[2].X = startX + triangleWidth;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	823b      	strh	r3, [r7, #16]
        points[2].Y = baseY;
 8003e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	827b      	strh	r3, [r7, #18]

        BSP_LCD_FillPolygon(points, 3);
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	2103      	movs	r1, #3
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fd43 	bl	8005924 <BSP_LCD_FillPolygon>
    for (int i = 0; i < 3; i++) {
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	ddc5      	ble.n	8003e36 <DrawGhost+0xae>

    }

    // Yeux (blancs)
    int eyeRadius = ghost->radius / 3;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4a4d      	ldr	r2, [pc, #308]	@ (8003fe4 <DrawGhost+0x25c>)
 8003eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8003eb4:	17db      	asrs	r3, r3, #31
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    int eyeOffsetX = ghost->radius / 2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	da00      	bge.n	8003ec4 <DrawGhost+0x13c>
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	105b      	asrs	r3, r3, #1
 8003ec6:	623b      	str	r3, [r7, #32]
    int eyeOffsetY = -ghost->radius / 3;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a45      	ldr	r2, [pc, #276]	@ (8003fe4 <DrawGhost+0x25c>)
 8003ece:	fb82 1203 	smull	r1, r2, r2, r3
 8003ed2:	17db      	asrs	r3, r3, #31
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	61fb      	str	r3, [r7, #28]

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003edc:	f001 f82c 	bl	8004f38 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(ghost->x - eyeOffsetX, ghost->y + eyeOffsetY, eyeRadius);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	b298      	uxth	r0, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efe:	b292      	uxth	r2, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f001 fc6f 	bl	80057e4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(ghost->x + eyeOffsetX, ghost->y + eyeOffsetY, eyeRadius);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	b298      	uxth	r0, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	b292      	uxth	r2, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f001 fc5c 	bl	80057e4 <BSP_LCD_FillCircle>

    // Pupilles (noires) - elles regardent dans la direction du mouvement
    int pupilRadius = eyeRadius / 2;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	da00      	bge.n	8003f34 <DrawGhost+0x1ac>
 8003f32:	3301      	adds	r3, #1
 8003f34:	105b      	asrs	r3, r3, #1
 8003f36:	61bb      	str	r3, [r7, #24]
    int pupilOffsetX = pupilRadius;
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (ghost->direction) {
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7b1b      	ldrb	r3, [r3, #12]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d817      	bhi.n	8003f76 <DrawGhost+0x1ee>
 8003f46:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <DrawGhost+0x1c4>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f71 	.word	0x08003f71
 8003f54:	08003f63 	.word	0x08003f63
 8003f58:	08003f6b 	.word	0x08003f6b
        case DIR_RIGHT:
            pupilOffsetX = pupilRadius;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8003f60:	e009      	b.n	8003f76 <DrawGhost+0x1ee>
        case DIR_LEFT:
            pupilOffsetX = -pupilRadius;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	425b      	negs	r3, r3
 8003f66:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8003f68:	e005      	b.n	8003f76 <DrawGhost+0x1ee>
        case DIR_UP:
            pupilOffsetX = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8003f6e:	e002      	b.n	8003f76 <DrawGhost+0x1ee>
        case DIR_DOWN:
            pupilOffsetX = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8003f74:	bf00      	nop
    }

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003f76:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003f7a:	f000 ffdd 	bl	8004f38 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(ghost->x - eyeOffsetX + pupilOffsetX, ghost->y + eyeOffsetY, pupilRadius);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	b298      	uxth	r0, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f001 fc1c 	bl	80057e4 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(ghost->x + eyeOffsetX + pupilOffsetX, ghost->y + eyeOffsetY, pupilRadius);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	b298      	uxth	r0, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	b292      	uxth	r2, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f001 fc05 	bl	80057e4 <BSP_LCD_FillCircle>
}
 8003fda:	bf00      	nop
 8003fdc:	3738      	adds	r7, #56	@ 0x38
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	55555556 	.word	0x55555556

08003fe8 <DrawGhosts>:

// Dessiner tous les fantomes
void DrawGhosts(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_GHOSTS; i++) {
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	e00c      	b.n	800400e <DrawGhosts+0x26>
        DrawGhost(&ghosts[i]);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4a08      	ldr	r2, [pc, #32]	@ (8004020 <DrawGhosts+0x38>)
 8004000:	4413      	add	r3, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fec0 	bl	8003d88 <DrawGhost>
    for (int i = 0; i < NUM_GHOSTS; i++) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3301      	adds	r3, #1
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b03      	cmp	r3, #3
 8004012:	ddef      	ble.n	8003ff4 <DrawGhosts+0xc>
    }
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	2000123c 	.word	0x2000123c

08004024 <GetBestGhostDirection>:
    }
}

// Trouver la meilleure direction pour un fantome
Direction GetBestGhostDirection(Ghost *ghost, PacMan *pacman)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b092      	sub	sp, #72	@ 0x48
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
    int targetX, targetY;

    // Si en mode dispersé, cibler le coin attribué
    if (ghost->isScattered) {
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d006      	beq.n	8004046 <GetBestGhostDirection+0x22>
        targetX = ghost->targetX;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	647b      	str	r3, [r7, #68]	@ 0x44
        targetY = ghost->targetY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	643b      	str	r3, [r7, #64]	@ 0x40
 8004044:	e005      	b.n	8004052 <GetBestGhostDirection+0x2e>
    } else {
        // Sinon, cibler Pac-Man
        targetX = pacman->x;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	647b      	str	r3, [r7, #68]	@ 0x44
        targetY = pacman->y;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    // Directions possibles (éviter le demi-tour)
    Direction possibleDirections[3];
    int dirCount = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Exclure la direction opposée à la direction actuelle
    Direction oppositeDir;
    switch (ghost->direction) {
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	7b1b      	ldrb	r3, [r3, #12]
 800405a:	3b01      	subs	r3, #1
 800405c:	2b03      	cmp	r3, #3
 800405e:	d81b      	bhi.n	8004098 <GetBestGhostDirection+0x74>
 8004060:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <GetBestGhostDirection+0x44>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	08004079 	.word	0x08004079
 800406c:	08004091 	.word	0x08004091
 8004070:	08004081 	.word	0x08004081
 8004074:	08004089 	.word	0x08004089
        case DIR_RIGHT: oppositeDir = DIR_LEFT; break;
 8004078:	2303      	movs	r3, #3
 800407a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800407e:	e00f      	b.n	80040a0 <GetBestGhostDirection+0x7c>
        case DIR_LEFT: oppositeDir = DIR_RIGHT; break;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8004086:	e00b      	b.n	80040a0 <GetBestGhostDirection+0x7c>
        case DIR_UP: oppositeDir = DIR_DOWN; break;
 8004088:	2302      	movs	r3, #2
 800408a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800408e:	e007      	b.n	80040a0 <GetBestGhostDirection+0x7c>
        case DIR_DOWN: oppositeDir = DIR_UP; break;
 8004090:	2304      	movs	r3, #4
 8004092:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8004096:	e003      	b.n	80040a0 <GetBestGhostDirection+0x7c>
        default: oppositeDir = DIR_NONE; break;
 8004098:	2300      	movs	r3, #0
 800409a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800409e:	bf00      	nop
    }

    // Tester les 4 directions
    for (Direction dir = DIR_RIGHT; dir <= DIR_UP; dir++) {
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80040a6:	e081      	b.n	80041ac <GetBestGhostDirection+0x188>
        if (dir == oppositeDir) continue;
 80040a8:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 80040ac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d075      	beq.n	80041a0 <GetBestGhostDirection+0x17c>

        // Calculer la nouvelle position dans cette direction
        int new_x = ghost->x;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	637b      	str	r3, [r7, #52]	@ 0x34
        int new_y = ghost->y;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (dir) {
 80040c0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80040c4:	3b01      	subs	r3, #1
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d84a      	bhi.n	8004160 <GetBestGhostDirection+0x13c>
 80040ca:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <GetBestGhostDirection+0xac>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	080040e1 	.word	0x080040e1
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004121 	.word	0x08004121
 80040dc:	08004141 	.word	0x08004141
            case DIR_RIGHT: new_x += ghost->speed; break;
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80040f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040f8:	ee17 3a90 	vmov	r3, s15
 80040fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fe:	e02f      	b.n	8004160 <GetBestGhostDirection+0x13c>
            case DIR_DOWN: new_y += ghost->speed; break;
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004118:	ee17 3a90 	vmov	r3, s15
 800411c:	633b      	str	r3, [r7, #48]	@ 0x30
 800411e:	e01f      	b.n	8004160 <GetBestGhostDirection+0x13c>
            case DIR_LEFT: new_x -= ghost->speed; break;
 8004120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004138:	ee17 3a90 	vmov	r3, s15
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
 800413e:	e00f      	b.n	8004160 <GetBestGhostDirection+0x13c>
            case DIR_UP: new_y -= ghost->speed; break;
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004158:	ee17 3a90 	vmov	r3, s15
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30
 800415e:	bf00      	nop
        }

        // Vérifier s'il y a collision avec un mur
        if (!IsPositionInWall(new_x - ghost->radius, new_y - ghost->radius,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004166:	1ad0      	subs	r0, r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800416e:	1ad1      	subs	r1, r2, r3
                              2 * ghost->radius, 2 * ghost->radius)) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
        if (!IsPositionInWall(new_x - ghost->radius, new_y - ghost->radius,
 8004174:	005a      	lsls	r2, r3, #1
                              2 * ghost->radius, 2 * ghost->radius)) {
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
        if (!IsPositionInWall(new_x - ghost->radius, new_y - ghost->radius,
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	f7ff f95a 	bl	8003434 <IsPositionInWall>
 8004180:	4603      	mov	r3, r0
 8004182:	f083 0301 	eor.w	r3, r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <GetBestGhostDirection+0x17e>
            // Direction valide, l'ajouter aux possibilités
            possibleDirections[dirCount++] = dir;
 800418c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004192:	3348      	adds	r3, #72	@ 0x48
 8004194:	443b      	add	r3, r7
 8004196:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800419a:	f803 2c40 	strb.w	r2, [r3, #-64]
 800419e:	e000      	b.n	80041a2 <GetBestGhostDirection+0x17e>
        if (dir == oppositeDir) continue;
 80041a0:	bf00      	nop
    for (Direction dir = DIR_RIGHT; dir <= DIR_UP; dir++) {
 80041a2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80041a6:	3301      	adds	r3, #1
 80041a8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80041ac:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	f67f af79 	bls.w	80040a8 <GetBestGhostDirection+0x84>
        }
    }

    // S'il n'y a aucune direction possible (improbable mais sécurité)
    if (dirCount == 0) {
 80041b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <GetBestGhostDirection+0x19e>
        return ghost->direction;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7b1b      	ldrb	r3, [r3, #12]
 80041c0:	e069      	b.n	8004296 <GetBestGhostDirection+0x272>
    }

    // Trouver la meilleure direction parmi les possibles
    // (celle qui rapproche le plus de la cible)
    Direction bestDir = possibleDirections[0];
 80041c2:	7a3b      	ldrb	r3, [r7, #8]
 80041c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    float bestDistance = 999999.0f;
 80041c8:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <GetBestGhostDirection+0x27c>)
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (int i = 0; i < dirCount; i++) {
 80041cc:	2300      	movs	r3, #0
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d0:	e05b      	b.n	800428a <GetBestGhostDirection+0x266>
        Direction dir = possibleDirections[i];
 80041d2:	f107 0208 	add.w	r2, r7, #8
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	4413      	add	r3, r2
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	76fb      	strb	r3, [r7, #27]
        int new_x = ghost->x;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	623b      	str	r3, [r7, #32]
        int new_y = ghost->y;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	61fb      	str	r3, [r7, #28]

        switch (dir) {
 80041ea:	7efb      	ldrb	r3, [r7, #27]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d81a      	bhi.n	8004228 <GetBestGhostDirection+0x204>
 80041f2:	a201      	add	r2, pc, #4	@ (adr r2, 80041f8 <GetBestGhostDirection+0x1d4>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004209 	.word	0x08004209
 80041fc:	08004211 	.word	0x08004211
 8004200:	08004219 	.word	0x08004219
 8004204:	08004221 	.word	0x08004221
            case DIR_RIGHT: new_x += 20; break;
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	3314      	adds	r3, #20
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	e00b      	b.n	8004228 <GetBestGhostDirection+0x204>
            case DIR_DOWN: new_y += 20; break;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3314      	adds	r3, #20
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	e007      	b.n	8004228 <GetBestGhostDirection+0x204>
            case DIR_LEFT: new_x -= 20; break;
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	3b14      	subs	r3, #20
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	e003      	b.n	8004228 <GetBestGhostDirection+0x204>
            case DIR_UP: new_y -= 20; break;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3b14      	subs	r3, #20
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	bf00      	nop
        }

        // Calculer la distance à la cible depuis cette nouvelle position
        int dx = targetX - new_x;
 8004228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	617b      	str	r3, [r7, #20]
        int dy = targetY - new_y;
 8004230:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	613b      	str	r3, [r7, #16]
        float distance = sqrt(dx*dx + dy*dy);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	fb03 f203 	mul.w	r2, r3, r3
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	fb03 f303 	mul.w	r3, r3, r3
 8004244:	4413      	add	r3, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc f984 	bl	8000554 <__aeabi_i2d>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	ec43 2b10 	vmov	d0, r2, r3
 8004254:	f00c f9e2 	bl	801061c <sqrt>
 8004258:	ec53 2b10 	vmov	r2, r3, d0
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	f7fc fcba 	bl	8000bd8 <__aeabi_d2f>
 8004264:	4603      	mov	r3, r0
 8004266:	60fb      	str	r3, [r7, #12]

        if (distance < bestDistance) {
 8004268:	ed97 7a03 	vldr	s14, [r7, #12]
 800426c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004278:	d504      	bpl.n	8004284 <GetBestGhostDirection+0x260>
            bestDistance = distance;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
            bestDir = dir;
 800427e:	7efb      	ldrb	r3, [r7, #27]
 8004280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (int i = 0; i < dirCount; i++) {
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	3301      	adds	r3, #1
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
 800428a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428e:	429a      	cmp	r2, r3
 8004290:	db9f      	blt.n	80041d2 <GetBestGhostDirection+0x1ae>
        }
    }

    return bestDir;
 8004292:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004296:	4618      	mov	r0, r3
 8004298:	3748      	adds	r7, #72	@ 0x48
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	497423f0 	.word	0x497423f0

080042a4 <MoveGhost>:

// Deplacer un fantome
void MoveGhost(Ghost *ghost, PacMan *pacman)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
    // Mise à jour du mode dispersé
    if (ghost->isScattered) {
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <MoveGhost+0x38>
        ghost->scatterModeTimer--;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1e5a      	subs	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
        if (ghost->scatterModeTimer <= 0) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	dc19      	bgt.n	80042fe <MoveGhost+0x5a>
            ghost->isScattered = false;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2020 	strb.w	r2, [r3, #32]
            ghost->scatterModeTimer = 600; // ~10 secondes de poursuite
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80042d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80042da:	e010      	b.n	80042fe <MoveGhost+0x5a>
        }
    } else {
        ghost->scatterModeTimer--;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24
        if (ghost->scatterModeTimer <= 0) {
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	dc07      	bgt.n	80042fe <MoveGhost+0x5a>
            ghost->isScattered = true;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2020 	strb.w	r2, [r3, #32]
            ghost->scatterModeTimer = 300; // ~5 secondes de dispersion
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    // À une intersection (tous les ~20 pixels)
    if ((ghost->x % 20 == 0 && ghost->y % 20 == 0) || ghost->direction == DIR_NONE) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	4b94      	ldr	r3, [pc, #592]	@ (8004554 <MoveGhost+0x2b0>)
 8004304:	fb83 2301 	smull	r2, r3, r3, r1
 8004308:	10da      	asrs	r2, r3, #3
 800430a:	17cb      	asrs	r3, r1, #31
 800430c:	1ad2      	subs	r2, r2, r3
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	1aca      	subs	r2, r1, r3
 8004318:	2a00      	cmp	r2, #0
 800431a:	d10e      	bne.n	800433a <MoveGhost+0x96>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	4b8c      	ldr	r3, [pc, #560]	@ (8004554 <MoveGhost+0x2b0>)
 8004322:	fb83 2301 	smull	r2, r3, r3, r1
 8004326:	10da      	asrs	r2, r3, #3
 8004328:	17cb      	asrs	r3, r1, #31
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	1aca      	subs	r2, r1, r3
 8004336:	2a00      	cmp	r2, #0
 8004338:	d003      	beq.n	8004342 <MoveGhost+0x9e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	7b1b      	ldrb	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d107      	bne.n	8004352 <MoveGhost+0xae>
        ghost->direction = GetBestGhostDirection(ghost, pacman);
 8004342:	6839      	ldr	r1, [r7, #0]
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff fe6d 	bl	8004024 <GetBestGhostDirection>
 800434a:	4603      	mov	r3, r0
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	731a      	strb	r2, [r3, #12]
    }

    // Calculer la nouvelle position sans déplacer directement le fantome
    int new_x = ghost->x;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	61fb      	str	r3, [r7, #28]
    int new_y = ghost->y;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	61bb      	str	r3, [r7, #24]

    switch (ghost->direction) {
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	7b1b      	ldrb	r3, [r3, #12]
 8004362:	3b01      	subs	r3, #1
 8004364:	2b03      	cmp	r3, #3
 8004366:	d84b      	bhi.n	8004400 <MoveGhost+0x15c>
 8004368:	a201      	add	r2, pc, #4	@ (adr r2, 8004370 <MoveGhost+0xcc>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004381 	.word	0x08004381
 8004374:	080043a1 	.word	0x080043a1
 8004378:	080043c1 	.word	0x080043c1
 800437c:	080043e1 	.word	0x080043e1
        case DIR_RIGHT:
            new_x += ghost->speed;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004398:	ee17 3a90 	vmov	r3, s15
 800439c:	61fb      	str	r3, [r7, #28]
            break;
 800439e:	e02f      	b.n	8004400 <MoveGhost+0x15c>
        case DIR_DOWN:
            new_y += ghost->speed;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80043b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b8:	ee17 3a90 	vmov	r3, s15
 80043bc:	61bb      	str	r3, [r7, #24]
            break;
 80043be:	e01f      	b.n	8004400 <MoveGhost+0x15c>
        case DIR_LEFT:
            new_x -= ghost->speed;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80043d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d8:	ee17 3a90 	vmov	r3, s15
 80043dc:	61fb      	str	r3, [r7, #28]
            break;
 80043de:	e00f      	b.n	8004400 <MoveGhost+0x15c>
        case DIR_UP:
            new_y -= ghost->speed;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80043f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043f8:	ee17 3a90 	vmov	r3, s15
 80043fc:	61bb      	str	r3, [r7, #24]
            break;
 80043fe:	bf00      	nop
    }

    // Vérifier si le fantome est dans la zone de départ centrale (où ils sont initialisés)
    bool isInCentralArea = (ghost->x >= 180 && ghost->x <= 300 &&
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
                            ghost->y >= 110 && ghost->y <= 160);
 8004404:	2bb3      	cmp	r3, #179	@ 0xb3
 8004406:	dd0e      	ble.n	8004426 <MoveGhost+0x182>
    bool isInCentralArea = (ghost->x >= 180 && ghost->x <= 300 &&
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8004410:	dc09      	bgt.n	8004426 <MoveGhost+0x182>
                            ghost->y >= 110 && ghost->y <= 160);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
    bool isInCentralArea = (ghost->x >= 180 && ghost->x <= 300 &&
 8004416:	2b6d      	cmp	r3, #109	@ 0x6d
 8004418:	dd05      	ble.n	8004426 <MoveGhost+0x182>
                            ghost->y >= 110 && ghost->y <= 160);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004420:	dc01      	bgt.n	8004426 <MoveGhost+0x182>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <MoveGhost+0x184>
 8004426:	2300      	movs	r3, #0
    bool isInCentralArea = (ghost->x >= 180 && ghost->x <= 300 &&
 8004428:	75fb      	strb	r3, [r7, #23]
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]

    // Si le fantome est dans la zone centrale, lui permettre de sortir
    if (isInCentralArea) {
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d006      	beq.n	8004446 <MoveGhost+0x1a2>
        ghost->x = new_x;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	601a      	str	r2, [r3, #0]
        ghost->y = new_y;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	e024      	b.n	8004490 <MoveGhost+0x1ec>
    }
    // Sinon, vérifier la collision avec les murs normalement
    else if (!IsPositionInWall(new_x - ghost->radius, new_y - ghost->radius,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	1ad0      	subs	r0, r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	1ad1      	subs	r1, r2, r3
                          2 * ghost->radius, 2 * ghost->radius)) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
    else if (!IsPositionInWall(new_x - ghost->radius, new_y - ghost->radius,
 800445a:	005a      	lsls	r2, r3, #1
                          2 * ghost->radius, 2 * ghost->radius)) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
    else if (!IsPositionInWall(new_x - ghost->radius, new_y - ghost->radius,
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	f7fe ffe7 	bl	8003434 <IsPositionInWall>
 8004466:	4603      	mov	r3, r0
 8004468:	f083 0301 	eor.w	r3, r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d006      	beq.n	8004480 <MoveGhost+0x1dc>
        // Pas de collision, on peut déplacer le fantome
        ghost->x = new_x;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	601a      	str	r2, [r3, #0]
        ghost->y = new_y;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	e007      	b.n	8004490 <MoveGhost+0x1ec>
    } else {
        // En cas de collision, chercher une nouvelle direction immédiatement
        ghost->direction = GetBestGhostDirection(ghost, pacman);
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fdce 	bl	8004024 <GetBestGhostDirection>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	731a      	strb	r2, [r3, #12]
    }

    // Gestion du passage par les tunnels (si présents)
    if (ghost->x > 480 + ghost->radius) {
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800449c:	429a      	cmp	r2, r3
 800449e:	dd05      	ble.n	80044ac <MoveGhost+0x208>
        ghost->x = 0 - ghost->radius;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	425a      	negs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e00c      	b.n	80044c6 <MoveGhost+0x222>
    } else if (ghost->x < 0 - ghost->radius) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	425b      	negs	r3, r3
 80044b6:	429a      	cmp	r2, r3
 80044b8:	da05      	bge.n	80044c6 <MoveGhost+0x222>
        ghost->x = 480 + ghost->radius;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f503 72f0 	add.w	r2, r3, #480	@ 0x1e0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
    }

    // Vérifier collision avec Pac-Man
    int dx = ghost->x - pacman->x;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	613b      	str	r3, [r7, #16]
    int dy = ghost->y - pacman->y;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	60fb      	str	r3, [r7, #12]
    float distance = sqrt(dx*dx + dy*dy);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	fb03 f203 	mul.w	r2, r3, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	fb03 f303 	mul.w	r3, r3, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fc f831 	bl	8000554 <__aeabi_i2d>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	ec43 2b10 	vmov	d0, r2, r3
 80044fa:	f00c f88f 	bl	801061c <sqrt>
 80044fe:	ec53 2b10 	vmov	r2, r3, d0
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	f7fc fb67 	bl	8000bd8 <__aeabi_d2f>
 800450a:	4603      	mov	r3, r0
 800450c:	60bb      	str	r3, [r7, #8]

    if (distance < ghost->radius + pacman->radius) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4413      	add	r3, r2
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	ed97 7a02 	vldr	s14, [r7, #8]
 8004524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	d400      	bmi.n	8004530 <MoveGhost+0x28c>
            // Réinitialiser les positions
            InitPacMan(pacman);
            InitGhosts();
        }
    }
}
 800452e:	e00d      	b.n	800454c <MoveGhost+0x2a8>
        pacman->lives--;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	1e5a      	subs	r2, r3, #1
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	621a      	str	r2, [r3, #32]
        if (pacman->lives > 0) {
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	2b00      	cmp	r3, #0
 8004540:	dd04      	ble.n	800454c <MoveGhost+0x2a8>
            InitPacMan(pacman);
 8004542:	6838      	ldr	r0, [r7, #0]
 8004544:	f7fe ffb2 	bl	80034ac <InitPacMan>
            InitGhosts();
 8004548:	f7ff fb86 	bl	8003c58 <InitGhosts>
}
 800454c:	bf00      	nop
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	66666667 	.word	0x66666667

08004558 <MoveGhosts>:

// Deplacer tous les fantomes
void MoveGhosts(PacMan *pacman)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < NUM_GHOSTS; i++) {
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e00d      	b.n	8004582 <MoveGhosts+0x2a>
        MoveGhost(&ghosts[i], pacman);
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4a08      	ldr	r2, [pc, #32]	@ (8004594 <MoveGhosts+0x3c>)
 8004572:	4413      	add	r3, r2
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fe94 	bl	80042a4 <MoveGhost>
    for (int i = 0; i < NUM_GHOSTS; i++) {
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b03      	cmp	r3, #3
 8004586:	ddee      	ble.n	8004566 <MoveGhosts+0xe>
    }
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	2000123c 	.word	0x2000123c

08004598 <ShowGameOverScreen>:
    BSP_LCD_DisplayStringAt(120, 170, (uint8_t*)"pour commencer", CENTER_MODE);
}

// Fonction pour l'ecran de fin de partie
void ShowGameOverScreen(int score)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80045a0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80045a4:	f000 fd14 	bl	8004fd0 <BSP_LCD_Clear>

    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80045a8:	481a      	ldr	r0, [pc, #104]	@ (8004614 <ShowGameOverScreen+0x7c>)
 80045aa:	f000 fcc5 	bl	8004f38 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80045ae:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80045b2:	f000 fcd9 	bl	8004f68 <BSP_LCD_SetBackColor>
    BSP_LCD_SetFont(&Font24);
 80045b6:	4818      	ldr	r0, [pc, #96]	@ (8004618 <ShowGameOverScreen+0x80>)
 80045b8:	f000 fcf0 	bl	8004f9c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(120, 100, (uint8_t*)"GAME OVER", CENTER_MODE);
 80045bc:	2301      	movs	r3, #1
 80045be:	4a17      	ldr	r2, [pc, #92]	@ (800461c <ShowGameOverScreen+0x84>)
 80045c0:	2164      	movs	r1, #100	@ 0x64
 80045c2:	2078      	movs	r0, #120	@ 0x78
 80045c4:	f000 fd70 	bl	80050a8 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045cc:	f000 fcb4 	bl	8004f38 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font16);
 80045d0:	4813      	ldr	r0, [pc, #76]	@ (8004620 <ShowGameOverScreen+0x88>)
 80045d2:	f000 fce3 	bl	8004f9c <BSP_LCD_SetFont>

    char scoreText[20];
    sprintf(scoreText, "Score final: %d", score);
 80045d6:	f107 030c 	add.w	r3, r7, #12
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	4911      	ldr	r1, [pc, #68]	@ (8004624 <ShowGameOverScreen+0x8c>)
 80045de:	4618      	mov	r0, r3
 80045e0:	f00b fb7c 	bl	800fcdc <siprintf>
    BSP_LCD_DisplayStringAt(120, 150, (uint8_t*)scoreText, CENTER_MODE);
 80045e4:	f107 020c 	add.w	r2, r7, #12
 80045e8:	2301      	movs	r3, #1
 80045ea:	2196      	movs	r1, #150	@ 0x96
 80045ec:	2078      	movs	r0, #120	@ 0x78
 80045ee:	f000 fd5b 	bl	80050a8 <BSP_LCD_DisplayStringAt>

    BSP_LCD_DisplayStringAt(120, 190, (uint8_t*)"Appuyez sur le joystick", CENTER_MODE);
 80045f2:	2301      	movs	r3, #1
 80045f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004628 <ShowGameOverScreen+0x90>)
 80045f6:	21be      	movs	r1, #190	@ 0xbe
 80045f8:	2078      	movs	r0, #120	@ 0x78
 80045fa:	f000 fd55 	bl	80050a8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(120, 210, (uint8_t*)"pour recommencer", CENTER_MODE);
 80045fe:	2301      	movs	r3, #1
 8004600:	4a0a      	ldr	r2, [pc, #40]	@ (800462c <ShowGameOverScreen+0x94>)
 8004602:	21d2      	movs	r1, #210	@ 0xd2
 8004604:	2078      	movs	r0, #120	@ 0x78
 8004606:	f000 fd4f 	bl	80050a8 <BSP_LCD_DisplayStringAt>
}
 800460a:	bf00      	nop
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	ffff0000 	.word	0xffff0000
 8004618:	2000005c 	.word	0x2000005c
 800461c:	08011c74 	.word	0x08011c74
 8004620:	20000064 	.word	0x20000064
 8004624:	08011c80 	.word	0x08011c80
 8004628:	08011c4c 	.word	0x08011c4c
 800462c:	08011c90 	.word	0x08011c90

08004630 <InitGame>:

void InitGame(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
    // Initialiser les structures de jeu
    InitWalls();
 8004634:	f7fe fc6e 	bl	8002f14 <InitWalls>
    InitPoints();
 8004638:	f7fe fe5e 	bl	80032f8 <InitPoints>
    InitPacMan(&pacman);
 800463c:	480a      	ldr	r0, [pc, #40]	@ (8004668 <InitGame+0x38>)
 800463e:	f7fe ff35 	bl	80034ac <InitPacMan>
    InitGhosts();
 8004642:	f7ff fb09 	bl	8003c58 <InitGhosts>

    // Réinitialiser les temps
    extern uint32_t last_update_time;
    extern uint32_t animation_time;
    extern uint32_t ghost_update_time;
    last_update_time = HAL_GetTick();
 8004646:	f002 fe99 	bl	800737c <HAL_GetTick>
 800464a:	4603      	mov	r3, r0
 800464c:	4a07      	ldr	r2, [pc, #28]	@ (800466c <InitGame+0x3c>)
 800464e:	6013      	str	r3, [r2, #0]
    animation_time = HAL_GetTick();
 8004650:	f002 fe94 	bl	800737c <HAL_GetTick>
 8004654:	4603      	mov	r3, r0
 8004656:	4a06      	ldr	r2, [pc, #24]	@ (8004670 <InitGame+0x40>)
 8004658:	6013      	str	r3, [r2, #0]
    ghost_update_time = HAL_GetTick();
 800465a:	f002 fe8f 	bl	800737c <HAL_GetTick>
 800465e:	4603      	mov	r3, r0
 8004660:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <InitGame+0x44>)
 8004662:	6013      	str	r3, [r2, #0]
}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}
 8004668:	200006f0 	.word	0x200006f0
 800466c:	20000718 	.word	0x20000718
 8004670:	20000724 	.word	0x20000724
 8004674:	2000071c 	.word	0x2000071c

08004678 <ReadSensors>:
 * @param  joy_v: Pointer to vertical joystick variable
 * @param  joy_h: Pointer to horizontal joystick variable
 * @retval None
 */
void ReadSensors( uint32_t *joy_v, uint32_t *joy_h)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
		ADC_ChannelConfTypeDef sConfig = {0};
 8004682:	f107 0308 	add.w	r3, r7, #8
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	60da      	str	r2, [r3, #12]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8004690:	2301      	movs	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004694:	2300      	movs	r3, #0
 8004696:	613b      	str	r3, [r7, #16]


		// Joystick vertical
		sConfig.Channel = ADC_CHANNEL_8;
 8004698:	2308      	movs	r3, #8
 800469a:	60bb      	str	r3, [r7, #8]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800469c:	f107 0308 	add.w	r3, r7, #8
 80046a0:	4619      	mov	r1, r3
 80046a2:	4814      	ldr	r0, [pc, #80]	@ (80046f4 <ReadSensors+0x7c>)
 80046a4:	f003 f844 	bl	8007730 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 80046a8:	4812      	ldr	r0, [pc, #72]	@ (80046f4 <ReadSensors+0x7c>)
 80046aa:	f002 fedb 	bl	8007464 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK);
 80046ae:	bf00      	nop
 80046b0:	2164      	movs	r1, #100	@ 0x64
 80046b2:	4810      	ldr	r0, [pc, #64]	@ (80046f4 <ReadSensors+0x7c>)
 80046b4:	f002 ffa4 	bl	8007600 <HAL_ADC_PollForConversion>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f8      	bne.n	80046b0 <ReadSensors+0x38>
		*joy_v = HAL_ADC_GetValue(&hadc3);
 80046be:	480d      	ldr	r0, [pc, #52]	@ (80046f4 <ReadSensors+0x7c>)
 80046c0:	f003 f829 	bl	8007716 <HAL_ADC_GetValue>
 80046c4:	4602      	mov	r2, r0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]

		// Joystick horizontal
		HAL_ADC_Start(&hadc1);
 80046ca:	480b      	ldr	r0, [pc, #44]	@ (80046f8 <ReadSensors+0x80>)
 80046cc:	f002 feca 	bl	8007464 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK);
 80046d0:	bf00      	nop
 80046d2:	2164      	movs	r1, #100	@ 0x64
 80046d4:	4808      	ldr	r0, [pc, #32]	@ (80046f8 <ReadSensors+0x80>)
 80046d6:	f002 ff93 	bl	8007600 <HAL_ADC_PollForConversion>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f8      	bne.n	80046d2 <ReadSensors+0x5a>
		*joy_h = HAL_ADC_GetValue(&hadc1);
 80046e0:	4805      	ldr	r0, [pc, #20]	@ (80046f8 <ReadSensors+0x80>)
 80046e2:	f003 f818 	bl	8007716 <HAL_ADC_GetValue>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	601a      	str	r2, [r3, #0]
}
 80046ec:	bf00      	nop
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2000014c 	.word	0x2000014c
 80046f8:	20000104 	.word	0x20000104

080046fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b090      	sub	sp, #64	@ 0x40
 8004700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004702:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	609a      	str	r2, [r3, #8]
 800470e:	60da      	str	r2, [r3, #12]
 8004710:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004712:	2300      	movs	r3, #0
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004716:	463b      	mov	r3, r7
 8004718:	2228      	movs	r2, #40	@ 0x28
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f00b fafd 	bl	800fd1c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004722:	4b46      	ldr	r3, [pc, #280]	@ (800483c <MX_RTC_Init+0x140>)
 8004724:	4a46      	ldr	r2, [pc, #280]	@ (8004840 <MX_RTC_Init+0x144>)
 8004726:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004728:	4b44      	ldr	r3, [pc, #272]	@ (800483c <MX_RTC_Init+0x140>)
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800472e:	4b43      	ldr	r3, [pc, #268]	@ (800483c <MX_RTC_Init+0x140>)
 8004730:	227f      	movs	r2, #127	@ 0x7f
 8004732:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004734:	4b41      	ldr	r3, [pc, #260]	@ (800483c <MX_RTC_Init+0x140>)
 8004736:	22ff      	movs	r2, #255	@ 0xff
 8004738:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800473a:	4b40      	ldr	r3, [pc, #256]	@ (800483c <MX_RTC_Init+0x140>)
 800473c:	2200      	movs	r2, #0
 800473e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004740:	4b3e      	ldr	r3, [pc, #248]	@ (800483c <MX_RTC_Init+0x140>)
 8004742:	2200      	movs	r2, #0
 8004744:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004746:	4b3d      	ldr	r3, [pc, #244]	@ (800483c <MX_RTC_Init+0x140>)
 8004748:	2200      	movs	r2, #0
 800474a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800474c:	483b      	ldr	r0, [pc, #236]	@ (800483c <MX_RTC_Init+0x140>)
 800474e:	f006 fedd 	bl	800b50c <HAL_RTC_Init>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004758:	f7fe fbd6 	bl	8002f08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800475c:	2300      	movs	r3, #0
 800475e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8004768:	2300      	movs	r3, #0
 800476a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800476e:	2300      	movs	r3, #0
 8004770:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004776:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800477a:	2201      	movs	r2, #1
 800477c:	4619      	mov	r1, r3
 800477e:	482f      	ldr	r0, [pc, #188]	@ (800483c <MX_RTC_Init+0x140>)
 8004780:	f006 ff46 	bl	800b610 <HAL_RTC_SetTime>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800478a:	f7fe fbbd 	bl	8002f08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80047a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80047aa:	2201      	movs	r2, #1
 80047ac:	4619      	mov	r1, r3
 80047ae:	4823      	ldr	r0, [pc, #140]	@ (800483c <MX_RTC_Init+0x140>)
 80047b0:	f006 ffc8 	bl	800b744 <HAL_RTC_SetDate>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80047ba:	f7fe fba5 	bl	8002f08 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80047be:	2300      	movs	r3, #0
 80047c0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80047e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80047ee:	463b      	mov	r3, r7
 80047f0:	2201      	movs	r2, #1
 80047f2:	4619      	mov	r1, r3
 80047f4:	4811      	ldr	r0, [pc, #68]	@ (800483c <MX_RTC_Init+0x140>)
 80047f6:	f007 f829 	bl	800b84c <HAL_RTC_SetAlarm>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8004800:	f7fe fb82 	bl	8002f08 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8004804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800480a:	463b      	mov	r3, r7
 800480c:	2201      	movs	r2, #1
 800480e:	4619      	mov	r1, r3
 8004810:	480a      	ldr	r0, [pc, #40]	@ (800483c <MX_RTC_Init+0x140>)
 8004812:	f007 f81b 	bl	800b84c <HAL_RTC_SetAlarm>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800481c:	f7fe fb74 	bl	8002f08 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8004820:	2202      	movs	r2, #2
 8004822:	2100      	movs	r1, #0
 8004824:	4805      	ldr	r0, [pc, #20]	@ (800483c <MX_RTC_Init+0x140>)
 8004826:	f007 f9db 	bl	800bbe0 <HAL_RTCEx_SetTimeStamp>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8004830:	f7fe fb6a 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004834:	bf00      	nop
 8004836:	3740      	adds	r7, #64	@ 0x40
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	200012dc 	.word	0x200012dc
 8004840:	40002800 	.word	0x40002800

08004844 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b0a4      	sub	sp, #144	@ 0x90
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800484c:	f107 030c 	add.w	r3, r7, #12
 8004850:	2284      	movs	r2, #132	@ 0x84
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f00b fa61 	bl	800fd1c <memset>
  if(rtcHandle->Instance==RTC)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a0e      	ldr	r2, [pc, #56]	@ (8004898 <HAL_RTC_MspInit+0x54>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d114      	bne.n	800488e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004864:	2320      	movs	r3, #32
 8004866:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004868:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800486c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800486e:	f107 030c 	add.w	r3, r7, #12
 8004872:	4618      	mov	r0, r3
 8004874:	f006 fa5a 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800487e:	f7fe fb43 	bl	8002f08 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004882:	4b06      	ldr	r3, [pc, #24]	@ (800489c <HAL_RTC_MspInit+0x58>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	4a05      	ldr	r2, [pc, #20]	@ (800489c <HAL_RTC_MspInit+0x58>)
 8004888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800488c:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800488e:	bf00      	nop
 8004890:	3790      	adds	r7, #144	@ 0x90
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40002800 	.word	0x40002800
 800489c:	40023800 	.word	0x40023800

080048a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80048a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <MX_SPI2_Init+0x78>)
 80048a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80048aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80048b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80048b2:	4b18      	ldr	r3, [pc, #96]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80048b8:	4b16      	ldr	r3, [pc, #88]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048ba:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80048be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048c0:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048c6:	4b13      	ldr	r3, [pc, #76]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80048cc:	4b11      	ldr	r3, [pc, #68]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048ce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80048d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048da:	4b0e      	ldr	r3, [pc, #56]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048dc:	2200      	movs	r2, #0
 80048de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80048ec:	4b09      	ldr	r3, [pc, #36]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048ee:	2207      	movs	r2, #7
 80048f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048f2:	4b08      	ldr	r3, [pc, #32]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048f8:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <MX_SPI2_Init+0x74>)
 80048fa:	2208      	movs	r2, #8
 80048fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80048fe:	4805      	ldr	r0, [pc, #20]	@ (8004914 <MX_SPI2_Init+0x74>)
 8004900:	f007 fa67 	bl	800bdd2 <HAL_SPI_Init>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800490a:	f7fe fafd 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200012fc 	.word	0x200012fc
 8004918:	40003800 	.word	0x40003800

0800491c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	@ 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a25      	ldr	r2, [pc, #148]	@ (80049d0 <HAL_SPI_MspInit+0xb4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d144      	bne.n	80049c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800493e:	4b25      	ldr	r3, [pc, #148]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	4a24      	ldr	r2, [pc, #144]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 8004944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004948:	6413      	str	r3, [r2, #64]	@ 0x40
 800494a:	4b22      	ldr	r3, [pc, #136]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004956:	4b1f      	ldr	r3, [pc, #124]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	4a1e      	ldr	r2, [pc, #120]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 800495c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004960:	6313      	str	r3, [r2, #48]	@ 0x30
 8004962:	4b1c      	ldr	r3, [pc, #112]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496e:	4b19      	ldr	r3, [pc, #100]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	4a18      	ldr	r2, [pc, #96]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	6313      	str	r3, [r2, #48]	@ 0x30
 800497a:	4b16      	ldr	r3, [pc, #88]	@ (80049d4 <HAL_SPI_MspInit+0xb8>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004986:	2303      	movs	r3, #3
 8004988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498a:	2302      	movs	r3, #2
 800498c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004992:	2303      	movs	r3, #3
 8004994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004996:	2305      	movs	r3, #5
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	4619      	mov	r1, r3
 80049a0:	480d      	ldr	r0, [pc, #52]	@ (80049d8 <HAL_SPI_MspInit+0xbc>)
 80049a2:	f004 f83b 	bl	8008a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80049a6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80049aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ac:	2302      	movs	r3, #2
 80049ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b4:	2300      	movs	r3, #0
 80049b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049b8:	2305      	movs	r3, #5
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049bc:	f107 0314 	add.w	r3, r7, #20
 80049c0:	4619      	mov	r1, r3
 80049c2:	4806      	ldr	r0, [pc, #24]	@ (80049dc <HAL_SPI_MspInit+0xc0>)
 80049c4:	f004 f82a 	bl	8008a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80049c8:	bf00      	nop
 80049ca:	3728      	adds	r7, #40	@ 0x28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40003800 	.word	0x40003800
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40022000 	.word	0x40022000
 80049dc:	40020400 	.word	0x40020400

080049e0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	@ 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a51      	ldr	r2, [pc, #324]	@ (8004b30 <I2Cx_MspInit+0x150>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d14d      	bne.n	8004a8c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80049f0:	4b50      	ldr	r3, [pc, #320]	@ (8004b34 <I2Cx_MspInit+0x154>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	4a4f      	ldr	r2, [pc, #316]	@ (8004b34 <I2Cx_MspInit+0x154>)
 80049f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80049fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004b34 <I2Cx_MspInit+0x154>)
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004a0c:	2312      	movs	r3, #18
 8004a0e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004a14:	2302      	movs	r3, #2
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004a18:	2304      	movs	r3, #4
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004a1c:	f107 031c 	add.w	r3, r7, #28
 8004a20:	4619      	mov	r1, r3
 8004a22:	4845      	ldr	r0, [pc, #276]	@ (8004b38 <I2Cx_MspInit+0x158>)
 8004a24:	f003 fffa 	bl	8008a1c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004a2e:	f107 031c 	add.w	r3, r7, #28
 8004a32:	4619      	mov	r1, r3
 8004a34:	4840      	ldr	r0, [pc, #256]	@ (8004b38 <I2Cx_MspInit+0x158>)
 8004a36:	f003 fff1 	bl	8008a1c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a46:	4b3b      	ldr	r3, [pc, #236]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8004a52:	4b38      	ldr	r3, [pc, #224]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	4a37      	ldr	r2, [pc, #220]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a5c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004a5e:	4b35      	ldr	r3, [pc, #212]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	4a34      	ldr	r2, [pc, #208]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a68:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	210f      	movs	r1, #15
 8004a6e:	2048      	movs	r0, #72	@ 0x48
 8004a70:	f003 f96a 	bl	8007d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004a74:	2048      	movs	r0, #72	@ 0x48
 8004a76:	f003 f983 	bl	8007d80 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	210f      	movs	r1, #15
 8004a7e:	2049      	movs	r0, #73	@ 0x49
 8004a80:	f003 f962 	bl	8007d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004a84:	2049      	movs	r0, #73	@ 0x49
 8004a86:	f003 f97b 	bl	8007d80 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004a8a:	e04d      	b.n	8004b28 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004a8c:	4b29      	ldr	r3, [pc, #164]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a90:	4a28      	ldr	r2, [pc, #160]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a92:	f043 0302 	orr.w	r3, r3, #2
 8004a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a98:	4b26      	ldr	r3, [pc, #152]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aa8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004aaa:	2312      	movs	r3, #18
 8004aac:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004aba:	f107 031c 	add.w	r3, r7, #28
 8004abe:	4619      	mov	r1, r3
 8004ac0:	481e      	ldr	r0, [pc, #120]	@ (8004b3c <I2Cx_MspInit+0x15c>)
 8004ac2:	f003 ffab 	bl	8008a1c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004acc:	f107 031c 	add.w	r3, r7, #28
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	481a      	ldr	r0, [pc, #104]	@ (8004b3c <I2Cx_MspInit+0x15c>)
 8004ad4:	f003 ffa2 	bl	8008a1c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004ad8:	4b16      	ldr	r3, [pc, #88]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	4a15      	ldr	r2, [pc, #84]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004ade:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae4:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004af0:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	4a0f      	ldr	r2, [pc, #60]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004af6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004afa:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004afc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4a0c      	ldr	r2, [pc, #48]	@ (8004b34 <I2Cx_MspInit+0x154>)
 8004b02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b06:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	210f      	movs	r1, #15
 8004b0c:	201f      	movs	r0, #31
 8004b0e:	f003 f91b 	bl	8007d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004b12:	201f      	movs	r0, #31
 8004b14:	f003 f934 	bl	8007d80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004b18:	2200      	movs	r2, #0
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	2020      	movs	r0, #32
 8004b1e:	f003 f913 	bl	8007d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004b22:	2020      	movs	r0, #32
 8004b24:	f003 f92c 	bl	8007d80 <HAL_NVIC_EnableIRQ>
}
 8004b28:	bf00      	nop
 8004b2a:	3730      	adds	r7, #48	@ 0x30
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20001360 	.word	0x20001360
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40021c00 	.word	0x40021c00
 8004b3c:	40020400 	.word	0x40020400

08004b40 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f004 fd4b 	bl	80095e4 <HAL_I2C_GetState>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d125      	bne.n	8004ba0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a14      	ldr	r2, [pc, #80]	@ (8004ba8 <I2Cx_Init+0x68>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d103      	bne.n	8004b64 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a13      	ldr	r2, [pc, #76]	@ (8004bac <I2Cx_Init+0x6c>)
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e002      	b.n	8004b6a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a12      	ldr	r2, [pc, #72]	@ (8004bb0 <I2Cx_Init+0x70>)
 8004b68:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a11      	ldr	r2, [pc, #68]	@ (8004bb4 <I2Cx_Init+0x74>)
 8004b6e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff ff23 	bl	80049e0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f004 fa28 	bl	8008ff0 <HAL_I2C_Init>
  }
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20001360 	.word	0x20001360
 8004bac:	40005c00 	.word	0x40005c00
 8004bb0:	40005400 	.word	0x40005400
 8004bb4:	40912732 	.word	0x40912732

08004bb8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	@ 0x28
 8004bbc:	af04      	add	r7, sp, #16
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	72fb      	strb	r3, [r7, #11]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	813b      	strh	r3, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004bd6:	7afb      	ldrb	r3, [r7, #11]
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	88f8      	ldrh	r0, [r7, #6]
 8004bdc:	893a      	ldrh	r2, [r7, #8]
 8004bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004be2:	9302      	str	r3, [sp, #8]
 8004be4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4603      	mov	r3, r0
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f004 fbde 	bl	80093b0 <HAL_I2C_Mem_Read>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004bfe:	7afb      	ldrb	r3, [r7, #11]
 8004c00:	4619      	mov	r1, r3
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f832 	bl	8004c6c <I2Cx_Error>
  }
  return status;    
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b08a      	sub	sp, #40	@ 0x28
 8004c16:	af04      	add	r7, sp, #16
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	4608      	mov	r0, r1
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	72fb      	strb	r3, [r7, #11]
 8004c24:	460b      	mov	r3, r1
 8004c26:	813b      	strh	r3, [r7, #8]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004c30:	7afb      	ldrb	r3, [r7, #11]
 8004c32:	b299      	uxth	r1, r3
 8004c34:	88f8      	ldrh	r0, [r7, #6]
 8004c36:	893a      	ldrh	r2, [r7, #8]
 8004c38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c3c:	9302      	str	r3, [sp, #8]
 8004c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4603      	mov	r3, r0
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f004 fa9d 	bl	8009188 <HAL_I2C_Mem_Write>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f805 	bl	8004c6c <I2Cx_Error>
  }
  return status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f004 fa55 	bl	8009128 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff ff5e 	bl	8004b40 <I2Cx_Init>
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004c90:	4802      	ldr	r0, [pc, #8]	@ (8004c9c <TS_IO_Init+0x10>)
 8004c92:	f7ff ff55 	bl	8004b40 <I2Cx_Init>
}
 8004c96:	bf00      	nop
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20001360 	.word	0x20001360

08004ca0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
 8004caa:	460b      	mov	r3, r1
 8004cac:	71bb      	strb	r3, [r7, #6]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004cb2:	79bb      	ldrb	r3, [r7, #6]
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	79f9      	ldrb	r1, [r7, #7]
 8004cb8:	2301      	movs	r3, #1
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	1d7b      	adds	r3, r7, #5
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4803      	ldr	r0, [pc, #12]	@ (8004cd0 <TS_IO_Write+0x30>)
 8004cc4:	f7ff ffa5 	bl	8004c12 <I2Cx_WriteMultiple>
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20001360 	.word	0x20001360

08004cd4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	4603      	mov	r3, r0
 8004cdc:	460a      	mov	r2, r1
 8004cde:	71fb      	strb	r3, [r7, #7]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004ce8:	79bb      	ldrb	r3, [r7, #6]
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	79f9      	ldrb	r1, [r7, #7]
 8004cee:	2301      	movs	r3, #1
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	f107 030f 	add.w	r3, r7, #15
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4804      	ldr	r0, [pc, #16]	@ (8004d0c <TS_IO_Read+0x38>)
 8004cfc:	f7ff ff5c 	bl	8004bb8 <I2Cx_ReadMultiple>

  return read_value;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20001360 	.word	0x20001360

08004d10 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f002 fb3b 	bl	8007394 <HAL_Delay>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004d2c:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d2e:	2228      	movs	r2, #40	@ 0x28
 8004d30:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004d32:	4b30      	ldr	r3, [pc, #192]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d34:	2209      	movs	r2, #9
 8004d36:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004d38:	4b2e      	ldr	r3, [pc, #184]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d3a:	2235      	movs	r2, #53	@ 0x35
 8004d3c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d40:	220b      	movs	r2, #11
 8004d42:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004d44:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d46:	f240 121b 	movw	r2, #283	@ 0x11b
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004d4c:	4b29      	ldr	r3, [pc, #164]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d4e:	f240 2215 	movw	r2, #533	@ 0x215
 8004d52:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004d54:	4b27      	ldr	r3, [pc, #156]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d56:	f240 121d 	movw	r2, #285	@ 0x11d
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004d5c:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d5e:	f240 2235 	movw	r2, #565	@ 0x235
 8004d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004d64:	2100      	movs	r1, #0
 8004d66:	4823      	ldr	r0, [pc, #140]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d68:	f000 ffb8 	bl	8005cdc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004d6c:	4b21      	ldr	r3, [pc, #132]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004d72:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004d74:	4b1f      	ldr	r3, [pc, #124]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d76:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8004d7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004d84:	4b1b      	ldr	r3, [pc, #108]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004d8c:	4b19      	ldr	r3, [pc, #100]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004d94:	4b17      	ldr	r3, [pc, #92]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004d9a:	4b16      	ldr	r3, [pc, #88]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004da0:	4b14      	ldr	r3, [pc, #80]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004da6:	4b13      	ldr	r3, [pc, #76]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004dac:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004dae:	4a12      	ldr	r2, [pc, #72]	@ (8004df8 <BSP_LCD_Init+0xd0>)
 8004db0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004db2:	4810      	ldr	r0, [pc, #64]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004db4:	f005 f91a 	bl	8009fec <HAL_LTDC_GetState>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	480c      	ldr	r0, [pc, #48]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004dc2:	f000 feb1 	bl	8005b28 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004dc6:	480b      	ldr	r0, [pc, #44]	@ (8004df4 <BSP_LCD_Init+0xcc>)
 8004dc8:	f004 ff73 	bl	8009cb2 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004dd2:	480a      	ldr	r0, [pc, #40]	@ (8004dfc <BSP_LCD_Init+0xd4>)
 8004dd4:	f004 f8f2 	bl	8008fbc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004dd8:	2201      	movs	r2, #1
 8004dda:	2108      	movs	r1, #8
 8004ddc:	4808      	ldr	r0, [pc, #32]	@ (8004e00 <BSP_LCD_Init+0xd8>)
 8004dde:	f004 f8ed 	bl	8008fbc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004de2:	f001 f95b 	bl	800609c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004de6:	4807      	ldr	r0, [pc, #28]	@ (8004e04 <BSP_LCD_Init+0xdc>)
 8004de8:	f000 f8d8 	bl	8004f9c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200013b4 	.word	0x200013b4
 8004df8:	40016800 	.word	0x40016800
 8004dfc:	40022000 	.word	0x40022000
 8004e00:	40022800 	.word	0x40022800
 8004e04:	2000005c 	.word	0x2000005c

08004e08 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <BSP_LCD_GetXSize+0x20>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a06      	ldr	r2, [pc, #24]	@ (8004e2c <BSP_LCD_GetXSize+0x24>)
 8004e12:	2134      	movs	r1, #52	@ 0x34
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	3360      	adds	r3, #96	@ 0x60
 8004e1c:	681b      	ldr	r3, [r3, #0]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	2000149c 	.word	0x2000149c
 8004e2c:	200013b4 	.word	0x200013b4

08004e30 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004e34:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <BSP_LCD_GetYSize+0x20>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a06      	ldr	r2, [pc, #24]	@ (8004e54 <BSP_LCD_GetYSize+0x24>)
 8004e3a:	2134      	movs	r1, #52	@ 0x34
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	3364      	adds	r3, #100	@ 0x64
 8004e44:	681b      	ldr	r3, [r3, #0]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	2000149c 	.word	0x2000149c
 8004e54:	200013b4 	.word	0x200013b4

08004e58 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b090      	sub	sp, #64	@ 0x40
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	6039      	str	r1, [r7, #0]
 8004e62:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004e68:	f7ff ffce 	bl	8004e08 <BSP_LCD_GetXSize>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004e74:	f7ff ffdc 	bl	8004e30 <BSP_LCD_GetYSize>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8004e84:	23ff      	movs	r3, #255	@ 0xff
 8004e86:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004e9e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004ea4:	2307      	movs	r3, #7
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004ea8:	f7ff ffae 	bl	8004e08 <BSP_LCD_GetXSize>
 8004eac:	4603      	mov	r3, r0
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004eb0:	f7ff ffbe 	bl	8004e30 <BSP_LCD_GetYSize>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004eb8:	88fa      	ldrh	r2, [r7, #6]
 8004eba:	f107 030c 	add.w	r3, r7, #12
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4812      	ldr	r0, [pc, #72]	@ (8004f0c <BSP_LCD_LayerDefaultInit+0xb4>)
 8004ec2:	f005 f855 	bl	8009f70 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	4911      	ldr	r1, [pc, #68]	@ (8004f10 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004eca:	4613      	mov	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004eda:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004edc:	88fa      	ldrh	r2, [r7, #6]
 8004ede:	490c      	ldr	r1, [pc, #48]	@ (8004f10 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	3308      	adds	r3, #8
 8004eec:	4a09      	ldr	r2, [pc, #36]	@ (8004f14 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004eee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	4907      	ldr	r1, [pc, #28]	@ (8004f10 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	3740      	adds	r7, #64	@ 0x40
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	200013b4 	.word	0x200013b4
 8004f10:	200014a0 	.word	0x200014a0
 8004f14:	2000005c 	.word	0x2000005c

08004f18 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004f20:	4a04      	ldr	r2, [pc, #16]	@ (8004f34 <BSP_LCD_SelectLayer+0x1c>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6013      	str	r3, [r2, #0]
} 
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	2000149c 	.word	0x2000149c

08004f38 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004f40:	4b07      	ldr	r3, [pc, #28]	@ (8004f60 <BSP_LCD_SetTextColor+0x28>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4907      	ldr	r1, [pc, #28]	@ (8004f64 <BSP_LCD_SetTextColor+0x2c>)
 8004f46:	4613      	mov	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	2000149c 	.word	0x2000149c
 8004f64:	200014a0 	.word	0x200014a0

08004f68 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004f70:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <BSP_LCD_SetBackColor+0x2c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4908      	ldr	r1, [pc, #32]	@ (8004f98 <BSP_LCD_SetBackColor+0x30>)
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3304      	adds	r3, #4
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	2000149c 	.word	0x2000149c
 8004f98:	200014a0 	.word	0x200014a0

08004f9c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004fa4:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <BSP_LCD_SetFont+0x2c>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4908      	ldr	r1, [pc, #32]	@ (8004fcc <BSP_LCD_SetFont+0x30>)
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	2000149c 	.word	0x2000149c
 8004fcc:	200014a0 	.word	0x200014a0

08004fd0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005018 <BSP_LCD_Clear+0x48>)
 8004fda:	681c      	ldr	r4, [r3, #0]
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8005018 <BSP_LCD_Clear+0x48>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800501c <BSP_LCD_Clear+0x4c>)
 8004fe2:	2134      	movs	r1, #52	@ 0x34
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	4413      	add	r3, r2
 8004fea:	335c      	adds	r3, #92	@ 0x5c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461e      	mov	r6, r3
 8004ff0:	f7ff ff0a 	bl	8004e08 <BSP_LCD_GetXSize>
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	f7ff ff1b 	bl	8004e30 <BSP_LCD_GetYSize>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	2300      	movs	r3, #0
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	4613      	mov	r3, r2
 8005006:	462a      	mov	r2, r5
 8005008:	4631      	mov	r1, r6
 800500a:	4620      	mov	r0, r4
 800500c:	f000 fffa 	bl	8006004 <LL_FillBuffer>
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005018:	2000149c 	.word	0x2000149c
 800501c:	200013b4 	.word	0x200013b4

08005020 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	80fb      	strh	r3, [r7, #6]
 800502a:	460b      	mov	r3, r1
 800502c:	80bb      	strh	r3, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005032:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <BSP_LCD_DisplayChar+0x80>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	491b      	ldr	r1, [pc, #108]	@ (80050a4 <BSP_LCD_DisplayChar+0x84>)
 8005038:	4613      	mov	r3, r2
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	3308      	adds	r3, #8
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6819      	ldr	r1, [r3, #0]
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800504e:	4b14      	ldr	r3, [pc, #80]	@ (80050a0 <BSP_LCD_DisplayChar+0x80>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4c14      	ldr	r4, [pc, #80]	@ (80050a4 <BSP_LCD_DisplayChar+0x84>)
 8005054:	4613      	mov	r3, r2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4423      	add	r3, r4
 800505e:	3308      	adds	r3, #8
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005064:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005068:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <BSP_LCD_DisplayChar+0x80>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4c0d      	ldr	r4, [pc, #52]	@ (80050a4 <BSP_LCD_DisplayChar+0x84>)
 800506e:	4613      	mov	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4423      	add	r3, r4
 8005078:	3308      	adds	r3, #8
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	889b      	ldrh	r3, [r3, #4]
 800507e:	3307      	adds	r3, #7
 8005080:	2b00      	cmp	r3, #0
 8005082:	da00      	bge.n	8005086 <BSP_LCD_DisplayChar+0x66>
 8005084:	3307      	adds	r3, #7
 8005086:	10db      	asrs	r3, r3, #3
 8005088:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800508c:	18ca      	adds	r2, r1, r3
 800508e:	88b9      	ldrh	r1, [r7, #4]
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fe3e 	bl	8005d14 <DrawChar>
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bd90      	pop	{r4, r7, pc}
 80050a0:	2000149c 	.word	0x2000149c
 80050a4:	200014a0 	.word	0x200014a0

080050a8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60ba      	str	r2, [r7, #8]
 80050b0:	461a      	mov	r2, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	81fb      	strh	r3, [r7, #14]
 80050b6:	460b      	mov	r3, r1
 80050b8:	81bb      	strh	r3, [r7, #12]
 80050ba:	4613      	mov	r3, r2
 80050bc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80050be:	2301      	movs	r3, #1
 80050c0:	83fb      	strh	r3, [r7, #30]
 80050c2:	2300      	movs	r3, #0
 80050c4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80050c6:	2300      	movs	r3, #0
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	2300      	movs	r3, #0
 80050cc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80050d2:	e002      	b.n	80050da <BSP_LCD_DisplayStringAt+0x32>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	3301      	adds	r3, #1
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	617a      	str	r2, [r7, #20]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f6      	bne.n	80050d4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80050e6:	f7ff fe8f 	bl	8004e08 <BSP_LCD_GetXSize>
 80050ea:	4601      	mov	r1, r0
 80050ec:	4b50      	ldr	r3, [pc, #320]	@ (8005230 <BSP_LCD_DisplayStringAt+0x188>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4850      	ldr	r0, [pc, #320]	@ (8005234 <BSP_LCD_DisplayStringAt+0x18c>)
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4403      	add	r3, r0
 80050fc:	3308      	adds	r3, #8
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	889b      	ldrh	r3, [r3, #4]
 8005102:	fbb1 f3f3 	udiv	r3, r1, r3
 8005106:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	2b03      	cmp	r3, #3
 800510c:	d01c      	beq.n	8005148 <BSP_LCD_DisplayStringAt+0xa0>
 800510e:	2b03      	cmp	r3, #3
 8005110:	dc33      	bgt.n	800517a <BSP_LCD_DisplayStringAt+0xd2>
 8005112:	2b01      	cmp	r3, #1
 8005114:	d002      	beq.n	800511c <BSP_LCD_DisplayStringAt+0x74>
 8005116:	2b02      	cmp	r3, #2
 8005118:	d019      	beq.n	800514e <BSP_LCD_DisplayStringAt+0xa6>
 800511a:	e02e      	b.n	800517a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	1ad1      	subs	r1, r2, r3
 8005122:	4b43      	ldr	r3, [pc, #268]	@ (8005230 <BSP_LCD_DisplayStringAt+0x188>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4843      	ldr	r0, [pc, #268]	@ (8005234 <BSP_LCD_DisplayStringAt+0x18c>)
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4403      	add	r3, r0
 8005132:	3308      	adds	r3, #8
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	889b      	ldrh	r3, [r3, #4]
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	89fb      	ldrh	r3, [r7, #14]
 8005142:	4413      	add	r3, r2
 8005144:	83fb      	strh	r3, [r7, #30]
      break;
 8005146:	e01b      	b.n	8005180 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8005148:	89fb      	ldrh	r3, [r7, #14]
 800514a:	83fb      	strh	r3, [r7, #30]
      break;
 800514c:	e018      	b.n	8005180 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	b299      	uxth	r1, r3
 8005156:	4b36      	ldr	r3, [pc, #216]	@ (8005230 <BSP_LCD_DisplayStringAt+0x188>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	4836      	ldr	r0, [pc, #216]	@ (8005234 <BSP_LCD_DisplayStringAt+0x18c>)
 800515c:	4613      	mov	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4403      	add	r3, r0
 8005166:	3308      	adds	r3, #8
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	889b      	ldrh	r3, [r3, #4]
 800516c:	fb11 f303 	smulbb	r3, r1, r3
 8005170:	b29a      	uxth	r2, r3
 8005172:	89fb      	ldrh	r3, [r7, #14]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	83fb      	strh	r3, [r7, #30]
      break;
 8005178:	e002      	b.n	8005180 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	83fb      	strh	r3, [r7, #30]
      break;
 800517e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <BSP_LCD_DisplayStringAt+0xe6>
 8005186:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800518a:	2b00      	cmp	r3, #0
 800518c:	da1d      	bge.n	80051ca <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800518e:	2301      	movs	r3, #1
 8005190:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005192:	e01a      	b.n	80051ca <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	781a      	ldrb	r2, [r3, #0]
 8005198:	89b9      	ldrh	r1, [r7, #12]
 800519a:	8bfb      	ldrh	r3, [r7, #30]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff ff3f 	bl	8005020 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80051a2:	4b23      	ldr	r3, [pc, #140]	@ (8005230 <BSP_LCD_DisplayStringAt+0x188>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4923      	ldr	r1, [pc, #140]	@ (8005234 <BSP_LCD_DisplayStringAt+0x18c>)
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	3308      	adds	r3, #8
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	889a      	ldrh	r2, [r3, #4]
 80051b8:	8bfb      	ldrh	r3, [r7, #30]
 80051ba:	4413      	add	r3, r2
 80051bc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	3301      	adds	r3, #1
 80051c2:	60bb      	str	r3, [r7, #8]
    i++;
 80051c4:	8bbb      	ldrh	r3, [r7, #28]
 80051c6:	3301      	adds	r3, #1
 80051c8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bf14      	ite	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	2300      	moveq	r3, #0
 80051d6:	b2dc      	uxtb	r4, r3
 80051d8:	f7ff fe16 	bl	8004e08 <BSP_LCD_GetXSize>
 80051dc:	8bb9      	ldrh	r1, [r7, #28]
 80051de:	4b14      	ldr	r3, [pc, #80]	@ (8005230 <BSP_LCD_DisplayStringAt+0x188>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4d14      	ldr	r5, [pc, #80]	@ (8005234 <BSP_LCD_DisplayStringAt+0x18c>)
 80051e4:	4613      	mov	r3, r2
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	442b      	add	r3, r5
 80051ee:	3308      	adds	r3, #8
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	889b      	ldrh	r3, [r3, #4]
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	1ac3      	subs	r3, r0, r3
 80051fa:	b299      	uxth	r1, r3
 80051fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <BSP_LCD_DisplayStringAt+0x188>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	480c      	ldr	r0, [pc, #48]	@ (8005234 <BSP_LCD_DisplayStringAt+0x18c>)
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4403      	add	r3, r0
 800520c:	3308      	adds	r3, #8
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	889b      	ldrh	r3, [r3, #4]
 8005212:	4299      	cmp	r1, r3
 8005214:	bf2c      	ite	cs
 8005216:	2301      	movcs	r3, #1
 8005218:	2300      	movcc	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	4023      	ands	r3, r4
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1b7      	bne.n	8005194 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bdb0      	pop	{r4, r5, r7, pc}
 800522e:	bf00      	nop
 8005230:	2000149c 	.word	0x2000149c
 8005234:	200014a0 	.word	0x200014a0

08005238 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005238:	b5b0      	push	{r4, r5, r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af02      	add	r7, sp, #8
 800523e:	4603      	mov	r3, r0
 8005240:	80fb      	strh	r3, [r7, #6]
 8005242:	460b      	mov	r3, r1
 8005244:	80bb      	strh	r3, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800524e:	4b26      	ldr	r3, [pc, #152]	@ (80052e8 <BSP_LCD_DrawHLine+0xb0>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a26      	ldr	r2, [pc, #152]	@ (80052ec <BSP_LCD_DrawHLine+0xb4>)
 8005254:	2134      	movs	r1, #52	@ 0x34
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	4413      	add	r3, r2
 800525c:	3348      	adds	r3, #72	@ 0x48
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d114      	bne.n	800528e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005264:	4b20      	ldr	r3, [pc, #128]	@ (80052e8 <BSP_LCD_DrawHLine+0xb0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a20      	ldr	r2, [pc, #128]	@ (80052ec <BSP_LCD_DrawHLine+0xb4>)
 800526a:	2134      	movs	r1, #52	@ 0x34
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	335c      	adds	r3, #92	@ 0x5c
 8005274:	681c      	ldr	r4, [r3, #0]
 8005276:	f7ff fdc7 	bl	8004e08 <BSP_LCD_GetXSize>
 800527a:	4602      	mov	r2, r0
 800527c:	88bb      	ldrh	r3, [r7, #4]
 800527e:	fb03 f202 	mul.w	r2, r3, r2
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	4413      	add	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4423      	add	r3, r4
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e013      	b.n	80052b6 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800528e:	4b16      	ldr	r3, [pc, #88]	@ (80052e8 <BSP_LCD_DrawHLine+0xb0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a16      	ldr	r2, [pc, #88]	@ (80052ec <BSP_LCD_DrawHLine+0xb4>)
 8005294:	2134      	movs	r1, #52	@ 0x34
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	335c      	adds	r3, #92	@ 0x5c
 800529e:	681c      	ldr	r4, [r3, #0]
 80052a0:	f7ff fdb2 	bl	8004e08 <BSP_LCD_GetXSize>
 80052a4:	4602      	mov	r2, r0
 80052a6:	88bb      	ldrh	r3, [r7, #4]
 80052a8:	fb03 f202 	mul.w	r2, r3, r2
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4423      	add	r3, r4
 80052b4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80052b6:	4b0c      	ldr	r3, [pc, #48]	@ (80052e8 <BSP_LCD_DrawHLine+0xb0>)
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	887c      	ldrh	r4, [r7, #2]
 80052be:	4b0a      	ldr	r3, [pc, #40]	@ (80052e8 <BSP_LCD_DrawHLine+0xb0>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4d0b      	ldr	r5, [pc, #44]	@ (80052f0 <BSP_LCD_DrawHLine+0xb8>)
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	442b      	add	r3, r5
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	2300      	movs	r3, #0
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2301      	movs	r3, #1
 80052d8:	4622      	mov	r2, r4
 80052da:	f000 fe93 	bl	8006004 <LL_FillBuffer>
}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bdb0      	pop	{r4, r5, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	2000149c 	.word	0x2000149c
 80052ec:	200013b4 	.word	0x200013b4
 80052f0:	200014a0 	.word	0x200014a0

080052f4 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b08b      	sub	sp, #44	@ 0x2c
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4604      	mov	r4, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4623      	mov	r3, r4
 8005304:	80fb      	strh	r3, [r7, #6]
 8005306:	4603      	mov	r3, r0
 8005308:	80bb      	strh	r3, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	807b      	strh	r3, [r7, #2]
 800530e:	4613      	mov	r3, r2
 8005310:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8005312:	2300      	movs	r3, #0
 8005314:	823b      	strh	r3, [r7, #16]
 8005316:	2300      	movs	r3, #0
 8005318:	81fb      	strh	r3, [r7, #14]
 800531a:	2300      	movs	r3, #0
 800531c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800531e:	2300      	movs	r3, #0
 8005320:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005322:	2300      	movs	r3, #0
 8005324:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005326:	2300      	movs	r3, #0
 8005328:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 800532a:	2300      	movs	r3, #0
 800532c:	83fb      	strh	r3, [r7, #30]
 800532e:	2300      	movs	r3, #0
 8005330:	83bb      	strh	r3, [r7, #28]
 8005332:	2300      	movs	r3, #0
 8005334:	837b      	strh	r3, [r7, #26]
 8005336:	2300      	movs	r3, #0
 8005338:	833b      	strh	r3, [r7, #24]
 800533a:	2300      	movs	r3, #0
 800533c:	82fb      	strh	r3, [r7, #22]
 800533e:	2300      	movs	r3, #0
 8005340:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8005346:	887a      	ldrh	r2, [r7, #2]
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	bfb8      	it	lt
 8005350:	425b      	neglt	r3, r3
 8005352:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8005354:	883a      	ldrh	r2, [r7, #0]
 8005356:	88bb      	ldrh	r3, [r7, #4]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	bfb8      	it	lt
 800535e:	425b      	neglt	r3, r3
 8005360:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = y1;                       /* Start y off at the first pixel */
 8005366:	88bb      	ldrh	r3, [r7, #4]
 8005368:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	429a      	cmp	r2, r3
 8005370:	d304      	bcc.n	800537c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8005372:	2301      	movs	r3, #1
 8005374:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8005376:	2301      	movs	r3, #1
 8005378:	843b      	strh	r3, [r7, #32]
 800537a:	e005      	b.n	8005388 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800537c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005380:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8005382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005386:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8005388:	883a      	ldrh	r2, [r7, #0]
 800538a:	88bb      	ldrh	r3, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d304      	bcc.n	800539a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8005390:	2301      	movs	r3, #1
 8005392:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8005394:	2301      	movs	r3, #1
 8005396:	83bb      	strh	r3, [r7, #28]
 8005398:	e005      	b.n	80053a6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800539a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800539e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80053a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053a4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80053a6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80053aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	db11      	blt.n	80053d6 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80053b2:	2300      	movs	r3, #0
 80053b4:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80053b6:	2300      	movs	r3, #0
 80053b8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80053ba:	8a3b      	ldrh	r3, [r7, #16]
 80053bc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80053be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da00      	bge.n	80053c8 <BSP_LCD_DrawLine+0xd4>
 80053c6:	3301      	adds	r3, #1
 80053c8:	105b      	asrs	r3, r3, #1
 80053ca:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80053cc:	89fb      	ldrh	r3, [r7, #14]
 80053ce:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80053d0:	8a3b      	ldrh	r3, [r7, #16]
 80053d2:	82bb      	strh	r3, [r7, #20]
 80053d4:	e010      	b.n	80053f8 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80053d6:	2300      	movs	r3, #0
 80053d8:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80053da:	2300      	movs	r3, #0
 80053dc:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80053de:	89fb      	ldrh	r3, [r7, #14]
 80053e0:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80053e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da00      	bge.n	80053ec <BSP_LCD_DrawLine+0xf8>
 80053ea:	3301      	adds	r3, #1
 80053ec:	105b      	asrs	r3, r3, #1
 80053ee:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80053f0:	8a3b      	ldrh	r3, [r7, #16]
 80053f2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80053f4:	89fb      	ldrh	r3, [r7, #14]
 80053f6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80053f8:	2300      	movs	r3, #0
 80053fa:	827b      	strh	r3, [r7, #18]
 80053fc:	e037      	b.n	800546e <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80053fe:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8005400:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005402:	4b20      	ldr	r3, [pc, #128]	@ (8005484 <BSP_LCD_DrawLine+0x190>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4c20      	ldr	r4, [pc, #128]	@ (8005488 <BSP_LCD_DrawLine+0x194>)
 8005408:	4613      	mov	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4423      	add	r3, r4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	f000 f923 	bl	8005660 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800541a:	8b3a      	ldrh	r2, [r7, #24]
 800541c:	8afb      	ldrh	r3, [r7, #22]
 800541e:	4413      	add	r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8005424:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005428:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800542c:	429a      	cmp	r2, r3
 800542e:	db0e      	blt.n	800544e <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8005430:	8b3a      	ldrh	r2, [r7, #24]
 8005432:	8b7b      	ldrh	r3, [r7, #26]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800543a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800543c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800543e:	4413      	add	r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8005444:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005446:	8bfb      	ldrh	r3, [r7, #30]
 8005448:	4413      	add	r3, r2
 800544a:	b29b      	uxth	r3, r3
 800544c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800544e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005450:	8c3b      	ldrh	r3, [r7, #32]
 8005452:	4413      	add	r3, r2
 8005454:	b29b      	uxth	r3, r3
 8005456:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8005458:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800545a:	8bbb      	ldrh	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	b29b      	uxth	r3, r3
 8005460:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8005462:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005466:	b29b      	uxth	r3, r3
 8005468:	3301      	adds	r3, #1
 800546a:	b29b      	uxth	r3, r3
 800546c:	827b      	strh	r3, [r7, #18]
 800546e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005472:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005476:	429a      	cmp	r2, r3
 8005478:	ddc1      	ble.n	80053fe <BSP_LCD_DrawLine+0x10a>
  }
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	372c      	adds	r7, #44	@ 0x2c
 8005480:	46bd      	mov	sp, r7
 8005482:	bd90      	pop	{r4, r7, pc}
 8005484:	2000149c 	.word	0x2000149c
 8005488:	200014a0 	.word	0x200014a0

0800548c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800548c:	b590      	push	{r4, r7, lr}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	80fb      	strh	r3, [r7, #6]
 8005496:	460b      	mov	r3, r1
 8005498:	80bb      	strh	r3, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800549e:	887b      	ldrh	r3, [r7, #2]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	f1c3 0303 	rsb	r3, r3, #3
 80054a6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80054b0:	e0c7      	b.n	8005642 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	4413      	add	r3, r2
 80054ba:	b298      	uxth	r0, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	88ba      	ldrh	r2, [r7, #4]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	b299      	uxth	r1, r3
 80054c6:	4b64      	ldr	r3, [pc, #400]	@ (8005658 <BSP_LCD_DrawCircle+0x1cc>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4c64      	ldr	r4, [pc, #400]	@ (800565c <BSP_LCD_DrawCircle+0x1d0>)
 80054cc:	4613      	mov	r3, r2
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4423      	add	r3, r4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	f000 f8c1 	bl	8005660 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	b298      	uxth	r0, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	88ba      	ldrh	r2, [r7, #4]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	b299      	uxth	r1, r3
 80054f2:	4b59      	ldr	r3, [pc, #356]	@ (8005658 <BSP_LCD_DrawCircle+0x1cc>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4c59      	ldr	r4, [pc, #356]	@ (800565c <BSP_LCD_DrawCircle+0x1d0>)
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4423      	add	r3, r4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	f000 f8ab 	bl	8005660 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	b29a      	uxth	r2, r3
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	4413      	add	r3, r2
 8005512:	b298      	uxth	r0, r3
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	b29b      	uxth	r3, r3
 8005518:	88ba      	ldrh	r2, [r7, #4]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	b299      	uxth	r1, r3
 800551e:	4b4e      	ldr	r3, [pc, #312]	@ (8005658 <BSP_LCD_DrawCircle+0x1cc>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4c4e      	ldr	r4, [pc, #312]	@ (800565c <BSP_LCD_DrawCircle+0x1d0>)
 8005524:	4613      	mov	r3, r2
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4423      	add	r3, r4
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	f000 f895 	bl	8005660 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	b29b      	uxth	r3, r3
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	b298      	uxth	r0, r3
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	b29b      	uxth	r3, r3
 8005544:	88ba      	ldrh	r2, [r7, #4]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	b299      	uxth	r1, r3
 800554a:	4b43      	ldr	r3, [pc, #268]	@ (8005658 <BSP_LCD_DrawCircle+0x1cc>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4c43      	ldr	r4, [pc, #268]	@ (800565c <BSP_LCD_DrawCircle+0x1d0>)
 8005550:	4613      	mov	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4423      	add	r3, r4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	f000 f87f 	bl	8005660 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	b29a      	uxth	r2, r3
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	4413      	add	r3, r2
 800556a:	b298      	uxth	r0, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	b29a      	uxth	r2, r3
 8005570:	88bb      	ldrh	r3, [r7, #4]
 8005572:	4413      	add	r3, r2
 8005574:	b299      	uxth	r1, r3
 8005576:	4b38      	ldr	r3, [pc, #224]	@ (8005658 <BSP_LCD_DrawCircle+0x1cc>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4c38      	ldr	r4, [pc, #224]	@ (800565c <BSP_LCD_DrawCircle+0x1d0>)
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4423      	add	r3, r4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	f000 f869 	bl	8005660 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	b29b      	uxth	r3, r3
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	b298      	uxth	r0, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	b29a      	uxth	r2, r3
 800559c:	88bb      	ldrh	r3, [r7, #4]
 800559e:	4413      	add	r3, r2
 80055a0:	b299      	uxth	r1, r3
 80055a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005658 <BSP_LCD_DrawCircle+0x1cc>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4c2d      	ldr	r4, [pc, #180]	@ (800565c <BSP_LCD_DrawCircle+0x1d0>)
 80055a8:	4613      	mov	r3, r2
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4423      	add	r3, r4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f000 f853 	bl	8005660 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	b29a      	uxth	r2, r3
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	4413      	add	r3, r2
 80055c2:	b298      	uxth	r0, r3
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	88bb      	ldrh	r3, [r7, #4]
 80055ca:	4413      	add	r3, r2
 80055cc:	b299      	uxth	r1, r3
 80055ce:	4b22      	ldr	r3, [pc, #136]	@ (8005658 <BSP_LCD_DrawCircle+0x1cc>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4c22      	ldr	r4, [pc, #136]	@ (800565c <BSP_LCD_DrawCircle+0x1d0>)
 80055d4:	4613      	mov	r3, r2
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4423      	add	r3, r4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	f000 f83d 	bl	8005660 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	88fa      	ldrh	r2, [r7, #6]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	b298      	uxth	r0, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	88bb      	ldrh	r3, [r7, #4]
 80055f6:	4413      	add	r3, r2
 80055f8:	b299      	uxth	r1, r3
 80055fa:	4b17      	ldr	r3, [pc, #92]	@ (8005658 <BSP_LCD_DrawCircle+0x1cc>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4c17      	ldr	r4, [pc, #92]	@ (800565c <BSP_LCD_DrawCircle+0x1d0>)
 8005600:	4613      	mov	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4423      	add	r3, r4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	f000 f827 	bl	8005660 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da06      	bge.n	8005626 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	009a      	lsls	r2, r3, #2
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	3306      	adds	r3, #6
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e00a      	b.n	800563c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	009a      	lsls	r2, r3, #2
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	330a      	adds	r3, #10
 8005634:	617b      	str	r3, [r7, #20]
      current_y--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3b01      	subs	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	3301      	adds	r3, #1
 8005640:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	429a      	cmp	r2, r3
 8005648:	f67f af33 	bls.w	80054b2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	bf00      	nop
 8005658:	2000149c 	.word	0x2000149c
 800565c:	200014a0 	.word	0x200014a0

08005660 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005660:	b5b0      	push	{r4, r5, r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	603a      	str	r2, [r7, #0]
 800566a:	80fb      	strh	r3, [r7, #6]
 800566c:	460b      	mov	r3, r1
 800566e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005670:	4b1d      	ldr	r3, [pc, #116]	@ (80056e8 <BSP_LCD_DrawPixel+0x88>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1d      	ldr	r2, [pc, #116]	@ (80056ec <BSP_LCD_DrawPixel+0x8c>)
 8005676:	2134      	movs	r1, #52	@ 0x34
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	4413      	add	r3, r2
 800567e:	3348      	adds	r3, #72	@ 0x48
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d116      	bne.n	80056b4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8005686:	4b18      	ldr	r3, [pc, #96]	@ (80056e8 <BSP_LCD_DrawPixel+0x88>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <BSP_LCD_DrawPixel+0x8c>)
 800568c:	2134      	movs	r1, #52	@ 0x34
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	4413      	add	r3, r2
 8005694:	335c      	adds	r3, #92	@ 0x5c
 8005696:	681c      	ldr	r4, [r3, #0]
 8005698:	88bd      	ldrh	r5, [r7, #4]
 800569a:	f7ff fbb5 	bl	8004e08 <BSP_LCD_GetXSize>
 800569e:	4603      	mov	r3, r0
 80056a0:	fb03 f205 	mul.w	r2, r3, r5
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	4413      	add	r3, r2
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	4423      	add	r3, r4
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	b292      	uxth	r2, r2
 80056b0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80056b2:	e015      	b.n	80056e0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80056b4:	4b0c      	ldr	r3, [pc, #48]	@ (80056e8 <BSP_LCD_DrawPixel+0x88>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a0c      	ldr	r2, [pc, #48]	@ (80056ec <BSP_LCD_DrawPixel+0x8c>)
 80056ba:	2134      	movs	r1, #52	@ 0x34
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	4413      	add	r3, r2
 80056c2:	335c      	adds	r3, #92	@ 0x5c
 80056c4:	681c      	ldr	r4, [r3, #0]
 80056c6:	88bd      	ldrh	r5, [r7, #4]
 80056c8:	f7ff fb9e 	bl	8004e08 <BSP_LCD_GetXSize>
 80056cc:	4603      	mov	r3, r0
 80056ce:	fb03 f205 	mul.w	r2, r3, r5
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4423      	add	r3, r4
 80056da:	461a      	mov	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6013      	str	r3, [r2, #0]
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bdb0      	pop	{r4, r5, r7, pc}
 80056e8:	2000149c 	.word	0x2000149c
 80056ec:	200013b4 	.word	0x200013b4

080056f0 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80056f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f4:	b086      	sub	sp, #24
 80056f6:	af02      	add	r7, sp, #8
 80056f8:	4604      	mov	r4, r0
 80056fa:	4608      	mov	r0, r1
 80056fc:	4611      	mov	r1, r2
 80056fe:	461a      	mov	r2, r3
 8005700:	4623      	mov	r3, r4
 8005702:	80fb      	strh	r3, [r7, #6]
 8005704:	4603      	mov	r3, r0
 8005706:	80bb      	strh	r3, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	807b      	strh	r3, [r7, #2]
 800570c:	4613      	mov	r3, r2
 800570e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005714:	4b30      	ldr	r3, [pc, #192]	@ (80057d8 <BSP_LCD_FillRect+0xe8>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4930      	ldr	r1, [pc, #192]	@ (80057dc <BSP_LCD_FillRect+0xec>)
 800571a:	4613      	mov	r3, r2
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fc06 	bl	8004f38 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800572c:	4b2a      	ldr	r3, [pc, #168]	@ (80057d8 <BSP_LCD_FillRect+0xe8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <BSP_LCD_FillRect+0xf0>)
 8005732:	2134      	movs	r1, #52	@ 0x34
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	4413      	add	r3, r2
 800573a:	3348      	adds	r3, #72	@ 0x48
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d114      	bne.n	800576c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005742:	4b25      	ldr	r3, [pc, #148]	@ (80057d8 <BSP_LCD_FillRect+0xe8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a26      	ldr	r2, [pc, #152]	@ (80057e0 <BSP_LCD_FillRect+0xf0>)
 8005748:	2134      	movs	r1, #52	@ 0x34
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	335c      	adds	r3, #92	@ 0x5c
 8005752:	681c      	ldr	r4, [r3, #0]
 8005754:	f7ff fb58 	bl	8004e08 <BSP_LCD_GetXSize>
 8005758:	4602      	mov	r2, r0
 800575a:	88bb      	ldrh	r3, [r7, #4]
 800575c:	fb03 f202 	mul.w	r2, r3, r2
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	4413      	add	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4423      	add	r3, r4
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	e013      	b.n	8005794 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800576c:	4b1a      	ldr	r3, [pc, #104]	@ (80057d8 <BSP_LCD_FillRect+0xe8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1b      	ldr	r2, [pc, #108]	@ (80057e0 <BSP_LCD_FillRect+0xf0>)
 8005772:	2134      	movs	r1, #52	@ 0x34
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	4413      	add	r3, r2
 800577a:	335c      	adds	r3, #92	@ 0x5c
 800577c:	681c      	ldr	r4, [r3, #0]
 800577e:	f7ff fb43 	bl	8004e08 <BSP_LCD_GetXSize>
 8005782:	4602      	mov	r2, r0
 8005784:	88bb      	ldrh	r3, [r7, #4]
 8005786:	fb03 f202 	mul.w	r2, r3, r2
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4423      	add	r3, r4
 8005792:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8005794:	4b10      	ldr	r3, [pc, #64]	@ (80057d8 <BSP_LCD_FillRect+0xe8>)
 8005796:	681c      	ldr	r4, [r3, #0]
 8005798:	68fd      	ldr	r5, [r7, #12]
 800579a:	887e      	ldrh	r6, [r7, #2]
 800579c:	f8b7 8000 	ldrh.w	r8, [r7]
 80057a0:	f7ff fb32 	bl	8004e08 <BSP_LCD_GetXSize>
 80057a4:	4602      	mov	r2, r0
 80057a6:	887b      	ldrh	r3, [r7, #2]
 80057a8:	1ad1      	subs	r1, r2, r3
 80057aa:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <BSP_LCD_FillRect+0xe8>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	480b      	ldr	r0, [pc, #44]	@ (80057dc <BSP_LCD_FillRect+0xec>)
 80057b0:	4613      	mov	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4403      	add	r3, r0
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	9100      	str	r1, [sp, #0]
 80057c0:	4643      	mov	r3, r8
 80057c2:	4632      	mov	r2, r6
 80057c4:	4629      	mov	r1, r5
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 fc1c 	bl	8006004 <LL_FillBuffer>
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d6:	bf00      	nop
 80057d8:	2000149c 	.word	0x2000149c
 80057dc:	200014a0 	.word	0x200014a0
 80057e0:	200013b4 	.word	0x200013b4

080057e4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	80fb      	strh	r3, [r7, #6]
 80057ee:	460b      	mov	r3, r1
 80057f0:	80bb      	strh	r3, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80057f6:	887b      	ldrh	r3, [r7, #2]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	f1c3 0303 	rsb	r3, r3, #3
 80057fe:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005808:	4b44      	ldr	r3, [pc, #272]	@ (800591c <BSP_LCD_FillCircle+0x138>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4944      	ldr	r1, [pc, #272]	@ (8005920 <BSP_LCD_FillCircle+0x13c>)
 800580e:	4613      	mov	r3, r2
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fb8c 	bl	8004f38 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8005820:	e061      	b.n	80058e6 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d021      	beq.n	800586c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	b29b      	uxth	r3, r3
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	b298      	uxth	r0, r3
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	b29a      	uxth	r2, r3
 8005836:	88bb      	ldrh	r3, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	b299      	uxth	r1, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	b29b      	uxth	r3, r3
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	b29b      	uxth	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	f7ff fcf7 	bl	8005238 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	b29b      	uxth	r3, r3
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	b298      	uxth	r0, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	b29b      	uxth	r3, r3
 8005858:	88ba      	ldrh	r2, [r7, #4]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	b299      	uxth	r1, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	b29b      	uxth	r3, r3
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	b29b      	uxth	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	f7ff fce6 	bl	8005238 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d021      	beq.n	80058b6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	b29b      	uxth	r3, r3
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	b298      	uxth	r0, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	b29b      	uxth	r3, r3
 8005880:	88ba      	ldrh	r2, [r7, #4]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	b299      	uxth	r1, r3
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	b29b      	uxth	r3, r3
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	b29b      	uxth	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	f7ff fcd2 	bl	8005238 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	b29b      	uxth	r3, r3
 8005898:	88fa      	ldrh	r2, [r7, #6]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	b298      	uxth	r0, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	88bb      	ldrh	r3, [r7, #4]
 80058a4:	4413      	add	r3, r2
 80058a6:	b299      	uxth	r1, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	f7ff fcc1 	bl	8005238 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da06      	bge.n	80058ca <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	009a      	lsls	r2, r3, #2
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	4413      	add	r3, r2
 80058c4:	3306      	adds	r3, #6
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e00a      	b.n	80058e0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	009a      	lsls	r2, r3, #2
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4413      	add	r3, r2
 80058d6:	330a      	adds	r3, #10
 80058d8:	617b      	str	r3, [r7, #20]
      current_y--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3b01      	subs	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3301      	adds	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d999      	bls.n	8005822 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80058ee:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <BSP_LCD_FillCircle+0x138>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	490b      	ldr	r1, [pc, #44]	@ (8005920 <BSP_LCD_FillCircle+0x13c>)
 80058f4:	4613      	mov	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fb19 	bl	8004f38 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8005906:	887a      	ldrh	r2, [r7, #2]
 8005908:	88b9      	ldrh	r1, [r7, #4]
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff fdbd 	bl	800548c <BSP_LCD_DrawCircle>
}
 8005912:	bf00      	nop
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	2000149c 	.word	0x2000149c
 8005920:	200014a0 	.word	0x200014a0

08005924 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8005924:	b5b0      	push	{r4, r5, r7, lr}
 8005926:	b08c      	sub	sp, #48	@ 0x30
 8005928:	af02      	add	r7, sp, #8
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	833b      	strh	r3, [r7, #24]
 8005934:	2300      	movs	r3, #0
 8005936:	82fb      	strh	r3, [r7, #22]
 8005938:	2300      	movs	r3, #0
 800593a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800593c:	2300      	movs	r3, #0
 800593e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005940:	2300      	movs	r3, #0
 8005942:	82bb      	strh	r3, [r7, #20]
 8005944:	2300      	movs	r3, #0
 8005946:	827b      	strh	r3, [r7, #18]
 8005948:	2300      	movs	r3, #0
 800594a:	823b      	strh	r3, [r7, #16]
 800594c:	2300      	movs	r3, #0
 800594e:	81fb      	strh	r3, [r7, #14]
 8005950:	2300      	movs	r3, #0
 8005952:	81bb      	strh	r3, [r7, #12]
 8005954:	2300      	movs	r3, #0
 8005956:	817b      	strh	r3, [r7, #10]
 8005958:	2300      	movs	r3, #0
 800595a:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	843b      	strh	r3, [r7, #32]
 8005960:	2300      	movs	r3, #0
 8005962:	83fb      	strh	r3, [r7, #30]
 8005964:	2300      	movs	r3, #0
 8005966:	83bb      	strh	r3, [r7, #28]
 8005968:	2300      	movs	r3, #0
 800596a:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005972:	83fb      	strh	r3, [r7, #30]
 8005974:	8bfb      	ldrh	r3, [r7, #30]
 8005976:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800597e:	837b      	strh	r3, [r7, #26]
 8005980:	8b7b      	ldrh	r3, [r7, #26]
 8005982:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 8005984:	2301      	movs	r3, #1
 8005986:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005988:	e02f      	b.n	80059ea <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 800598a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4413      	add	r3, r2
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 8005998:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800599c:	8c3b      	ldrh	r3, [r7, #32]
 800599e:	429a      	cmp	r2, r3
 80059a0:	da01      	bge.n	80059a6 <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80059a2:	89bb      	ldrh	r3, [r7, #12]
 80059a4:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80059a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80059aa:	8bfb      	ldrh	r3, [r7, #30]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	dd01      	ble.n	80059b4 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 80059b0:	89bb      	ldrh	r3, [r7, #12]
 80059b2:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80059b4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	885b      	ldrh	r3, [r3, #2]
 80059c0:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 80059c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80059c6:	8bbb      	ldrh	r3, [r7, #28]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	da01      	bge.n	80059d0 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 80059cc:	897b      	ldrh	r3, [r7, #10]
 80059ce:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 80059d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80059d4:	8b7b      	ldrh	r3, [r7, #26]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	dd01      	ble.n	80059de <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 80059da:	897b      	ldrh	r3, [r7, #10]
 80059dc:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 80059de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3301      	adds	r3, #1
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80059ea:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80059ee:	887b      	ldrh	r3, [r7, #2]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	dbca      	blt.n	800598a <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 80059f4:	887b      	ldrh	r3, [r7, #2]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d974      	bls.n	8005ae4 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 80059fa:	8c3a      	ldrh	r2, [r7, #32]
 80059fc:	8bfb      	ldrh	r3, [r7, #30]
 80059fe:	4413      	add	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da00      	bge.n	8005a06 <BSP_LCD_FillPolygon+0xe2>
 8005a04:	3301      	adds	r3, #1
 8005a06:	105b      	asrs	r3, r3, #1
 8005a08:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 8005a0a:	8b7a      	ldrh	r2, [r7, #26]
 8005a0c:	8bbb      	ldrh	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da00      	bge.n	8005a16 <BSP_LCD_FillPolygon+0xf2>
 8005a14:	3301      	adds	r3, #1
 8005a16:	105b      	asrs	r3, r3, #1
 8005a18:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	885b      	ldrh	r3, [r3, #2]
 8005a24:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8005a26:	e032      	b.n	8005a8e <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	885b      	ldrh	r3, [r3, #2]
 8005a32:	82fb      	strh	r3, [r7, #22]
    Points++;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    Y2 = Points->Y;    
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	885b      	ldrh	r3, [r3, #2]
 8005a44:	84bb      	strh	r3, [r7, #36]	@ 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8005a46:	8b38      	ldrh	r0, [r7, #24]
 8005a48:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8005a4a:	8abc      	ldrh	r4, [r7, #20]
 8005a4c:	8afd      	ldrh	r5, [r7, #22]
 8005a4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a50:	8a7a      	ldrh	r2, [r7, #18]
 8005a52:	9201      	str	r2, [sp, #4]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	462b      	mov	r3, r5
 8005a58:	4622      	mov	r2, r4
 8005a5a:	f000 fa13 	bl	8005e84 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8005a5e:	8b38      	ldrh	r0, [r7, #24]
 8005a60:	8ab9      	ldrh	r1, [r7, #20]
 8005a62:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8005a64:	8afd      	ldrh	r5, [r7, #22]
 8005a66:	8a7b      	ldrh	r3, [r7, #18]
 8005a68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a6a:	9201      	str	r2, [sp, #4]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	462b      	mov	r3, r5
 8005a70:	4622      	mov	r2, r4
 8005a72:	f000 fa07 	bl	8005e84 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8005a76:	8ab8      	ldrh	r0, [r7, #20]
 8005a78:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8005a7a:	8b3c      	ldrh	r4, [r7, #24]
 8005a7c:	8a7d      	ldrh	r5, [r7, #18]
 8005a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a80:	8afa      	ldrh	r2, [r7, #22]
 8005a82:	9201      	str	r2, [sp, #4]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	462b      	mov	r3, r5
 8005a88:	4622      	mov	r2, r4
 8005a8a:	f000 f9fb 	bl	8005e84 <FillTriangle>
  while(--PointCount)
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	807b      	strh	r3, [r7, #2]
 8005a94:	887b      	ldrh	r3, [r7, #2]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1c6      	bne.n	8005a28 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8005a9a:	8a38      	ldrh	r0, [r7, #16]
 8005a9c:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8005a9e:	8abc      	ldrh	r4, [r7, #20]
 8005aa0:	89fd      	ldrh	r5, [r7, #14]
 8005aa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aa4:	8a7a      	ldrh	r2, [r7, #18]
 8005aa6:	9201      	str	r2, [sp, #4]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	462b      	mov	r3, r5
 8005aac:	4622      	mov	r2, r4
 8005aae:	f000 f9e9 	bl	8005e84 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8005ab2:	8a38      	ldrh	r0, [r7, #16]
 8005ab4:	8ab9      	ldrh	r1, [r7, #20]
 8005ab6:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8005ab8:	89fd      	ldrh	r5, [r7, #14]
 8005aba:	8a7b      	ldrh	r3, [r7, #18]
 8005abc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005abe:	9201      	str	r2, [sp, #4]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	f000 f9dd 	bl	8005e84 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8005aca:	8ab8      	ldrh	r0, [r7, #20]
 8005acc:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8005ace:	8a3c      	ldrh	r4, [r7, #16]
 8005ad0:	8a7d      	ldrh	r5, [r7, #18]
 8005ad2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ad4:	89fa      	ldrh	r2, [r7, #14]
 8005ad6:	9201      	str	r2, [sp, #4]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	462b      	mov	r3, r5
 8005adc:	4622      	mov	r2, r4
 8005ade:	f000 f9d1 	bl	8005e84 <FillTriangle>
 8005ae2:	e000      	b.n	8005ae6 <BSP_LCD_FillPolygon+0x1c2>
    return;
 8005ae4:	bf00      	nop
}
 8005ae6:	3728      	adds	r7, #40	@ 0x28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bdb0      	pop	{r4, r5, r7, pc}

08005aec <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005af0:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <BSP_LCD_DisplayOn+0x30>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <BSP_LCD_DisplayOn+0x30>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005b00:	2201      	movs	r2, #1
 8005b02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b06:	4806      	ldr	r0, [pc, #24]	@ (8005b20 <BSP_LCD_DisplayOn+0x34>)
 8005b08:	f003 fa58 	bl	8008fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	2108      	movs	r1, #8
 8005b10:	4804      	ldr	r0, [pc, #16]	@ (8005b24 <BSP_LCD_DisplayOn+0x38>)
 8005b12:	f003 fa53 	bl	8008fbc <HAL_GPIO_WritePin>
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200013b4 	.word	0x200013b4
 8005b20:	40022000 	.word	0x40022000
 8005b24:	40022800 	.word	0x40022800

08005b28 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b090      	sub	sp, #64	@ 0x40
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005b32:	4b64      	ldr	r3, [pc, #400]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b36:	4a63      	ldr	r2, [pc, #396]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b3e:	4b61      	ldr	r3, [pc, #388]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b56:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b62:	4b58      	ldr	r3, [pc, #352]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b66:	4a57      	ldr	r2, [pc, #348]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b68:	f043 0310 	orr.w	r3, r3, #16
 8005b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b6e:	4b55      	ldr	r3, [pc, #340]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	623b      	str	r3, [r7, #32]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005b7a:	4b52      	ldr	r3, [pc, #328]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7e:	4a51      	ldr	r2, [pc, #324]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b86:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005b92:	4b4c      	ldr	r3, [pc, #304]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b96:	4a4b      	ldr	r2, [pc, #300]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b9e:	4b49      	ldr	r3, [pc, #292]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005baa:	4b46      	ldr	r3, [pc, #280]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bae:	4a45      	ldr	r2, [pc, #276]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bb6:	4b43      	ldr	r3, [pc, #268]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005bc2:	4b40      	ldr	r3, [pc, #256]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bce:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8005bda:	4b3a      	ldr	r3, [pc, #232]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	4a39      	ldr	r2, [pc, #228]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005be6:	4b37      	ldr	r3, [pc, #220]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005bf2:	4b34      	ldr	r3, [pc, #208]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf6:	4a33      	ldr	r2, [pc, #204]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005bf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bfe:	4b31      	ldr	r3, [pc, #196]	@ (8005cc4 <BSP_LCD_MspInit+0x19c>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8005c0a:	2310      	movs	r3, #16
 8005c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005c0e:	2302      	movs	r3, #2
 8005c10:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005c16:	2302      	movs	r3, #2
 8005c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005c1a:	230e      	movs	r3, #14
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005c1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c22:	4619      	mov	r1, r3
 8005c24:	4828      	ldr	r0, [pc, #160]	@ (8005cc8 <BSP_LCD_MspInit+0x1a0>)
 8005c26:	f002 fef9 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005c30:	2302      	movs	r3, #2
 8005c32:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005c34:	2309      	movs	r3, #9
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005c38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4823      	ldr	r0, [pc, #140]	@ (8005ccc <BSP_LCD_MspInit+0x1a4>)
 8005c40:	f002 feec 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005c44:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005c4e:	230e      	movs	r3, #14
 8005c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005c52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c56:	4619      	mov	r1, r3
 8005c58:	481d      	ldr	r0, [pc, #116]	@ (8005cd0 <BSP_LCD_MspInit+0x1a8>)
 8005c5a:	f002 fedf 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8005c5e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8005c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005c64:	2302      	movs	r3, #2
 8005c66:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005c68:	230e      	movs	r3, #14
 8005c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8005c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c70:	4619      	mov	r1, r3
 8005c72:	4818      	ldr	r0, [pc, #96]	@ (8005cd4 <BSP_LCD_MspInit+0x1ac>)
 8005c74:	f002 fed2 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8005c78:	23f7      	movs	r3, #247	@ 0xf7
 8005c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8005c80:	230e      	movs	r3, #14
 8005c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8005c84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4813      	ldr	r0, [pc, #76]	@ (8005cd8 <BSP_LCD_MspInit+0x1b0>)
 8005c8c:	f002 fec6 	bl	8008a1c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8005c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005c96:	2301      	movs	r3, #1
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8005c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	480b      	ldr	r0, [pc, #44]	@ (8005cd0 <BSP_LCD_MspInit+0x1a8>)
 8005ca2:	f002 febb 	bl	8008a1c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8005caa:	2301      	movs	r3, #1
 8005cac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005cae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4808      	ldr	r0, [pc, #32]	@ (8005cd8 <BSP_LCD_MspInit+0x1b0>)
 8005cb6:	f002 feb1 	bl	8008a1c <HAL_GPIO_Init>
}
 8005cba:	bf00      	nop
 8005cbc:	3740      	adds	r7, #64	@ 0x40
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40021800 	.word	0x40021800
 8005cd0:	40022000 	.word	0x40022000
 8005cd4:	40022400 	.word	0x40022400
 8005cd8:	40022800 	.word	0x40022800

08005cdc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d10 <BSP_LCD_ClockConfig+0x34>)
 8005ce8:	2208      	movs	r2, #8
 8005cea:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005cec:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <BSP_LCD_ClockConfig+0x34>)
 8005cee:	22c0      	movs	r2, #192	@ 0xc0
 8005cf0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005cf2:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <BSP_LCD_ClockConfig+0x34>)
 8005cf4:	2205      	movs	r2, #5
 8005cf6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005cf8:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <BSP_LCD_ClockConfig+0x34>)
 8005cfa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005d00:	4803      	ldr	r0, [pc, #12]	@ (8005d10 <BSP_LCD_ClockConfig+0x34>)
 8005d02:	f005 f813 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	200014b8 	.word	0x200014b8

08005d14 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	603a      	str	r2, [r7, #0]
 8005d1e:	80fb      	strh	r3, [r7, #6]
 8005d20:	460b      	mov	r3, r1
 8005d22:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005d2c:	4b53      	ldr	r3, [pc, #332]	@ (8005e7c <DrawChar+0x168>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	4953      	ldr	r1, [pc, #332]	@ (8005e80 <DrawChar+0x16c>)
 8005d32:	4613      	mov	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	88db      	ldrh	r3, [r3, #6]
 8005d42:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005d44:	4b4d      	ldr	r3, [pc, #308]	@ (8005e7c <DrawChar+0x168>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	494d      	ldr	r1, [pc, #308]	@ (8005e80 <DrawChar+0x16c>)
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3308      	adds	r3, #8
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	889b      	ldrh	r3, [r3, #4]
 8005d5a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8005d5c:	8a3b      	ldrh	r3, [r7, #16]
 8005d5e:	3307      	adds	r3, #7
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	da00      	bge.n	8005d66 <DrawChar+0x52>
 8005d64:	3307      	adds	r3, #7
 8005d66:	10db      	asrs	r3, r3, #3
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	8a3b      	ldrh	r3, [r7, #16]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8005d76:	2300      	movs	r3, #0
 8005d78:	61fb      	str	r3, [r7, #28]
 8005d7a:	e076      	b.n	8005e6a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8005d7c:	8a3b      	ldrh	r3, [r7, #16]
 8005d7e:	3307      	adds	r3, #7
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	da00      	bge.n	8005d86 <DrawChar+0x72>
 8005d84:	3307      	adds	r3, #7
 8005d86:	10db      	asrs	r3, r3, #3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	4413      	add	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8005d96:	8a3b      	ldrh	r3, [r7, #16]
 8005d98:	3307      	adds	r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da00      	bge.n	8005da0 <DrawChar+0x8c>
 8005d9e:	3307      	adds	r3, #7
 8005da0:	10db      	asrs	r3, r3, #3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d002      	beq.n	8005dac <DrawChar+0x98>
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d004      	beq.n	8005db4 <DrawChar+0xa0>
 8005daa:	e00c      	b.n	8005dc6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]
      break;
 8005db2:	e016      	b.n	8005de2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	3201      	adds	r2, #1
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
      break;
 8005dc4:	e00d      	b.n	8005de2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	041a      	lsls	r2, r3, #16
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	3202      	adds	r2, #2
 8005dda:	7812      	ldrb	r2, [r2, #0]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
      break;
 8005de0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	e036      	b.n	8005e56 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005de8:	8a3a      	ldrh	r2, [r7, #16]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	1ad2      	subs	r2, r2, r3
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	4413      	add	r3, r2
 8005df2:	3b01      	subs	r3, #1
 8005df4:	2201      	movs	r2, #1
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d012      	beq.n	8005e2a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	b298      	uxth	r0, r3
 8005e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e7c <DrawChar+0x168>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	491b      	ldr	r1, [pc, #108]	@ (8005e80 <DrawChar+0x16c>)
 8005e14:	4613      	mov	r3, r2
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	88bb      	ldrh	r3, [r7, #4]
 8005e22:	4619      	mov	r1, r3
 8005e24:	f7ff fc1c 	bl	8005660 <BSP_LCD_DrawPixel>
 8005e28:	e012      	b.n	8005e50 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	4413      	add	r3, r2
 8005e32:	b298      	uxth	r0, r3
 8005e34:	4b11      	ldr	r3, [pc, #68]	@ (8005e7c <DrawChar+0x168>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4911      	ldr	r1, [pc, #68]	@ (8005e80 <DrawChar+0x16c>)
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	3304      	adds	r3, #4
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	88bb      	ldrh	r3, [r7, #4]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f7ff fc08 	bl	8005660 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	8a3b      	ldrh	r3, [r7, #16]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d3c4      	bcc.n	8005de8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8005e5e:	88bb      	ldrh	r3, [r7, #4]
 8005e60:	3301      	adds	r3, #1
 8005e62:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	3301      	adds	r3, #1
 8005e68:	61fb      	str	r3, [r7, #28]
 8005e6a:	8a7b      	ldrh	r3, [r7, #18]
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d384      	bcc.n	8005d7c <DrawChar+0x68>
  }
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	3720      	adds	r7, #32
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	2000149c 	.word	0x2000149c
 8005e80:	200014a0 	.word	0x200014a0

08005e84 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8005e84:	b590      	push	{r4, r7, lr}
 8005e86:	b08b      	sub	sp, #44	@ 0x2c
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	4623      	mov	r3, r4
 8005e94:	80fb      	strh	r3, [r7, #6]
 8005e96:	4603      	mov	r3, r0
 8005e98:	80bb      	strh	r3, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	807b      	strh	r3, [r7, #2]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	823b      	strh	r3, [r7, #16]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	81fb      	strh	r3, [r7, #14]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005eae:	2300      	movs	r3, #0
 8005eb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 8005eba:	2300      	movs	r3, #0
 8005ebc:	83fb      	strh	r3, [r7, #30]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	83bb      	strh	r3, [r7, #28]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	837b      	strh	r3, [r7, #26]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	833b      	strh	r3, [r7, #24]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	82fb      	strh	r3, [r7, #22]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8005ed6:	88ba      	ldrh	r2, [r7, #4]
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bfb8      	it	lt
 8005ee0:	425b      	neglt	r3, r3
 8005ee2:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8005ee4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8005ee6:	883b      	ldrh	r3, [r7, #0]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	bfb8      	it	lt
 8005eee:	425b      	neglt	r3, r3
 8005ef0:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = y1;                       /* Start y off at the first pixel */
 8005ef6:	883b      	ldrh	r3, [r7, #0]
 8005ef8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8005efa:	88ba      	ldrh	r2, [r7, #4]
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d304      	bcc.n	8005f0c <FillTriangle+0x88>
  {
    xinc1 = 1;
 8005f02:	2301      	movs	r3, #1
 8005f04:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8005f06:	2301      	movs	r3, #1
 8005f08:	843b      	strh	r3, [r7, #32]
 8005f0a:	e005      	b.n	8005f18 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8005f0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f10:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8005f12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f16:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8005f18:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8005f1a:	883b      	ldrh	r3, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d304      	bcc.n	8005f2a <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8005f20:	2301      	movs	r3, #1
 8005f22:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8005f24:	2301      	movs	r3, #1
 8005f26:	83bb      	strh	r3, [r7, #28]
 8005f28:	e005      	b.n	8005f36 <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8005f2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f2e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8005f30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f34:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8005f36:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	db11      	blt.n	8005f66 <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8005f42:	2300      	movs	r3, #0
 8005f44:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8005f46:	2300      	movs	r3, #0
 8005f48:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8005f4a:	8a3b      	ldrh	r3, [r7, #16]
 8005f4c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8005f4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	da00      	bge.n	8005f58 <FillTriangle+0xd4>
 8005f56:	3301      	adds	r3, #1
 8005f58:	105b      	asrs	r3, r3, #1
 8005f5a:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8005f5c:	89fb      	ldrh	r3, [r7, #14]
 8005f5e:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8005f60:	8a3b      	ldrh	r3, [r7, #16]
 8005f62:	82bb      	strh	r3, [r7, #20]
 8005f64:	e010      	b.n	8005f88 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8005f66:	2300      	movs	r3, #0
 8005f68:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8005f6e:	89fb      	ldrh	r3, [r7, #14]
 8005f70:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8005f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	da00      	bge.n	8005f7c <FillTriangle+0xf8>
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	105b      	asrs	r3, r3, #1
 8005f7e:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8005f80:	8a3b      	ldrh	r3, [r7, #16]
 8005f82:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	827b      	strh	r3, [r7, #18]
 8005f8c:	e02f      	b.n	8005fee <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 8005f8e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8005f90:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8005f92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005f94:	887a      	ldrh	r2, [r7, #2]
 8005f96:	f7ff f9ad 	bl	80052f4 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 8005f9a:	8b3a      	ldrh	r2, [r7, #24]
 8005f9c:	8afb      	ldrh	r3, [r7, #22]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8005fa4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005fa8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	db0e      	blt.n	8005fce <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8005fb0:	8b3a      	ldrh	r2, [r7, #24]
 8005fb2:	8b7b      	ldrh	r3, [r7, #26]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8005fba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005fbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fbe:	4413      	add	r3, r2
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;               /* Change the y as appropriate */
 8005fc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005fc6:	8bfb      	ldrh	r3, [r7, #30]
 8005fc8:	4413      	add	r3, r2
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8005fce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005fd0:	8c3b      	ldrh	r3, [r7, #32]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8005fd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005fda:	8bbb      	ldrh	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8005fe2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3301      	adds	r3, #1
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	827b      	strh	r3, [r7, #18]
 8005fee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005ff2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	ddc9      	ble.n	8005f8e <FillTriangle+0x10a>
  } 
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	372c      	adds	r7, #44	@ 0x2c
 8006000:	46bd      	mov	sp, r7
 8006002:	bd90      	pop	{r4, r7, pc}

08006004 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006012:	4b1e      	ldr	r3, [pc, #120]	@ (800608c <LL_FillBuffer+0x88>)
 8006014:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006018:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800601a:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <LL_FillBuffer+0x8c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a1d      	ldr	r2, [pc, #116]	@ (8006094 <LL_FillBuffer+0x90>)
 8006020:	2134      	movs	r1, #52	@ 0x34
 8006022:	fb01 f303 	mul.w	r3, r1, r3
 8006026:	4413      	add	r3, r2
 8006028:	3348      	adds	r3, #72	@ 0x48
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d103      	bne.n	8006038 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006030:	4b16      	ldr	r3, [pc, #88]	@ (800608c <LL_FillBuffer+0x88>)
 8006032:	2202      	movs	r2, #2
 8006034:	609a      	str	r2, [r3, #8]
 8006036:	e002      	b.n	800603e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006038:	4b14      	ldr	r3, [pc, #80]	@ (800608c <LL_FillBuffer+0x88>)
 800603a:	2200      	movs	r2, #0
 800603c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800603e:	4a13      	ldr	r2, [pc, #76]	@ (800608c <LL_FillBuffer+0x88>)
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8006044:	4b11      	ldr	r3, [pc, #68]	@ (800608c <LL_FillBuffer+0x88>)
 8006046:	4a14      	ldr	r2, [pc, #80]	@ (8006098 <LL_FillBuffer+0x94>)
 8006048:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800604a:	4810      	ldr	r0, [pc, #64]	@ (800608c <LL_FillBuffer+0x88>)
 800604c:	f002 f94a 	bl	80082e4 <HAL_DMA2D_Init>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d115      	bne.n	8006082 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006056:	68f9      	ldr	r1, [r7, #12]
 8006058:	480c      	ldr	r0, [pc, #48]	@ (800608c <LL_FillBuffer+0x88>)
 800605a:	f002 fbb1 	bl	80087c0 <HAL_DMA2D_ConfigLayer>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10e      	bne.n	8006082 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69f9      	ldr	r1, [r7, #28]
 800606e:	4807      	ldr	r0, [pc, #28]	@ (800608c <LL_FillBuffer+0x88>)
 8006070:	f002 f982 	bl	8008378 <HAL_DMA2D_Start>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d103      	bne.n	8006082 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800607a:	210a      	movs	r1, #10
 800607c:	4803      	ldr	r0, [pc, #12]	@ (800608c <LL_FillBuffer+0x88>)
 800607e:	f002 f9a6 	bl	80083ce <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	2000145c 	.word	0x2000145c
 8006090:	2000149c 	.word	0x2000149c
 8006094:	200013b4 	.word	0x200013b4
 8006098:	4002b000 	.word	0x4002b000

0800609c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80060a0:	4b29      	ldr	r3, [pc, #164]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060a2:	4a2a      	ldr	r2, [pc, #168]	@ (800614c <BSP_SDRAM_Init+0xb0>)
 80060a4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80060a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006150 <BSP_SDRAM_Init+0xb4>)
 80060a8:	2202      	movs	r2, #2
 80060aa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80060ac:	4b28      	ldr	r3, [pc, #160]	@ (8006150 <BSP_SDRAM_Init+0xb4>)
 80060ae:	2207      	movs	r2, #7
 80060b0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80060b2:	4b27      	ldr	r3, [pc, #156]	@ (8006150 <BSP_SDRAM_Init+0xb4>)
 80060b4:	2204      	movs	r2, #4
 80060b6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80060b8:	4b25      	ldr	r3, [pc, #148]	@ (8006150 <BSP_SDRAM_Init+0xb4>)
 80060ba:	2207      	movs	r2, #7
 80060bc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80060be:	4b24      	ldr	r3, [pc, #144]	@ (8006150 <BSP_SDRAM_Init+0xb4>)
 80060c0:	2202      	movs	r2, #2
 80060c2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80060c4:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <BSP_SDRAM_Init+0xb4>)
 80060c6:	2202      	movs	r2, #2
 80060c8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80060ca:	4b21      	ldr	r3, [pc, #132]	@ (8006150 <BSP_SDRAM_Init+0xb4>)
 80060cc:	2202      	movs	r2, #2
 80060ce:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80060d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80060d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80060dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060de:	2204      	movs	r2, #4
 80060e0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80060e2:	4b19      	ldr	r3, [pc, #100]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060e4:	2210      	movs	r2, #16
 80060e6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80060e8:	4b17      	ldr	r3, [pc, #92]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060ea:	2240      	movs	r2, #64	@ 0x40
 80060ec:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80060ee:	4b16      	ldr	r3, [pc, #88]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060f4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80060f6:	4b14      	ldr	r3, [pc, #80]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80060fc:	4b12      	ldr	r3, [pc, #72]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 80060fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006102:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006104:	4b10      	ldr	r3, [pc, #64]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 8006106:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800610a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800610c:	4b0e      	ldr	r3, [pc, #56]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 800610e:	2200      	movs	r2, #0
 8006110:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006112:	2100      	movs	r1, #0
 8006114:	480c      	ldr	r0, [pc, #48]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 8006116:	f000 f87f 	bl	8006218 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800611a:	490d      	ldr	r1, [pc, #52]	@ (8006150 <BSP_SDRAM_Init+0xb4>)
 800611c:	480a      	ldr	r0, [pc, #40]	@ (8006148 <BSP_SDRAM_Init+0xac>)
 800611e:	f005 fdc7 	bl	800bcb0 <HAL_SDRAM_Init>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006128:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <BSP_SDRAM_Init+0xb8>)
 800612a:	2201      	movs	r2, #1
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	e002      	b.n	8006136 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006130:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <BSP_SDRAM_Init+0xb8>)
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006136:	f240 6003 	movw	r0, #1539	@ 0x603
 800613a:	f000 f80d 	bl	8006158 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800613e:	4b05      	ldr	r3, [pc, #20]	@ (8006154 <BSP_SDRAM_Init+0xb8>)
 8006140:	781b      	ldrb	r3, [r3, #0]
}
 8006142:	4618      	mov	r0, r3
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2000153c 	.word	0x2000153c
 800614c:	a0000140 	.word	0xa0000140
 8006150:	20001570 	.word	0x20001570
 8006154:	20000074 	.word	0x20000074

08006158 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006164:	4b2a      	ldr	r3, [pc, #168]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800616a:	4b29      	ldr	r3, [pc, #164]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800616c:	2210      	movs	r2, #16
 800616e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006170:	4b27      	ldr	r3, [pc, #156]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006172:	2201      	movs	r2, #1
 8006174:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006176:	4b26      	ldr	r3, [pc, #152]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006178:	2200      	movs	r2, #0
 800617a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800617c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006180:	4923      	ldr	r1, [pc, #140]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006182:	4824      	ldr	r0, [pc, #144]	@ (8006214 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006184:	f005 fdc8 	bl	800bd18 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006188:	2001      	movs	r0, #1
 800618a:	f001 f903 	bl	8007394 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800618e:	4b20      	ldr	r3, [pc, #128]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006190:	2202      	movs	r2, #2
 8006192:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006194:	4b1e      	ldr	r3, [pc, #120]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006196:	2210      	movs	r2, #16
 8006198:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800619a:	4b1d      	ldr	r3, [pc, #116]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800619c:	2201      	movs	r2, #1
 800619e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80061a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80061a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061aa:	4919      	ldr	r1, [pc, #100]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061ac:	4819      	ldr	r0, [pc, #100]	@ (8006214 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80061ae:	f005 fdb3 	bl	800bd18 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80061b2:	4b17      	ldr	r3, [pc, #92]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061b4:	2203      	movs	r2, #3
 80061b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80061b8:	4b15      	ldr	r3, [pc, #84]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061ba:	2210      	movs	r2, #16
 80061bc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80061be:	4b14      	ldr	r3, [pc, #80]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061c0:	2208      	movs	r2, #8
 80061c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80061c4:	4b12      	ldr	r3, [pc, #72]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80061ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061ce:	4910      	ldr	r1, [pc, #64]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061d0:	4810      	ldr	r0, [pc, #64]	@ (8006214 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80061d2:	f005 fda1 	bl	800bd18 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80061d6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80061da:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80061dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061de:	2204      	movs	r2, #4
 80061e0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80061e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061e4:	2210      	movs	r2, #16
 80061e6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80061e8:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a07      	ldr	r2, [pc, #28]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061f2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80061f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061f8:	4905      	ldr	r1, [pc, #20]	@ (8006210 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80061fa:	4806      	ldr	r0, [pc, #24]	@ (8006214 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80061fc:	f005 fd8c 	bl	800bd18 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4804      	ldr	r0, [pc, #16]	@ (8006214 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006204:	f005 fdbd 	bl	800bd82 <HAL_SDRAM_ProgramRefreshRate>
}
 8006208:	bf00      	nop
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	2000158c 	.word	0x2000158c
 8006214:	2000153c 	.word	0x2000153c

08006218 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006218:	b580      	push	{r7, lr}
 800621a:	b090      	sub	sp, #64	@ 0x40
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006222:	4b70      	ldr	r3, [pc, #448]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006226:	4a6f      	ldr	r2, [pc, #444]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	6393      	str	r3, [r2, #56]	@ 0x38
 800622e:	4b6d      	ldr	r3, [pc, #436]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800623a:	4b6a      	ldr	r3, [pc, #424]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	4a69      	ldr	r2, [pc, #420]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006240:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006244:	6313      	str	r3, [r2, #48]	@ 0x30
 8006246:	4b67      	ldr	r3, [pc, #412]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006252:	4b64      	ldr	r3, [pc, #400]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006256:	4a63      	ldr	r2, [pc, #396]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006258:	f043 0304 	orr.w	r3, r3, #4
 800625c:	6313      	str	r3, [r2, #48]	@ 0x30
 800625e:	4b61      	ldr	r3, [pc, #388]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800626a:	4b5e      	ldr	r3, [pc, #376]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626e:	4a5d      	ldr	r2, [pc, #372]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006270:	f043 0308 	orr.w	r3, r3, #8
 8006274:	6313      	str	r3, [r2, #48]	@ 0x30
 8006276:	4b5b      	ldr	r3, [pc, #364]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006282:	4b58      	ldr	r3, [pc, #352]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006286:	4a57      	ldr	r2, [pc, #348]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006288:	f043 0310 	orr.w	r3, r3, #16
 800628c:	6313      	str	r3, [r2, #48]	@ 0x30
 800628e:	4b55      	ldr	r3, [pc, #340]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006292:	f003 0310 	and.w	r3, r3, #16
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800629a:	4b52      	ldr	r3, [pc, #328]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629e:	4a51      	ldr	r2, [pc, #324]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 80062a0:	f043 0320 	orr.w	r3, r3, #32
 80062a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80062a6:	4b4f      	ldr	r3, [pc, #316]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80062b2:	4b4c      	ldr	r3, [pc, #304]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	4a4b      	ldr	r2, [pc, #300]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 80062b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80062be:	4b49      	ldr	r3, [pc, #292]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80062ca:	4b46      	ldr	r3, [pc, #280]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ce:	4a45      	ldr	r2, [pc, #276]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 80062d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80062d6:	4b43      	ldr	r3, [pc, #268]	@ (80063e4 <BSP_SDRAM_MspInit+0x1cc>)
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80062e2:	2302      	movs	r3, #2
 80062e4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80062e6:	2301      	movs	r3, #1
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80062ea:	2302      	movs	r3, #2
 80062ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80062ee:	230c      	movs	r3, #12
 80062f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80062f2:	2308      	movs	r3, #8
 80062f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80062f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80062fa:	4619      	mov	r1, r3
 80062fc:	483a      	ldr	r0, [pc, #232]	@ (80063e8 <BSP_SDRAM_MspInit+0x1d0>)
 80062fe:	f002 fb8d 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8006302:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8006306:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800630c:	4619      	mov	r1, r3
 800630e:	4837      	ldr	r0, [pc, #220]	@ (80063ec <BSP_SDRAM_MspInit+0x1d4>)
 8006310:	f002 fb84 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006314:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8006318:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800631a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800631e:	4619      	mov	r1, r3
 8006320:	4833      	ldr	r0, [pc, #204]	@ (80063f0 <BSP_SDRAM_MspInit+0x1d8>)
 8006322:	f002 fb7b 	bl	8008a1c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006326:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800632a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800632c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006330:	4619      	mov	r1, r3
 8006332:	4830      	ldr	r0, [pc, #192]	@ (80063f4 <BSP_SDRAM_MspInit+0x1dc>)
 8006334:	f002 fb72 	bl	8008a1c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8006338:	f248 1333 	movw	r3, #33075	@ 0x8133
 800633c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800633e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006342:	4619      	mov	r1, r3
 8006344:	482c      	ldr	r0, [pc, #176]	@ (80063f8 <BSP_SDRAM_MspInit+0x1e0>)
 8006346:	f002 fb69 	bl	8008a1c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800634a:	2328      	movs	r3, #40	@ 0x28
 800634c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800634e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006352:	4619      	mov	r1, r3
 8006354:	4829      	ldr	r0, [pc, #164]	@ (80063fc <BSP_SDRAM_MspInit+0x1e4>)
 8006356:	f002 fb61 	bl	8008a1c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800635a:	4b29      	ldr	r3, [pc, #164]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 800635c:	2200      	movs	r2, #0
 800635e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8006360:	4b27      	ldr	r3, [pc, #156]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 8006362:	2280      	movs	r2, #128	@ 0x80
 8006364:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8006366:	4b26      	ldr	r3, [pc, #152]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 8006368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800636c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800636e:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 8006370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006374:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006376:	4b22      	ldr	r3, [pc, #136]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 8006378:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800637c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800637e:	4b20      	ldr	r3, [pc, #128]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 8006380:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006384:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8006386:	4b1e      	ldr	r3, [pc, #120]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 8006388:	2200      	movs	r2, #0
 800638a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800638c:	4b1c      	ldr	r3, [pc, #112]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 800638e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006392:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8006394:	4b1a      	ldr	r3, [pc, #104]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 8006396:	2200      	movs	r2, #0
 8006398:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800639a:	4b19      	ldr	r3, [pc, #100]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 800639c:	2203      	movs	r2, #3
 800639e:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80063a0:	4b17      	ldr	r3, [pc, #92]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80063a6:	4b16      	ldr	r3, [pc, #88]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80063ac:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 80063ae:	4a15      	ldr	r2, [pc, #84]	@ (8006404 <BSP_SDRAM_MspInit+0x1ec>)
 80063b0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a12      	ldr	r2, [pc, #72]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 80063b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80063b8:	4a11      	ldr	r2, [pc, #68]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80063be:	4810      	ldr	r0, [pc, #64]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 80063c0:	f001 fe80 	bl	80080c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80063c4:	480e      	ldr	r0, [pc, #56]	@ (8006400 <BSP_SDRAM_MspInit+0x1e8>)
 80063c6:	f001 fdcf 	bl	8007f68 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80063ca:	2200      	movs	r2, #0
 80063cc:	210f      	movs	r1, #15
 80063ce:	2038      	movs	r0, #56	@ 0x38
 80063d0:	f001 fcba 	bl	8007d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80063d4:	2038      	movs	r0, #56	@ 0x38
 80063d6:	f001 fcd3 	bl	8007d80 <HAL_NVIC_EnableIRQ>
}
 80063da:	bf00      	nop
 80063dc:	3740      	adds	r7, #64	@ 0x40
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40020800 	.word	0x40020800
 80063ec:	40020c00 	.word	0x40020c00
 80063f0:	40021000 	.word	0x40021000
 80063f4:	40021400 	.word	0x40021400
 80063f8:	40021800 	.word	0x40021800
 80063fc:	40021c00 	.word	0x40021c00
 8006400:	2000159c 	.word	0x2000159c
 8006404:	40026410 	.word	0x40026410

08006408 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	460a      	mov	r2, r1
 8006412:	80fb      	strh	r3, [r7, #6]
 8006414:	4613      	mov	r3, r2
 8006416:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800641c:	4a14      	ldr	r2, [pc, #80]	@ (8006470 <BSP_TS_Init+0x68>)
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8006422:	4a14      	ldr	r2, [pc, #80]	@ (8006474 <BSP_TS_Init+0x6c>)
 8006424:	88bb      	ldrh	r3, [r7, #4]
 8006426:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8006428:	4b13      	ldr	r3, [pc, #76]	@ (8006478 <BSP_TS_Init+0x70>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2070      	movs	r0, #112	@ 0x70
 800642e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8006430:	4b11      	ldr	r3, [pc, #68]	@ (8006478 <BSP_TS_Init+0x70>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2070      	movs	r0, #112	@ 0x70
 8006436:	4798      	blx	r3
 8006438:	4603      	mov	r3, r0
 800643a:	2b51      	cmp	r3, #81	@ 0x51
 800643c:	d110      	bne.n	8006460 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800643e:	4b0f      	ldr	r3, [pc, #60]	@ (800647c <BSP_TS_Init+0x74>)
 8006440:	4a0d      	ldr	r2, [pc, #52]	@ (8006478 <BSP_TS_Init+0x70>)
 8006442:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8006444:	4b0e      	ldr	r3, [pc, #56]	@ (8006480 <BSP_TS_Init+0x78>)
 8006446:	2270      	movs	r2, #112	@ 0x70
 8006448:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800644a:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <BSP_TS_Init+0x7c>)
 800644c:	2208      	movs	r2, #8
 800644e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8006450:	4b0a      	ldr	r3, [pc, #40]	@ (800647c <BSP_TS_Init+0x74>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	4a0a      	ldr	r2, [pc, #40]	@ (8006480 <BSP_TS_Init+0x78>)
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	4610      	mov	r0, r2
 800645c:	4798      	blx	r3
 800645e:	e001      	b.n	8006464 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8006460:	2303      	movs	r3, #3
 8006462:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20001600 	.word	0x20001600
 8006474:	20001602 	.word	0x20001602
 8006478:	20000004 	.word	0x20000004
 800647c:	200015fc 	.word	0x200015fc
 8006480:	20001605 	.word	0x20001605
 8006484:	20001604 	.word	0x20001604

08006488 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b097      	sub	sp, #92	@ 0x5c
 800648c:	af02      	add	r7, sp, #8
 800648e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80064a2:	4bb8      	ldr	r3, [pc, #736]	@ (8006784 <BSP_TS_GetState+0x2fc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	4ab7      	ldr	r2, [pc, #732]	@ (8006788 <BSP_TS_GetState+0x300>)
 80064aa:	7812      	ldrb	r2, [r2, #0]
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8198 	beq.w	80067f2 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c6:	e187      	b.n	80067d8 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80064c8:	4bae      	ldr	r3, [pc, #696]	@ (8006784 <BSP_TS_GetState+0x2fc>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	4aae      	ldr	r2, [pc, #696]	@ (8006788 <BSP_TS_GetState+0x300>)
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	4614      	mov	r4, r2
 80064d4:	f107 0120 	add.w	r1, r7, #32
 80064d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064da:	0052      	lsls	r2, r2, #1
 80064dc:	1888      	adds	r0, r1, r2
 80064de:	f107 0114 	add.w	r1, r7, #20
 80064e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064e4:	0052      	lsls	r2, r2, #1
 80064e6:	440a      	add	r2, r1
 80064e8:	4601      	mov	r1, r0
 80064ea:	4620      	mov	r0, r4
 80064ec:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80064ee:	4ba7      	ldr	r3, [pc, #668]	@ (800678c <BSP_TS_GetState+0x304>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d117      	bne.n	8006526 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80064f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	3350      	adds	r3, #80	@ 0x50
 80064fc:	443b      	add	r3, r7
 80064fe:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8006502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	3350      	adds	r3, #80	@ 0x50
 8006508:	443b      	add	r3, r7
 800650a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800650e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	3350      	adds	r3, #80	@ 0x50
 8006514:	443b      	add	r3, r7
 8006516:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800651a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	3350      	adds	r3, #80	@ 0x50
 8006520:	443b      	add	r3, r7
 8006522:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8006526:	4b99      	ldr	r3, [pc, #612]	@ (800678c <BSP_TS_GetState+0x304>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8006532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	3350      	adds	r3, #80	@ 0x50
 8006538:	443b      	add	r3, r7
 800653a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800653e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8006542:	b29a      	uxth	r2, r3
 8006544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	3350      	adds	r3, #80	@ 0x50
 800654a:	443b      	add	r3, r7
 800654c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8006550:	4b8e      	ldr	r3, [pc, #568]	@ (800678c <BSP_TS_GetState+0x304>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 800655c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	3350      	adds	r3, #80	@ 0x50
 8006562:	443b      	add	r3, r7
 8006564:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8006568:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800656c:	b29a      	uxth	r2, r3
 800656e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	3350      	adds	r3, #80	@ 0x50
 8006574:	443b      	add	r3, r7
 8006576:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800657a:	4b84      	ldr	r3, [pc, #528]	@ (800678c <BSP_TS_GetState+0x304>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d017      	beq.n	80065b6 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8006586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	3350      	adds	r3, #80	@ 0x50
 800658c:	443b      	add	r3, r7
 800658e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8006592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	3350      	adds	r3, #80	@ 0x50
 8006598:	443b      	add	r3, r7
 800659a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800659e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	3350      	adds	r3, #80	@ 0x50
 80065a4:	443b      	add	r3, r7
 80065a6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80065aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	3350      	adds	r3, #80	@ 0x50
 80065b0:	443b      	add	r3, r7
 80065b2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80065b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	3350      	adds	r3, #80	@ 0x50
 80065bc:	443b      	add	r3, r7
 80065be:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80065c2:	4619      	mov	r1, r3
 80065c4:	4a72      	ldr	r2, [pc, #456]	@ (8006790 <BSP_TS_GetState+0x308>)
 80065c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065cc:	4299      	cmp	r1, r3
 80065ce:	d90d      	bls.n	80065ec <BSP_TS_GetState+0x164>
 80065d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	3350      	adds	r3, #80	@ 0x50
 80065d6:	443b      	add	r3, r7
 80065d8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80065dc:	496c      	ldr	r1, [pc, #432]	@ (8006790 <BSP_TS_GetState+0x308>)
 80065de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	e00c      	b.n	8006606 <BSP_TS_GetState+0x17e>
 80065ec:	4a68      	ldr	r2, [pc, #416]	@ (8006790 <BSP_TS_GetState+0x308>)
 80065ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	3350      	adds	r3, #80	@ 0x50
 80065fc:	443b      	add	r3, r7
 80065fe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	b29b      	uxth	r3, r3
 8006606:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800660a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	3350      	adds	r3, #80	@ 0x50
 8006610:	443b      	add	r3, r7
 8006612:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8006616:	4619      	mov	r1, r3
 8006618:	4a5e      	ldr	r2, [pc, #376]	@ (8006794 <BSP_TS_GetState+0x30c>)
 800661a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800661c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006620:	4299      	cmp	r1, r3
 8006622:	d90d      	bls.n	8006640 <BSP_TS_GetState+0x1b8>
 8006624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	3350      	adds	r3, #80	@ 0x50
 800662a:	443b      	add	r3, r7
 800662c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8006630:	4958      	ldr	r1, [pc, #352]	@ (8006794 <BSP_TS_GetState+0x30c>)
 8006632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006634:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006638:	b29b      	uxth	r3, r3
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	b29b      	uxth	r3, r3
 800663e:	e00c      	b.n	800665a <BSP_TS_GetState+0x1d2>
 8006640:	4a54      	ldr	r2, [pc, #336]	@ (8006794 <BSP_TS_GetState+0x30c>)
 8006642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006648:	b29a      	uxth	r2, r3
 800664a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	3350      	adds	r3, #80	@ 0x50
 8006650:	443b      	add	r3, r7
 8006652:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	b29b      	uxth	r3, r3
 800665a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 800665e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006662:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006666:	4413      	add	r3, r2
 8006668:	2b05      	cmp	r3, #5
 800666a:	dd15      	ble.n	8006698 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 800666c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	3350      	adds	r3, #80	@ 0x50
 8006672:	443b      	add	r3, r7
 8006674:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006678:	4619      	mov	r1, r3
 800667a:	4a45      	ldr	r2, [pc, #276]	@ (8006790 <BSP_TS_GetState+0x308>)
 800667c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800667e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8006682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	3350      	adds	r3, #80	@ 0x50
 8006688:	443b      	add	r3, r7
 800668a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800668e:	4619      	mov	r1, r3
 8006690:	4a40      	ldr	r2, [pc, #256]	@ (8006794 <BSP_TS_GetState+0x30c>)
 8006692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006694:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8006698:	4b3b      	ldr	r3, [pc, #236]	@ (8006788 <BSP_TS_GetState+0x300>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b70      	cmp	r3, #112	@ 0x70
 800669e:	d119      	bne.n	80066d4 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80066a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	3350      	adds	r3, #80	@ 0x50
 80066a6:	443b      	add	r3, r7
 80066a8:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4413      	add	r3, r2
 80066b4:	460a      	mov	r2, r1
 80066b6:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80066b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	3350      	adds	r3, #80	@ 0x50
 80066be:	443b      	add	r3, r7
 80066c0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c8:	3304      	adds	r3, #4
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	4413      	add	r3, r2
 80066ce:	460a      	mov	r2, r1
 80066d0:	809a      	strh	r2, [r3, #4]
 80066d2:	e022      	b.n	800671a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80066d4:	4b30      	ldr	r3, [pc, #192]	@ (8006798 <BSP_TS_GetState+0x310>)
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	4619      	mov	r1, r3
 80066da:	4a2d      	ldr	r2, [pc, #180]	@ (8006790 <BSP_TS_GetState+0x308>)
 80066dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e2:	fb01 f303 	mul.w	r3, r1, r3
 80066e6:	0b1b      	lsrs	r3, r3, #12
 80066e8:	b299      	uxth	r1, r3
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	4413      	add	r3, r2
 80066f2:	460a      	mov	r2, r1
 80066f4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80066f6:	4b29      	ldr	r3, [pc, #164]	@ (800679c <BSP_TS_GetState+0x314>)
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	4a25      	ldr	r2, [pc, #148]	@ (8006794 <BSP_TS_GetState+0x30c>)
 80066fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	0b1b      	lsrs	r3, r3, #12
 800670a:	b299      	uxth	r1, r3
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006710:	3304      	adds	r3, #4
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	4413      	add	r3, r2
 8006716:	460a      	mov	r2, r1
 8006718:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800671a:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <BSP_TS_GetState+0x300>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f107 010c 	add.w	r1, r7, #12
 8006724:	f107 0210 	add.w	r2, r7, #16
 8006728:	f107 0308 	add.w	r3, r7, #8
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	460b      	mov	r3, r1
 8006730:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006732:	f7fb fc7d 	bl	8002030 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	b2d9      	uxtb	r1, r3
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800673e:	4413      	add	r3, r2
 8006740:	3316      	adds	r3, #22
 8006742:	460a      	mov	r2, r1
 8006744:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	b2d9      	uxtb	r1, r3
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800674e:	4413      	add	r3, r2
 8006750:	3320      	adds	r3, #32
 8006752:	460a      	mov	r2, r1
 8006754:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d836      	bhi.n	80067ca <BSP_TS_GetState+0x342>
 800675c:	a201      	add	r2, pc, #4	@ (adr r2, 8006764 <BSP_TS_GetState+0x2dc>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006775 	.word	0x08006775
 8006768:	080067a1 	.word	0x080067a1
 800676c:	080067af 	.word	0x080067af
 8006770:	080067bd 	.word	0x080067bd
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006778:	4413      	add	r3, r2
 800677a:	331b      	adds	r3, #27
 800677c:	2201      	movs	r2, #1
 800677e:	701a      	strb	r2, [r3, #0]
          break;
 8006780:	e027      	b.n	80067d2 <BSP_TS_GetState+0x34a>
 8006782:	bf00      	nop
 8006784:	200015fc 	.word	0x200015fc
 8006788:	20001605 	.word	0x20001605
 800678c:	20001604 	.word	0x20001604
 8006790:	20001608 	.word	0x20001608
 8006794:	2000161c 	.word	0x2000161c
 8006798:	20001600 	.word	0x20001600
 800679c:	20001602 	.word	0x20001602
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a4:	4413      	add	r3, r2
 80067a6:	331b      	adds	r3, #27
 80067a8:	2202      	movs	r2, #2
 80067aa:	701a      	strb	r2, [r3, #0]
          break;
 80067ac:	e011      	b.n	80067d2 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067b2:	4413      	add	r3, r2
 80067b4:	331b      	adds	r3, #27
 80067b6:	2203      	movs	r2, #3
 80067b8:	701a      	strb	r2, [r3, #0]
          break;
 80067ba:	e00a      	b.n	80067d2 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067c0:	4413      	add	r3, r2
 80067c2:	331b      	adds	r3, #27
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
          break;
 80067c8:	e003      	b.n	80067d2 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 80067d0:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80067d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067d4:	3301      	adds	r3, #1
 80067d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e0:	4293      	cmp	r3, r2
 80067e2:	f4ff ae71 	bcc.w	80064c8 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f80a 	bl	8006800 <BSP_TS_Get_GestureId>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80067f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3754      	adds	r7, #84	@ 0x54
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd90      	pop	{r4, r7, pc}
 80067fe:	bf00      	nop

08006800 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8006810:	4b3b      	ldr	r3, [pc, #236]	@ (8006900 <BSP_TS_Get_GestureId+0x100>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	461a      	mov	r2, r3
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f7fb fbee 	bl	8001ffe <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b49      	cmp	r3, #73	@ 0x49
 8006826:	d05e      	beq.n	80068e6 <BSP_TS_Get_GestureId+0xe6>
 8006828:	2b49      	cmp	r3, #73	@ 0x49
 800682a:	d860      	bhi.n	80068ee <BSP_TS_Get_GestureId+0xee>
 800682c:	2b1c      	cmp	r3, #28
 800682e:	d83f      	bhi.n	80068b0 <BSP_TS_Get_GestureId+0xb0>
 8006830:	2b1c      	cmp	r3, #28
 8006832:	d85c      	bhi.n	80068ee <BSP_TS_Get_GestureId+0xee>
 8006834:	a201      	add	r2, pc, #4	@ (adr r2, 800683c <BSP_TS_Get_GestureId+0x3c>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	080068b7 	.word	0x080068b7
 8006840:	080068ef 	.word	0x080068ef
 8006844:	080068ef 	.word	0x080068ef
 8006848:	080068ef 	.word	0x080068ef
 800684c:	080068ef 	.word	0x080068ef
 8006850:	080068ef 	.word	0x080068ef
 8006854:	080068ef 	.word	0x080068ef
 8006858:	080068ef 	.word	0x080068ef
 800685c:	080068ef 	.word	0x080068ef
 8006860:	080068ef 	.word	0x080068ef
 8006864:	080068ef 	.word	0x080068ef
 8006868:	080068ef 	.word	0x080068ef
 800686c:	080068ef 	.word	0x080068ef
 8006870:	080068ef 	.word	0x080068ef
 8006874:	080068ef 	.word	0x080068ef
 8006878:	080068ef 	.word	0x080068ef
 800687c:	080068bf 	.word	0x080068bf
 8006880:	080068ef 	.word	0x080068ef
 8006884:	080068ef 	.word	0x080068ef
 8006888:	080068ef 	.word	0x080068ef
 800688c:	080068c7 	.word	0x080068c7
 8006890:	080068ef 	.word	0x080068ef
 8006894:	080068ef 	.word	0x080068ef
 8006898:	080068ef 	.word	0x080068ef
 800689c:	080068cf 	.word	0x080068cf
 80068a0:	080068ef 	.word	0x080068ef
 80068a4:	080068ef 	.word	0x080068ef
 80068a8:	080068ef 	.word	0x080068ef
 80068ac:	080068d7 	.word	0x080068d7
 80068b0:	2b40      	cmp	r3, #64	@ 0x40
 80068b2:	d014      	beq.n	80068de <BSP_TS_Get_GestureId+0xde>
 80068b4:	e01b      	b.n	80068ee <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80068bc:	e01a      	b.n	80068f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80068c4:	e016      	b.n	80068f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80068cc:	e012      	b.n	80068f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2203      	movs	r2, #3
 80068d2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80068d4:	e00e      	b.n	80068f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2204      	movs	r2, #4
 80068da:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80068dc:	e00a      	b.n	80068f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2205      	movs	r2, #5
 80068e2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80068e4:	e006      	b.n	80068f4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2206      	movs	r2, #6
 80068ea:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80068ec:	e002      	b.n	80068f4 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
      break;
 80068f2:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20001605 	.word	0x20001605

08006904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800690a:	4b11      	ldr	r3, [pc, #68]	@ (8006950 <HAL_MspInit+0x4c>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	4a10      	ldr	r2, [pc, #64]	@ (8006950 <HAL_MspInit+0x4c>)
 8006910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006914:	6413      	str	r3, [r2, #64]	@ 0x40
 8006916:	4b0e      	ldr	r3, [pc, #56]	@ (8006950 <HAL_MspInit+0x4c>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800691e:	607b      	str	r3, [r7, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006922:	4b0b      	ldr	r3, [pc, #44]	@ (8006950 <HAL_MspInit+0x4c>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	4a0a      	ldr	r2, [pc, #40]	@ (8006950 <HAL_MspInit+0x4c>)
 8006928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800692c:	6453      	str	r3, [r2, #68]	@ 0x44
 800692e:	4b08      	ldr	r3, [pc, #32]	@ (8006950 <HAL_MspInit+0x4c>)
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800693a:	2200      	movs	r2, #0
 800693c:	210f      	movs	r1, #15
 800693e:	f06f 0001 	mvn.w	r0, #1
 8006942:	f001 fa01 	bl	8007d48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40023800 	.word	0x40023800

08006954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08e      	sub	sp, #56	@ 0x38
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006964:	4b33      	ldr	r3, [pc, #204]	@ (8006a34 <HAL_InitTick+0xe0>)
 8006966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006968:	4a32      	ldr	r2, [pc, #200]	@ (8006a34 <HAL_InitTick+0xe0>)
 800696a:	f043 0310 	orr.w	r3, r3, #16
 800696e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006970:	4b30      	ldr	r3, [pc, #192]	@ (8006a34 <HAL_InitTick+0xe0>)
 8006972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800697c:	f107 0210 	add.w	r2, r7, #16
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f004 f99e 	bl	800acc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006996:	f004 f96f 	bl	800ac78 <HAL_RCC_GetPCLK1Freq>
 800699a:	6378      	str	r0, [r7, #52]	@ 0x34
 800699c:	e004      	b.n	80069a8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800699e:	f004 f96b 	bl	800ac78 <HAL_RCC_GetPCLK1Freq>
 80069a2:	4603      	mov	r3, r0
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80069a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069aa:	4a23      	ldr	r2, [pc, #140]	@ (8006a38 <HAL_InitTick+0xe4>)
 80069ac:	fba2 2303 	umull	r2, r3, r2, r3
 80069b0:	0c9b      	lsrs	r3, r3, #18
 80069b2:	3b01      	subs	r3, #1
 80069b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80069b6:	4b21      	ldr	r3, [pc, #132]	@ (8006a3c <HAL_InitTick+0xe8>)
 80069b8:	4a21      	ldr	r2, [pc, #132]	@ (8006a40 <HAL_InitTick+0xec>)
 80069ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80069bc:	4b1f      	ldr	r3, [pc, #124]	@ (8006a3c <HAL_InitTick+0xe8>)
 80069be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80069c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80069c4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a3c <HAL_InitTick+0xe8>)
 80069c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80069ca:	4b1c      	ldr	r3, [pc, #112]	@ (8006a3c <HAL_InitTick+0xe8>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069d0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a3c <HAL_InitTick+0xe8>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069d6:	4b19      	ldr	r3, [pc, #100]	@ (8006a3c <HAL_InitTick+0xe8>)
 80069d8:	2200      	movs	r2, #0
 80069da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80069dc:	4817      	ldr	r0, [pc, #92]	@ (8006a3c <HAL_InitTick+0xe8>)
 80069de:	f005 faa3 	bl	800bf28 <HAL_TIM_Base_Init>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80069e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d11b      	bne.n	8006a28 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80069f0:	4812      	ldr	r0, [pc, #72]	@ (8006a3c <HAL_InitTick+0xe8>)
 80069f2:	f005 faf1 	bl	800bfd8 <HAL_TIM_Base_Start_IT>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80069fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d111      	bne.n	8006a28 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006a04:	2036      	movs	r0, #54	@ 0x36
 8006a06:	f001 f9bb 	bl	8007d80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b0f      	cmp	r3, #15
 8006a0e:	d808      	bhi.n	8006a22 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006a10:	2200      	movs	r2, #0
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	2036      	movs	r0, #54	@ 0x36
 8006a16:	f001 f997 	bl	8007d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a44 <HAL_InitTick+0xf0>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	e002      	b.n	8006a28 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3738      	adds	r7, #56	@ 0x38
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40023800 	.word	0x40023800
 8006a38:	431bde83 	.word	0x431bde83
 8006a3c:	20001630 	.word	0x20001630
 8006a40:	40001000 	.word	0x40001000
 8006a44:	2000007c 	.word	0x2000007c

08006a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006a4c:	bf00      	nop
 8006a4e:	e7fd      	b.n	8006a4c <NMI_Handler+0x4>

08006a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <HardFault_Handler+0x4>

08006a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <MemManage_Handler+0x4>

08006a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <BusFault_Handler+0x4>

08006a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a6c:	bf00      	nop
 8006a6e:	e7fd      	b.n	8006a6c <UsageFault_Handler+0x4>

08006a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8006a84:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <TIM6_DAC_IRQHandler+0x20>)
 8006a86:	791b      	ldrb	r3, [r3, #4]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8006a8e:	4804      	ldr	r0, [pc, #16]	@ (8006aa0 <TIM6_DAC_IRQHandler+0x20>)
 8006a90:	f001 f9a6 	bl	8007de0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8006a94:	4803      	ldr	r0, [pc, #12]	@ (8006aa4 <TIM6_DAC_IRQHandler+0x24>)
 8006a96:	f005 fb17 	bl	800c0c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006a9a:	bf00      	nop
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000194 	.word	0x20000194
 8006aa4:	20001630 	.word	0x20001630

08006aa8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8006aac:	4802      	ldr	r0, [pc, #8]	@ (8006ab8 <LTDC_IRQHandler+0x10>)
 8006aae:	f003 f99d 	bl	8009dec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000648 	.word	0x20000648

08006abc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8006ac0:	4802      	ldr	r0, [pc, #8]	@ (8006acc <DMA2D_IRQHandler+0x10>)
 8006ac2:	f001 fd6d 	bl	80085a0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	200001a8 	.word	0x200001a8

08006ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ad8:	4a14      	ldr	r2, [pc, #80]	@ (8006b2c <_sbrk+0x5c>)
 8006ada:	4b15      	ldr	r3, [pc, #84]	@ (8006b30 <_sbrk+0x60>)
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ae4:	4b13      	ldr	r3, [pc, #76]	@ (8006b34 <_sbrk+0x64>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d102      	bne.n	8006af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006aec:	4b11      	ldr	r3, [pc, #68]	@ (8006b34 <_sbrk+0x64>)
 8006aee:	4a12      	ldr	r2, [pc, #72]	@ (8006b38 <_sbrk+0x68>)
 8006af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006af2:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <_sbrk+0x64>)
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d207      	bcs.n	8006b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b00:	f009 f914 	bl	800fd2c <__errno>
 8006b04:	4603      	mov	r3, r0
 8006b06:	220c      	movs	r2, #12
 8006b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b0e:	e009      	b.n	8006b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b10:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <_sbrk+0x64>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b16:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <_sbrk+0x64>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <_sbrk+0x64>)
 8006b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b22:	68fb      	ldr	r3, [r7, #12]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20050000 	.word	0x20050000
 8006b30:	00000400 	.word	0x00000400
 8006b34:	2000167c 	.word	0x2000167c
 8006b38:	20005830 	.word	0x20005830

08006b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b40:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <SystemInit+0x20>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b46:	4a05      	ldr	r2, [pc, #20]	@ (8006b5c <SystemInit+0x20>)
 8006b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b50:	bf00      	nop
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	e000ed00 	.word	0xe000ed00

08006b60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b66:	f107 0310 	add.w	r3, r7, #16
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	605a      	str	r2, [r3, #4]
 8006b70:	609a      	str	r2, [r3, #8]
 8006b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b74:	1d3b      	adds	r3, r7, #4
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	605a      	str	r2, [r3, #4]
 8006b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006b7e:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006b80:	4a20      	ldr	r2, [pc, #128]	@ (8006c04 <MX_TIM1_Init+0xa4>)
 8006b82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006b84:	4b1e      	ldr	r3, [pc, #120]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006b90:	4b1b      	ldr	r3, [pc, #108]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006b92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b98:	4b19      	ldr	r3, [pc, #100]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b9e:	4b18      	ldr	r3, [pc, #96]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ba4:	4b16      	ldr	r3, [pc, #88]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006baa:	4815      	ldr	r0, [pc, #84]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006bac:	f005 f9bc 	bl	800bf28 <HAL_TIM_Base_Init>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8006bb6:	f7fc f9a7 	bl	8002f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006bbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006bc0:	f107 0310 	add.w	r3, r7, #16
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	480e      	ldr	r0, [pc, #56]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006bc8:	f005 fb86 	bl	800c2d8 <HAL_TIM_ConfigClockSource>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8006bd2:	f7fc f999 	bl	8002f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006be2:	1d3b      	adds	r3, r7, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4806      	ldr	r0, [pc, #24]	@ (8006c00 <MX_TIM1_Init+0xa0>)
 8006be8:	f005 fda8 	bl	800c73c <HAL_TIMEx_MasterConfigSynchronization>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006bf2:	f7fc f989 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006bf6:	bf00      	nop
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20001680 	.word	0x20001680
 8006c04:	40010000 	.word	0x40010000

08006c08 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c0e:	f107 0310 	add.w	r3, r7, #16
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	609a      	str	r2, [r3, #8]
 8006c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c1c:	1d3b      	adds	r3, r7, #4
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	605a      	str	r2, [r3, #4]
 8006c24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006c26:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c34:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006c3a:	4b19      	ldr	r3, [pc, #100]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c42:	4b17      	ldr	r3, [pc, #92]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c48:	4b15      	ldr	r3, [pc, #84]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006c4e:	4814      	ldr	r0, [pc, #80]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c50:	f005 f96a 	bl	800bf28 <HAL_TIM_Base_Init>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006c5a:	f7fc f955 	bl	8002f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006c64:	f107 0310 	add.w	r3, r7, #16
 8006c68:	4619      	mov	r1, r3
 8006c6a:	480d      	ldr	r0, [pc, #52]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c6c:	f005 fb34 	bl	800c2d8 <HAL_TIM_ConfigClockSource>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006c76:	f7fc f947 	bl	8002f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006c82:	1d3b      	adds	r3, r7, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4806      	ldr	r0, [pc, #24]	@ (8006ca0 <MX_TIM2_Init+0x98>)
 8006c88:	f005 fd58 	bl	800c73c <HAL_TIMEx_MasterConfigSynchronization>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006c92:	f7fc f939 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006c96:	bf00      	nop
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	200016cc 	.word	0x200016cc

08006ca4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006caa:	f107 0310 	add.w	r3, r7, #16
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	605a      	str	r2, [r3, #4]
 8006cb4:	609a      	str	r2, [r3, #8]
 8006cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cb8:	1d3b      	adds	r3, r7, #4
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	605a      	str	r2, [r3, #4]
 8006cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8006d3c <MX_TIM3_Init+0x98>)
 8006cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cce:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006cd4:	4b18      	ldr	r3, [pc, #96]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cdc:	4b16      	ldr	r3, [pc, #88]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ce2:	4b15      	ldr	r3, [pc, #84]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006ce8:	4813      	ldr	r0, [pc, #76]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006cea:	f005 f91d 	bl	800bf28 <HAL_TIM_Base_Init>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006cf4:	f7fc f908 	bl	8002f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	4619      	mov	r1, r3
 8006d04:	480c      	ldr	r0, [pc, #48]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006d06:	f005 fae7 	bl	800c2d8 <HAL_TIM_ConfigClockSource>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8006d10:	f7fc f8fa 	bl	8002f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d14:	2300      	movs	r3, #0
 8006d16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006d1c:	1d3b      	adds	r3, r7, #4
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4805      	ldr	r0, [pc, #20]	@ (8006d38 <MX_TIM3_Init+0x94>)
 8006d22:	f005 fd0b 	bl	800c73c <HAL_TIMEx_MasterConfigSynchronization>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006d2c:	f7fc f8ec 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006d30:	bf00      	nop
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20001718 	.word	0x20001718
 8006d3c:	40000400 	.word	0x40000400

08006d40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d46:	f107 0310 	add.w	r3, r7, #16
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	605a      	str	r2, [r3, #4]
 8006d50:	609a      	str	r2, [r3, #8]
 8006d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d54:	1d3b      	adds	r3, r7, #4
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	605a      	str	r2, [r3, #4]
 8006d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006d60:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd8 <MX_TIM5_Init+0x98>)
 8006d62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8006d64:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8006d70:	4b18      	ldr	r3, [pc, #96]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006d72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d78:	4b16      	ldr	r3, [pc, #88]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d7e:	4b15      	ldr	r3, [pc, #84]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006d84:	4813      	ldr	r0, [pc, #76]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006d86:	f005 f8cf 	bl	800bf28 <HAL_TIM_Base_Init>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8006d90:	f7fc f8ba 	bl	8002f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006d9a:	f107 0310 	add.w	r3, r7, #16
 8006d9e:	4619      	mov	r1, r3
 8006da0:	480c      	ldr	r0, [pc, #48]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006da2:	f005 fa99 	bl	800c2d8 <HAL_TIM_ConfigClockSource>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8006dac:	f7fc f8ac 	bl	8002f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006db0:	2300      	movs	r3, #0
 8006db2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006db8:	1d3b      	adds	r3, r7, #4
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4805      	ldr	r0, [pc, #20]	@ (8006dd4 <MX_TIM5_Init+0x94>)
 8006dbe:	f005 fcbd 	bl	800c73c <HAL_TIMEx_MasterConfigSynchronization>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8006dc8:	f7fc f89e 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006dcc:	bf00      	nop
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20001764 	.word	0x20001764
 8006dd8:	40000c00 	.word	0x40000c00

08006ddc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006de2:	f107 0310 	add.w	r3, r7, #16
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	609a      	str	r2, [r3, #8]
 8006dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006df0:	1d3b      	adds	r3, r7, #4
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	605a      	str	r2, [r3, #4]
 8006df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006dfa:	4b20      	ldr	r3, [pc, #128]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006dfc:	4a20      	ldr	r2, [pc, #128]	@ (8006e80 <MX_TIM8_Init+0xa4>)
 8006dfe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006e00:	4b1e      	ldr	r3, [pc, #120]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e06:	4b1d      	ldr	r3, [pc, #116]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e14:	4b19      	ldr	r3, [pc, #100]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006e1a:	4b18      	ldr	r3, [pc, #96]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e20:	4b16      	ldr	r3, [pc, #88]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006e26:	4815      	ldr	r0, [pc, #84]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e28:	f005 f87e 	bl	800bf28 <HAL_TIM_Base_Init>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8006e32:	f7fc f869 	bl	8002f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8006e3c:	f107 0310 	add.w	r3, r7, #16
 8006e40:	4619      	mov	r1, r3
 8006e42:	480e      	ldr	r0, [pc, #56]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e44:	f005 fa48 	bl	800c2d8 <HAL_TIM_ConfigClockSource>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8006e4e:	f7fc f85b 	bl	8002f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006e5e:	1d3b      	adds	r3, r7, #4
 8006e60:	4619      	mov	r1, r3
 8006e62:	4806      	ldr	r0, [pc, #24]	@ (8006e7c <MX_TIM8_Init+0xa0>)
 8006e64:	f005 fc6a 	bl	800c73c <HAL_TIMEx_MasterConfigSynchronization>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8006e6e:	f7fc f84b 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006e72:	bf00      	nop
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200017b0 	.word	0x200017b0
 8006e80:	40010400 	.word	0x40010400

08006e84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08e      	sub	sp, #56	@ 0x38
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	605a      	str	r2, [r3, #4]
 8006e96:	609a      	str	r2, [r3, #8]
 8006e98:	60da      	str	r2, [r3, #12]
 8006e9a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8006f90 <HAL_TIM_Base_MspInit+0x10c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eaa:	4a3a      	ldr	r2, [pc, #232]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006eb2:	4b38      	ldr	r3, [pc, #224]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	623b      	str	r3, [r7, #32]
 8006ebc:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006ebe:	e062      	b.n	8006f86 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006eca:	4b32      	ldr	r3, [pc, #200]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ece:	4a31      	ldr	r2, [pc, #196]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	69fb      	ldr	r3, [r7, #28]
}
 8006ee2:	e050      	b.n	8006f86 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8006f98 <HAL_TIM_Base_MspInit+0x114>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10c      	bne.n	8006f08 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006eee:	4b29      	ldr	r3, [pc, #164]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	4a28      	ldr	r2, [pc, #160]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006efa:	4b26      	ldr	r3, [pc, #152]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	69bb      	ldr	r3, [r7, #24]
}
 8006f06:	e03e      	b.n	8006f86 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a23      	ldr	r2, [pc, #140]	@ (8006f9c <HAL_TIM_Base_MspInit+0x118>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d10c      	bne.n	8006f2c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006f12:	4b20      	ldr	r3, [pc, #128]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	4a1f      	ldr	r2, [pc, #124]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f18:	f043 0308 	orr.w	r3, r3, #8
 8006f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	697b      	ldr	r3, [r7, #20]
}
 8006f2a:	e02c      	b.n	8006f86 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1b      	ldr	r2, [pc, #108]	@ (8006fa0 <HAL_TIM_Base_MspInit+0x11c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d127      	bne.n	8006f86 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006f36:	4b17      	ldr	r3, [pc, #92]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3a:	4a16      	ldr	r2, [pc, #88]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f3c:	f043 0302 	orr.w	r3, r3, #2
 8006f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f42:	4b14      	ldr	r3, [pc, #80]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006f4e:	4b11      	ldr	r3, [pc, #68]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f52:	4a10      	ldr	r2, [pc, #64]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f94 <HAL_TIM_Base_MspInit+0x110>)
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f66:	2304      	movs	r3, #4
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f72:	2300      	movs	r3, #0
 8006f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006f76:	2303      	movs	r3, #3
 8006f78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4808      	ldr	r0, [pc, #32]	@ (8006fa4 <HAL_TIM_Base_MspInit+0x120>)
 8006f82:	f001 fd4b 	bl	8008a1c <HAL_GPIO_Init>
}
 8006f86:	bf00      	nop
 8006f88:	3738      	adds	r7, #56	@ 0x38
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40000400 	.word	0x40000400
 8006f9c:	40000c00 	.word	0x40000c00
 8006fa0:	40010400 	.word	0x40010400
 8006fa4:	40022000 	.word	0x40022000

08006fa8 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006fac:	4b14      	ldr	r3, [pc, #80]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fae:	4a15      	ldr	r2, [pc, #84]	@ (8007004 <MX_UART7_Init+0x5c>)
 8006fb0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8006fb2:	4b13      	ldr	r3, [pc, #76]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006fb8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006fba:	4b11      	ldr	r3, [pc, #68]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8006fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fce:	220c      	movs	r2, #12
 8006fd0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fd8:	4b09      	ldr	r3, [pc, #36]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fde:	4b08      	ldr	r3, [pc, #32]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fe4:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006fea:	4805      	ldr	r0, [pc, #20]	@ (8007000 <MX_UART7_Init+0x58>)
 8006fec:	f005 fc52 	bl	800c894 <HAL_UART_Init>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8006ff6:	f7fb ff87 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8006ffa:	bf00      	nop
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200017fc 	.word	0x200017fc
 8007004:	40007800 	.word	0x40007800

08007008 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800700c:	4b14      	ldr	r3, [pc, #80]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 800700e:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <MX_USART1_UART_Init+0x5c>)
 8007010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007012:	4b13      	ldr	r3, [pc, #76]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 8007014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800701a:	4b11      	ldr	r3, [pc, #68]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 800701c:	2200      	movs	r2, #0
 800701e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007020:	4b0f      	ldr	r3, [pc, #60]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 8007022:	2200      	movs	r2, #0
 8007024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007026:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 8007028:	2200      	movs	r2, #0
 800702a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800702c:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 800702e:	220c      	movs	r2, #12
 8007030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007032:	4b0b      	ldr	r3, [pc, #44]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 8007034:	2200      	movs	r2, #0
 8007036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007038:	4b09      	ldr	r3, [pc, #36]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 800703a:	2200      	movs	r2, #0
 800703c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800703e:	4b08      	ldr	r3, [pc, #32]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 8007040:	2200      	movs	r2, #0
 8007042:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007044:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 8007046:	2200      	movs	r2, #0
 8007048:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800704a:	4805      	ldr	r0, [pc, #20]	@ (8007060 <MX_USART1_UART_Init+0x58>)
 800704c:	f005 fc22 	bl	800c894 <HAL_UART_Init>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8007056:	f7fb ff57 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20001884 	.word	0x20001884
 8007064:	40011000 	.word	0x40011000

08007068 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800706c:	4b14      	ldr	r3, [pc, #80]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 800706e:	4a15      	ldr	r2, [pc, #84]	@ (80070c4 <MX_USART6_UART_Init+0x5c>)
 8007070:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8007072:	4b13      	ldr	r3, [pc, #76]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 8007074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007078:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800707a:	4b11      	ldr	r3, [pc, #68]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 800707c:	2200      	movs	r2, #0
 800707e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007080:	4b0f      	ldr	r3, [pc, #60]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 8007082:	2200      	movs	r2, #0
 8007084:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007086:	4b0e      	ldr	r3, [pc, #56]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 8007088:	2200      	movs	r2, #0
 800708a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800708c:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 800708e:	220c      	movs	r2, #12
 8007090:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007092:	4b0b      	ldr	r3, [pc, #44]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 8007094:	2200      	movs	r2, #0
 8007096:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007098:	4b09      	ldr	r3, [pc, #36]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 800709a:	2200      	movs	r2, #0
 800709c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800709e:	4b08      	ldr	r3, [pc, #32]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80070a4:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80070aa:	4805      	ldr	r0, [pc, #20]	@ (80070c0 <MX_USART6_UART_Init+0x58>)
 80070ac:	f005 fbf2 	bl	800c894 <HAL_UART_Init>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80070b6:	f7fb ff27 	bl	8002f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80070ba:	bf00      	nop
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	2000190c 	.word	0x2000190c
 80070c4:	40011400 	.word	0x40011400

080070c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b0b0      	sub	sp, #192	@ 0xc0
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80070e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80070e4:	2284      	movs	r2, #132	@ 0x84
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f008 fe17 	bl	800fd1c <memset>
  if(uartHandle->Instance==UART7)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a75      	ldr	r2, [pc, #468]	@ (80072c8 <HAL_UART_MspInit+0x200>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d13d      	bne.n	8007174 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80070f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80070fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80070fe:	2300      	movs	r3, #0
 8007100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007104:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007108:	4618      	mov	r0, r3
 800710a:	f003 fe0f 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8007114:	f7fb fef8 	bl	8002f08 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8007118:	4b6c      	ldr	r3, [pc, #432]	@ (80072cc <HAL_UART_MspInit+0x204>)
 800711a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711c:	4a6b      	ldr	r2, [pc, #428]	@ (80072cc <HAL_UART_MspInit+0x204>)
 800711e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007122:	6413      	str	r3, [r2, #64]	@ 0x40
 8007124:	4b69      	ldr	r3, [pc, #420]	@ (80072cc <HAL_UART_MspInit+0x204>)
 8007126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007128:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007130:	4b66      	ldr	r3, [pc, #408]	@ (80072cc <HAL_UART_MspInit+0x204>)
 8007132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007134:	4a65      	ldr	r2, [pc, #404]	@ (80072cc <HAL_UART_MspInit+0x204>)
 8007136:	f043 0320 	orr.w	r3, r3, #32
 800713a:	6313      	str	r3, [r2, #48]	@ 0x30
 800713c:	4b63      	ldr	r3, [pc, #396]	@ (80072cc <HAL_UART_MspInit+0x204>)
 800713e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	623b      	str	r3, [r7, #32]
 8007146:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8007148:	23c0      	movs	r3, #192	@ 0xc0
 800714a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800714e:	2302      	movs	r3, #2
 8007150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007154:	2300      	movs	r3, #0
 8007156:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800715a:	2303      	movs	r3, #3
 800715c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007160:	2308      	movs	r3, #8
 8007162:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007166:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800716a:	4619      	mov	r1, r3
 800716c:	4858      	ldr	r0, [pc, #352]	@ (80072d0 <HAL_UART_MspInit+0x208>)
 800716e:	f001 fc55 	bl	8008a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8007172:	e0a4      	b.n	80072be <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a56      	ldr	r2, [pc, #344]	@ (80072d4 <HAL_UART_MspInit+0x20c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d15d      	bne.n	800723a <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800717e:	2340      	movs	r3, #64	@ 0x40
 8007180:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007182:	2300      	movs	r3, #0
 8007184:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800718a:	4618      	mov	r0, r3
 800718c:	f003 fdce 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8007196:	f7fb feb7 	bl	8002f08 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800719a:	4b4c      	ldr	r3, [pc, #304]	@ (80072cc <HAL_UART_MspInit+0x204>)
 800719c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719e:	4a4b      	ldr	r2, [pc, #300]	@ (80072cc <HAL_UART_MspInit+0x204>)
 80071a0:	f043 0310 	orr.w	r3, r3, #16
 80071a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80071a6:	4b49      	ldr	r3, [pc, #292]	@ (80072cc <HAL_UART_MspInit+0x204>)
 80071a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	61fb      	str	r3, [r7, #28]
 80071b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b2:	4b46      	ldr	r3, [pc, #280]	@ (80072cc <HAL_UART_MspInit+0x204>)
 80071b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b6:	4a45      	ldr	r2, [pc, #276]	@ (80072cc <HAL_UART_MspInit+0x204>)
 80071b8:	f043 0302 	orr.w	r3, r3, #2
 80071bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80071be:	4b43      	ldr	r3, [pc, #268]	@ (80072cc <HAL_UART_MspInit+0x204>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071ca:	4b40      	ldr	r3, [pc, #256]	@ (80072cc <HAL_UART_MspInit+0x204>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ce:	4a3f      	ldr	r2, [pc, #252]	@ (80072cc <HAL_UART_MspInit+0x204>)
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80071d6:	4b3d      	ldr	r3, [pc, #244]	@ (80072cc <HAL_UART_MspInit+0x204>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80071e2:	2380      	movs	r3, #128	@ 0x80
 80071e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e8:	2302      	movs	r3, #2
 80071ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071f4:	2300      	movs	r3, #0
 80071f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80071fa:	2307      	movs	r3, #7
 80071fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8007200:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007204:	4619      	mov	r1, r3
 8007206:	4834      	ldr	r0, [pc, #208]	@ (80072d8 <HAL_UART_MspInit+0x210>)
 8007208:	f001 fc08 	bl	8008a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800720c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007214:	2302      	movs	r3, #2
 8007216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721a:	2300      	movs	r3, #0
 800721c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007220:	2300      	movs	r3, #0
 8007222:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007226:	2307      	movs	r3, #7
 8007228:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800722c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007230:	4619      	mov	r1, r3
 8007232:	482a      	ldr	r0, [pc, #168]	@ (80072dc <HAL_UART_MspInit+0x214>)
 8007234:	f001 fbf2 	bl	8008a1c <HAL_GPIO_Init>
}
 8007238:	e041      	b.n	80072be <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a28      	ldr	r2, [pc, #160]	@ (80072e0 <HAL_UART_MspInit+0x218>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d13c      	bne.n	80072be <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8007244:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007248:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800724a:	2300      	movs	r3, #0
 800724c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007254:	4618      	mov	r0, r3
 8007256:	f003 fd69 	bl	800ad2c <HAL_RCCEx_PeriphCLKConfig>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8007260:	f7fb fe52 	bl	8002f08 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007264:	4b19      	ldr	r3, [pc, #100]	@ (80072cc <HAL_UART_MspInit+0x204>)
 8007266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007268:	4a18      	ldr	r2, [pc, #96]	@ (80072cc <HAL_UART_MspInit+0x204>)
 800726a:	f043 0320 	orr.w	r3, r3, #32
 800726e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007270:	4b16      	ldr	r3, [pc, #88]	@ (80072cc <HAL_UART_MspInit+0x204>)
 8007272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800727c:	4b13      	ldr	r3, [pc, #76]	@ (80072cc <HAL_UART_MspInit+0x204>)
 800727e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007280:	4a12      	ldr	r2, [pc, #72]	@ (80072cc <HAL_UART_MspInit+0x204>)
 8007282:	f043 0304 	orr.w	r3, r3, #4
 8007286:	6313      	str	r3, [r2, #48]	@ 0x30
 8007288:	4b10      	ldr	r3, [pc, #64]	@ (80072cc <HAL_UART_MspInit+0x204>)
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8007294:	23c0      	movs	r3, #192	@ 0xc0
 8007296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800729a:	2302      	movs	r3, #2
 800729c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072a6:	2303      	movs	r3, #3
 80072a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80072ac:	2308      	movs	r3, #8
 80072ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072b2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80072b6:	4619      	mov	r1, r3
 80072b8:	480a      	ldr	r0, [pc, #40]	@ (80072e4 <HAL_UART_MspInit+0x21c>)
 80072ba:	f001 fbaf 	bl	8008a1c <HAL_GPIO_Init>
}
 80072be:	bf00      	nop
 80072c0:	37c0      	adds	r7, #192	@ 0xc0
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40007800 	.word	0x40007800
 80072cc:	40023800 	.word	0x40023800
 80072d0:	40021400 	.word	0x40021400
 80072d4:	40011000 	.word	0x40011000
 80072d8:	40020400 	.word	0x40020400
 80072dc:	40020000 	.word	0x40020000
 80072e0:	40011400 	.word	0x40011400
 80072e4:	40020800 	.word	0x40020800

080072e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80072e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80072ec:	480d      	ldr	r0, [pc, #52]	@ (8007324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80072ee:	490e      	ldr	r1, [pc, #56]	@ (8007328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80072f0:	4a0e      	ldr	r2, [pc, #56]	@ (800732c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80072f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072f4:	e002      	b.n	80072fc <LoopCopyDataInit>

080072f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072fa:	3304      	adds	r3, #4

080072fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007300:	d3f9      	bcc.n	80072f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007302:	4a0b      	ldr	r2, [pc, #44]	@ (8007330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007304:	4c0b      	ldr	r4, [pc, #44]	@ (8007334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007308:	e001      	b.n	800730e <LoopFillZerobss>

0800730a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800730a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800730c:	3204      	adds	r2, #4

0800730e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800730e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007310:	d3fb      	bcc.n	800730a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007312:	f7ff fc13 	bl	8006b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007316:	f008 fd0f 	bl	800fd38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800731a:	f7fb fd09 	bl	8002d30 <main>
  bx  lr    
 800731e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007320:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007328:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 800732c:	080149f8 	.word	0x080149f8
  ldr r2, =_sbss
 8007330:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8007334:	2000582c 	.word	0x2000582c

08007338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007338:	e7fe      	b.n	8007338 <ADC_IRQHandler>

0800733a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800733e:	2003      	movs	r0, #3
 8007340:	f000 fcf7 	bl	8007d32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007344:	200f      	movs	r0, #15
 8007346:	f7ff fb05 	bl	8006954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800734a:	f7ff fadb 	bl	8006904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007358:	4b06      	ldr	r3, [pc, #24]	@ (8007374 <HAL_IncTick+0x20>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <HAL_IncTick+0x24>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4413      	add	r3, r2
 8007364:	4a04      	ldr	r2, [pc, #16]	@ (8007378 <HAL_IncTick+0x24>)
 8007366:	6013      	str	r3, [r2, #0]
}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20000080 	.word	0x20000080
 8007378:	20001994 	.word	0x20001994

0800737c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  return uwTick;
 8007380:	4b03      	ldr	r3, [pc, #12]	@ (8007390 <HAL_GetTick+0x14>)
 8007382:	681b      	ldr	r3, [r3, #0]
}
 8007384:	4618      	mov	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20001994 	.word	0x20001994

08007394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800739c:	f7ff ffee 	bl	800737c <HAL_GetTick>
 80073a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073ac:	d005      	beq.n	80073ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073ae:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <HAL_Delay+0x44>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073ba:	bf00      	nop
 80073bc:	f7ff ffde 	bl	800737c <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d8f7      	bhi.n	80073bc <HAL_Delay+0x28>
  {
  }
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000080 	.word	0x20000080

080073dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e031      	b.n	8007456 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7f9 fe58 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b00      	cmp	r3, #0
 8007418:	d116      	bne.n	8007448 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800741e:	4b10      	ldr	r3, [pc, #64]	@ (8007460 <HAL_ADC_Init+0x84>)
 8007420:	4013      	ands	r3, r2
 8007422:	f043 0202 	orr.w	r2, r3, #2
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fada 	bl	80079e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	f043 0201 	orr.w	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	641a      	str	r2, [r3, #64]	@ 0x40
 8007446:	e001      	b.n	800744c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	ffffeefd 	.word	0xffffeefd

08007464 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_ADC_Start+0x1a>
 800747a:	2302      	movs	r3, #2
 800747c:	e0ad      	b.n	80075da <HAL_ADC_Start+0x176>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d018      	beq.n	80074c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80074a4:	4b50      	ldr	r3, [pc, #320]	@ (80075e8 <HAL_ADC_Start+0x184>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a50      	ldr	r2, [pc, #320]	@ (80075ec <HAL_ADC_Start+0x188>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	0c9a      	lsrs	r2, r3, #18
 80074b0:	4613      	mov	r3, r2
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	4413      	add	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80074b8:	e002      	b.n	80074c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3b01      	subs	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f9      	bne.n	80074ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d175      	bne.n	80075c0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074d8:	4b45      	ldr	r3, [pc, #276]	@ (80075f0 <HAL_ADC_Start+0x18c>)
 80074da:	4013      	ands	r3, r2
 80074dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80074fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750e:	d106      	bne.n	800751e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007514:	f023 0206 	bic.w	r2, r3, #6
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	645a      	str	r2, [r3, #68]	@ 0x44
 800751c:	e002      	b.n	8007524 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007534:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007536:	4b2f      	ldr	r3, [pc, #188]	@ (80075f4 <HAL_ADC_Start+0x190>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10f      	bne.n	8007562 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d143      	bne.n	80075d8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800755e:	609a      	str	r2, [r3, #8]
 8007560:	e03a      	b.n	80075d8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a24      	ldr	r2, [pc, #144]	@ (80075f8 <HAL_ADC_Start+0x194>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d10e      	bne.n	800758a <HAL_ADC_Start+0x126>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d107      	bne.n	800758a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007588:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800758a:	4b1a      	ldr	r3, [pc, #104]	@ (80075f4 <HAL_ADC_Start+0x190>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b00      	cmp	r3, #0
 8007594:	d120      	bne.n	80075d8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a18      	ldr	r2, [pc, #96]	@ (80075fc <HAL_ADC_Start+0x198>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d11b      	bne.n	80075d8 <HAL_ADC_Start+0x174>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d114      	bne.n	80075d8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80075bc:	609a      	str	r2, [r3, #8]
 80075be:	e00b      	b.n	80075d8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c4:	f043 0210 	orr.w	r2, r3, #16
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d0:	f043 0201 	orr.w	r2, r3, #1
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000078 	.word	0x20000078
 80075ec:	431bde83 	.word	0x431bde83
 80075f0:	fffff8fe 	.word	0xfffff8fe
 80075f4:	40012300 	.word	0x40012300
 80075f8:	40012000 	.word	0x40012000
 80075fc:	40012200 	.word	0x40012200

08007600 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800761c:	d113      	bne.n	8007646 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800762c:	d10b      	bne.n	8007646 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007632:	f043 0220 	orr.w	r2, r3, #32
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e063      	b.n	800770e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007646:	f7ff fe99 	bl	800737c <HAL_GetTick>
 800764a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800764c:	e021      	b.n	8007692 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007654:	d01d      	beq.n	8007692 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <HAL_ADC_PollForConversion+0x6c>
 800765c:	f7ff fe8e 	bl	800737c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	429a      	cmp	r2, r3
 800766a:	d212      	bcs.n	8007692 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b02      	cmp	r3, #2
 8007678:	d00b      	beq.n	8007692 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767e:	f043 0204 	orr.w	r2, r3, #4
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e03d      	b.n	800770e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b02      	cmp	r3, #2
 800769e:	d1d6      	bne.n	800764e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f06f 0212 	mvn.w	r2, #18
 80076a8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d123      	bne.n	800770c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d11f      	bne.n	800770c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d006      	beq.n	80076e8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d111      	bne.n	800770c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d105      	bne.n	800770c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007704:	f043 0201 	orr.w	r2, r3, #1
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_ADC_ConfigChannel+0x1c>
 8007748:	2302      	movs	r3, #2
 800774a:	e13a      	b.n	80079c2 <HAL_ADC_ConfigChannel+0x292>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b09      	cmp	r3, #9
 800775a:	d93a      	bls.n	80077d2 <HAL_ADC_ConfigChannel+0xa2>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007764:	d035      	beq.n	80077d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68d9      	ldr	r1, [r3, #12]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	4613      	mov	r3, r2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4413      	add	r3, r2
 800777a:	3b1e      	subs	r3, #30
 800777c:	2207      	movs	r2, #7
 800777e:	fa02 f303 	lsl.w	r3, r2, r3
 8007782:	43da      	mvns	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	400a      	ands	r2, r1
 800778a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a8f      	ldr	r2, [pc, #572]	@ (80079d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d10a      	bne.n	80077ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68d9      	ldr	r1, [r3, #12]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	061a      	lsls	r2, r3, #24
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077aa:	e039      	b.n	8007820 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68d9      	ldr	r1, [r3, #12]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4618      	mov	r0, r3
 80077be:	4603      	mov	r3, r0
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	4403      	add	r3, r0
 80077c4:	3b1e      	subs	r3, #30
 80077c6:	409a      	lsls	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077d0:	e026      	b.n	8007820 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6919      	ldr	r1, [r3, #16]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	4613      	mov	r3, r2
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	4413      	add	r3, r2
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	2207      	movs	r2, #7
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	43da      	mvns	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	400a      	ands	r2, r1
 80077f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6919      	ldr	r1, [r3, #16]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	4618      	mov	r0, r3
 800780c:	4603      	mov	r3, r0
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4403      	add	r3, r0
 8007812:	f003 031f 	and.w	r3, r3, #31
 8007816:	409a      	lsls	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b06      	cmp	r3, #6
 8007826:	d824      	bhi.n	8007872 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	3b05      	subs	r3, #5
 800783a:	221f      	movs	r2, #31
 800783c:	fa02 f303 	lsl.w	r3, r2, r3
 8007840:	43da      	mvns	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	400a      	ands	r2, r1
 8007848:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	b29b      	uxth	r3, r3
 8007856:	4618      	mov	r0, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	3b05      	subs	r3, #5
 8007864:	fa00 f203 	lsl.w	r2, r0, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007870:	e04c      	b.n	800790c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b0c      	cmp	r3, #12
 8007878:	d824      	bhi.n	80078c4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	3b23      	subs	r3, #35	@ 0x23
 800788c:	221f      	movs	r2, #31
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	43da      	mvns	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	400a      	ands	r2, r1
 800789a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4618      	mov	r0, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	4613      	mov	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4413      	add	r3, r2
 80078b4:	3b23      	subs	r3, #35	@ 0x23
 80078b6:	fa00 f203 	lsl.w	r2, r0, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80078c2:	e023      	b.n	800790c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	3b41      	subs	r3, #65	@ 0x41
 80078d6:	221f      	movs	r2, #31
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	43da      	mvns	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	400a      	ands	r2, r1
 80078e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	4618      	mov	r0, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	3b41      	subs	r3, #65	@ 0x41
 8007900:	fa00 f203 	lsl.w	r2, r0, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a30      	ldr	r2, [pc, #192]	@ (80079d4 <HAL_ADC_ConfigChannel+0x2a4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d10a      	bne.n	800792c <HAL_ADC_ConfigChannel+0x1fc>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800791e:	d105      	bne.n	800792c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007920:	4b2d      	ldr	r3, [pc, #180]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4a2c      	ldr	r2, [pc, #176]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007926:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800792a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a28      	ldr	r2, [pc, #160]	@ (80079d4 <HAL_ADC_ConfigChannel+0x2a4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d10f      	bne.n	8007956 <HAL_ADC_ConfigChannel+0x226>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b12      	cmp	r3, #18
 800793c:	d10b      	bne.n	8007956 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800793e:	4b26      	ldr	r3, [pc, #152]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	4a25      	ldr	r2, [pc, #148]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007944:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007948:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800794a:	4b23      	ldr	r3, [pc, #140]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	4a22      	ldr	r2, [pc, #136]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007950:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007954:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1e      	ldr	r2, [pc, #120]	@ (80079d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d12b      	bne.n	80079b8 <HAL_ADC_ConfigChannel+0x288>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1a      	ldr	r2, [pc, #104]	@ (80079d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <HAL_ADC_ConfigChannel+0x242>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b11      	cmp	r3, #17
 8007970:	d122      	bne.n	80079b8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007972:	4b19      	ldr	r3, [pc, #100]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	4a18      	ldr	r2, [pc, #96]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007978:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800797c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800797e:	4b16      	ldr	r3, [pc, #88]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4a15      	ldr	r2, [pc, #84]	@ (80079d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8007984:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007988:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a10      	ldr	r2, [pc, #64]	@ (80079d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d111      	bne.n	80079b8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007994:	4b11      	ldr	r3, [pc, #68]	@ (80079dc <HAL_ADC_ConfigChannel+0x2ac>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a11      	ldr	r2, [pc, #68]	@ (80079e0 <HAL_ADC_ConfigChannel+0x2b0>)
 800799a:	fba2 2303 	umull	r2, r3, r2, r3
 800799e:	0c9a      	lsrs	r2, r3, #18
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80079aa:	e002      	b.n	80079b2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1f9      	bne.n	80079ac <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	10000012 	.word	0x10000012
 80079d4:	40012000 	.word	0x40012000
 80079d8:	40012300 	.word	0x40012300
 80079dc:	20000078 	.word	0x20000078
 80079e0:	431bde83 	.word	0x431bde83

080079e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80079ec:	4b78      	ldr	r3, [pc, #480]	@ (8007bd0 <ADC_Init+0x1ec>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	4a77      	ldr	r2, [pc, #476]	@ (8007bd0 <ADC_Init+0x1ec>)
 80079f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80079f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80079f8:	4b75      	ldr	r3, [pc, #468]	@ (8007bd0 <ADC_Init+0x1ec>)
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4973      	ldr	r1, [pc, #460]	@ (8007bd0 <ADC_Init+0x1ec>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6859      	ldr	r1, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	021a      	lsls	r2, r3, #8
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6859      	ldr	r1, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6899      	ldr	r1, [r3, #8]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a72:	4a58      	ldr	r2, [pc, #352]	@ (8007bd4 <ADC_Init+0x1f0>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d022      	beq.n	8007abe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007a86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6899      	ldr	r1, [r3, #8]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6899      	ldr	r1, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	609a      	str	r2, [r3, #8]
 8007abc:	e00f      	b.n	8007ade <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007adc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0202 	bic.w	r2, r2, #2
 8007aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6899      	ldr	r1, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	005a      	lsls	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01b      	beq.n	8007b44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007b2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b36:	3b01      	subs	r3, #1
 8007b38:	035a      	lsls	r2, r3, #13
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
 8007b42:	e007      	b.n	8007b54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	051a      	lsls	r2, r3, #20
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6899      	ldr	r1, [r3, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b96:	025a      	lsls	r2, r3, #9
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689a      	ldr	r2, [r3, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6899      	ldr	r1, [r3, #8]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	029a      	lsls	r2, r3, #10
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	609a      	str	r2, [r3, #8]
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	40012300 	.word	0x40012300
 8007bd4:	0f000001 	.word	0x0f000001

08007bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007be8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c18 <__NVIC_SetPriorityGrouping+0x40>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007c00:	4b06      	ldr	r3, [pc, #24]	@ (8007c1c <__NVIC_SetPriorityGrouping+0x44>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c06:	4a04      	ldr	r2, [pc, #16]	@ (8007c18 <__NVIC_SetPriorityGrouping+0x40>)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	60d3      	str	r3, [r2, #12]
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	e000ed00 	.word	0xe000ed00
 8007c1c:	05fa0000 	.word	0x05fa0000

08007c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c24:	4b04      	ldr	r3, [pc, #16]	@ (8007c38 <__NVIC_GetPriorityGrouping+0x18>)
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	0a1b      	lsrs	r3, r3, #8
 8007c2a:	f003 0307 	and.w	r3, r3, #7
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	e000ed00 	.word	0xe000ed00

08007c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	db0b      	blt.n	8007c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	f003 021f 	and.w	r2, r3, #31
 8007c54:	4907      	ldr	r1, [pc, #28]	@ (8007c74 <__NVIC_EnableIRQ+0x38>)
 8007c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	e000e100 	.word	0xe000e100

08007c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	db0a      	blt.n	8007ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	490c      	ldr	r1, [pc, #48]	@ (8007cc4 <__NVIC_SetPriority+0x4c>)
 8007c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c96:	0112      	lsls	r2, r2, #4
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ca0:	e00a      	b.n	8007cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	4908      	ldr	r1, [pc, #32]	@ (8007cc8 <__NVIC_SetPriority+0x50>)
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	3b04      	subs	r3, #4
 8007cb0:	0112      	lsls	r2, r2, #4
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	761a      	strb	r2, [r3, #24]
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	e000e100 	.word	0xe000e100
 8007cc8:	e000ed00 	.word	0xe000ed00

08007ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b089      	sub	sp, #36	@ 0x24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f1c3 0307 	rsb	r3, r3, #7
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	bf28      	it	cs
 8007cea:	2304      	movcs	r3, #4
 8007cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	2b06      	cmp	r3, #6
 8007cf4:	d902      	bls.n	8007cfc <NVIC_EncodePriority+0x30>
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	3b03      	subs	r3, #3
 8007cfa:	e000      	b.n	8007cfe <NVIC_EncodePriority+0x32>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	43da      	mvns	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	401a      	ands	r2, r3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1e:	43d9      	mvns	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d24:	4313      	orrs	r3, r2
         );
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3724      	adds	r7, #36	@ 0x24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff ff4c 	bl	8007bd8 <__NVIC_SetPriorityGrouping>
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d5a:	f7ff ff61 	bl	8007c20 <__NVIC_GetPriorityGrouping>
 8007d5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	68b9      	ldr	r1, [r7, #8]
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	f7ff ffb1 	bl	8007ccc <NVIC_EncodePriority>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff ff80 	bl	8007c78 <__NVIC_SetPriority>
}
 8007d78:	bf00      	nop
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff ff54 	bl	8007c3c <__NVIC_EnableIRQ>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e014      	b.n	8007dd8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	791b      	ldrb	r3, [r3, #4]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7f9 fa0e 	bl	80011e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d01d      	beq.n	8007e3e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d018      	beq.n	8007e3e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2204      	movs	r2, #4
 8007e10:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f043 0201 	orr.w	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007e26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e36:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f827 	bl	8007e8c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01d      	beq.n	8007e84 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d018      	beq.n	8007e84 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2204      	movs	r2, #4
 8007e56:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f043 0202 	orr.w	r2, r3, #2
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007e6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007e7c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f867 	bl	8007f52 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007e84:	bf00      	nop
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b089      	sub	sp, #36	@ 0x24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <HAL_DAC_ConfigChannel+0x1c>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e042      	b.n	8007f46 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	795b      	ldrb	r3, [r3, #5]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_DAC_ConfigChannel+0x2c>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e03c      	b.n	8007f46 <HAL_DAC_ConfigChannel+0xa6>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f003 0310 	and.w	r3, r3, #16
 8007ee6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6819      	ldr	r1, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	22c0      	movs	r2, #192	@ 0xc0
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43da      	mvns	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	400a      	ands	r2, r1
 8007f36:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3724      	adds	r7, #36	@ 0x24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f74:	f7ff fa02 	bl	800737c <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e099      	b.n	80080b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0201 	bic.w	r2, r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fa4:	e00f      	b.n	8007fc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fa6:	f7ff f9e9 	bl	800737c <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	2b05      	cmp	r3, #5
 8007fb2:	d908      	bls.n	8007fc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e078      	b.n	80080b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e8      	bne.n	8007fa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	4b38      	ldr	r3, [pc, #224]	@ (80080c0 <HAL_DMA_Init+0x158>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800800a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	2b04      	cmp	r3, #4
 800801e:	d107      	bne.n	8008030 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008028:	4313      	orrs	r3, r2
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0307 	bic.w	r3, r3, #7
 8008046:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	4313      	orrs	r3, r2
 8008050:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008056:	2b04      	cmp	r3, #4
 8008058:	d117      	bne.n	800808a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00e      	beq.n	800808a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f8bd 	bl	80081ec <DMA_CheckFifoParam>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d008      	beq.n	800808a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2240      	movs	r2, #64	@ 0x40
 800807c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008086:	2301      	movs	r3, #1
 8008088:	e016      	b.n	80080b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f874 	bl	8008180 <DMA_CalcBaseAndBitshift>
 8008098:	4603      	mov	r3, r0
 800809a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a0:	223f      	movs	r2, #63	@ 0x3f
 80080a2:	409a      	lsls	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	f010803f 	.word	0xf010803f

080080c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e050      	b.n	8008178 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d101      	bne.n	80080e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
 80080e4:	e048      	b.n	8008178 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 0201 	bic.w	r2, r2, #1
 80080f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2200      	movs	r2, #0
 8008104:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2200      	movs	r2, #0
 800810c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2200      	movs	r2, #0
 8008114:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2221      	movs	r2, #33	@ 0x21
 8008124:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f82a 	bl	8008180 <DMA_CalcBaseAndBitshift>
 800812c:	4603      	mov	r3, r0
 800812e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008134:	223f      	movs	r2, #63	@ 0x3f
 8008136:	409a      	lsls	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	3b10      	subs	r3, #16
 8008190:	4a13      	ldr	r2, [pc, #76]	@ (80081e0 <DMA_CalcBaseAndBitshift+0x60>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	091b      	lsrs	r3, r3, #4
 8008198:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800819a:	4a12      	ldr	r2, [pc, #72]	@ (80081e4 <DMA_CalcBaseAndBitshift+0x64>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d908      	bls.n	80081c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	4b0c      	ldr	r3, [pc, #48]	@ (80081e8 <DMA_CalcBaseAndBitshift+0x68>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	1d1a      	adds	r2, r3, #4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80081be:	e006      	b.n	80081ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	4b08      	ldr	r3, [pc, #32]	@ (80081e8 <DMA_CalcBaseAndBitshift+0x68>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	aaaaaaab 	.word	0xaaaaaaab
 80081e4:	080147d0 	.word	0x080147d0
 80081e8:	fffffc00 	.word	0xfffffc00

080081ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d11f      	bne.n	8008246 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d856      	bhi.n	80082ba <DMA_CheckFifoParam+0xce>
 800820c:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <DMA_CheckFifoParam+0x28>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	08008225 	.word	0x08008225
 8008218:	08008237 	.word	0x08008237
 800821c:	08008225 	.word	0x08008225
 8008220:	080082bb 	.word	0x080082bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008228:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d046      	beq.n	80082be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008234:	e043      	b.n	80082be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800823e:	d140      	bne.n	80082c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008244:	e03d      	b.n	80082c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800824e:	d121      	bne.n	8008294 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2b03      	cmp	r3, #3
 8008254:	d837      	bhi.n	80082c6 <DMA_CheckFifoParam+0xda>
 8008256:	a201      	add	r2, pc, #4	@ (adr r2, 800825c <DMA_CheckFifoParam+0x70>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	0800826d 	.word	0x0800826d
 8008260:	08008273 	.word	0x08008273
 8008264:	0800826d 	.word	0x0800826d
 8008268:	08008285 	.word	0x08008285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	73fb      	strb	r3, [r7, #15]
      break;
 8008270:	e030      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d025      	beq.n	80082ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008282:	e022      	b.n	80082ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008288:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800828c:	d11f      	bne.n	80082ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008292:	e01c      	b.n	80082ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d903      	bls.n	80082a2 <DMA_CheckFifoParam+0xb6>
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b03      	cmp	r3, #3
 800829e:	d003      	beq.n	80082a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80082a0:	e018      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	73fb      	strb	r3, [r7, #15]
      break;
 80082a6:	e015      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00e      	beq.n	80082d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	73fb      	strb	r3, [r7, #15]
      break;
 80082b8:	e00b      	b.n	80082d2 <DMA_CheckFifoParam+0xe6>
      break;
 80082ba:	bf00      	nop
 80082bc:	e00a      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
      break;
 80082be:	bf00      	nop
 80082c0:	e008      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
      break;
 80082c2:	bf00      	nop
 80082c4:	e006      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
      break;
 80082c6:	bf00      	nop
 80082c8:	e004      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
      break;
 80082ca:	bf00      	nop
 80082cc:	e002      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80082ce:	bf00      	nop
 80082d0:	e000      	b.n	80082d4 <DMA_CheckFifoParam+0xe8>
      break;
 80082d2:	bf00      	nop
    }
  } 
  
  return status; 
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e039      	b.n	800836a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7f8 ffe2 	bl	80012d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008334:	f023 0107 	bic.w	r1, r3, #7
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800834a:	4b0a      	ldr	r3, [pc, #40]	@ (8008374 <HAL_DMA2D_Init+0x90>)
 800834c:	4013      	ands	r3, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68d1      	ldr	r1, [r2, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	430b      	orrs	r3, r1
 8008358:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	ffffc000 	.word	0xffffc000

08008378 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_DMA2D_Start+0x1c>
 8008390:	2302      	movs	r3, #2
 8008392:	e018      	b.n	80083c6 <HAL_DMA2D_Start+0x4e>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fa98 	bl	80088e4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0201 	orr.w	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b086      	sub	sp, #24
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d056      	beq.n	8008498 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80083ea:	f7fe ffc7 	bl	800737c <HAL_GetTick>
 80083ee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80083f0:	e04b      	b.n	800848a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008400:	2b00      	cmp	r3, #0
 8008402:	d023      	beq.n	800844c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008412:	f043 0202 	orr.w	r2, r3, #2
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008428:	f043 0201 	orr.w	r2, r3, #1
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2221      	movs	r2, #33	@ 0x21
 8008436:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2204      	movs	r2, #4
 800843c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e0a5      	b.n	8008598 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008452:	d01a      	beq.n	800848a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008454:	f7fe ff92 	bl	800737c <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <HAL_DMA2D_PollForTransfer+0x9c>
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10f      	bne.n	800848a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846e:	f043 0220 	orr.w	r2, r3, #32
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2203      	movs	r2, #3
 800847a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e086      	b.n	8008598 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0ac      	beq.n	80083f2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d061      	beq.n	800857e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80084ba:	f7fe ff5f 	bl	800737c <HAL_GetTick>
 80084be:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80084c0:	e056      	b.n	8008570 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d02e      	beq.n	8008532 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e2:	f043 0204 	orr.w	r2, r3, #4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f8:	f043 0202 	orr.w	r2, r3, #2
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850e:	f043 0201 	orr.w	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2229      	movs	r2, #41	@ 0x29
 800851c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2204      	movs	r2, #4
 8008522:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e032      	b.n	8008598 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008538:	d01a      	beq.n	8008570 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800853a:	f7fe ff1f 	bl	800737c <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d302      	bcc.n	8008550 <HAL_DMA2D_PollForTransfer+0x182>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10f      	bne.n	8008570 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008554:	f043 0220 	orr.w	r2, r3, #32
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2203      	movs	r2, #3
 8008560:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e013      	b.n	8008598 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f003 0310 	and.w	r3, r3, #16
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0a1      	beq.n	80084c2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2212      	movs	r2, #18
 8008584:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d026      	beq.n	8008610 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d021      	beq.n	8008610 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085da:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e0:	f043 0201 	orr.w	r2, r3, #1
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2201      	movs	r2, #1
 80085ee:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2204      	movs	r2, #4
 80085f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d026      	beq.n	8008668 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d021      	beq.n	8008668 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008632:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2220      	movs	r2, #32
 800863a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008640:	f043 0202 	orr.w	r2, r3, #2
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2204      	movs	r2, #4
 800864c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f003 0308 	and.w	r3, r3, #8
 800866e:	2b00      	cmp	r3, #0
 8008670:	d026      	beq.n	80086c0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008678:	2b00      	cmp	r3, #0
 800867a:	d021      	beq.n	80086c0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800868a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2208      	movs	r2, #8
 8008692:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008698:	f043 0204 	orr.w	r2, r3, #4
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2204      	movs	r2, #4
 80086a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d003      	beq.n	80086c0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d013      	beq.n	80086f2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00e      	beq.n	80086f2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086e2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2204      	movs	r2, #4
 80086ea:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f853 	bl	8008798 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d024      	beq.n	8008746 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01f      	beq.n	8008746 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008714:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2202      	movs	r2, #2
 800871c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01f      	beq.n	8008790 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01a      	beq.n	8008790 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008768:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2210      	movs	r2, #16
 8008770:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f80e 	bl	80087ac <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d101      	bne.n	80087e0 <HAL_DMA2D_ConfigLayer+0x20>
 80087dc:	2302      	movs	r3, #2
 80087de:	e079      	b.n	80088d4 <HAL_DMA2D_ConfigLayer+0x114>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	011b      	lsls	r3, r3, #4
 80087f4:	3318      	adds	r3, #24
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	4413      	add	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	041b      	lsls	r3, r3, #16
 8008806:	4313      	orrs	r3, r2
 8008808:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800880a:	4b35      	ldr	r3, [pc, #212]	@ (80088e0 <HAL_DMA2D_ConfigLayer+0x120>)
 800880c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2b0a      	cmp	r3, #10
 8008814:	d003      	beq.n	800881e <HAL_DMA2D_ConfigLayer+0x5e>
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b09      	cmp	r3, #9
 800881c:	d107      	bne.n	800882e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4313      	orrs	r3, r2
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	e005      	b.n	800883a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	061b      	lsls	r3, r3, #24
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d120      	bne.n	8008882 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	43db      	mvns	r3, r3
 800884a:	ea02 0103 	and.w	r1, r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	430a      	orrs	r2, r1
 8008856:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	6812      	ldr	r2, [r2, #0]
 8008860:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b0a      	cmp	r3, #10
 8008868:	d003      	beq.n	8008872 <HAL_DMA2D_ConfigLayer+0xb2>
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2b09      	cmp	r3, #9
 8008870:	d127      	bne.n	80088c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800887e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008880:	e01f      	b.n	80088c2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69da      	ldr	r2, [r3, #28]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	43db      	mvns	r3, r3
 800888c:	ea02 0103 	and.w	r1, r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	430a      	orrs	r2, r1
 8008898:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b0a      	cmp	r3, #10
 80088aa:	d003      	beq.n	80088b4 <HAL_DMA2D_ConfigLayer+0xf4>
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b09      	cmp	r3, #9
 80088b2:	d106      	bne.n	80088c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80088c0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	ff03000f 	.word	0xff03000f

080088e4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b08b      	sub	sp, #44	@ 0x2c
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088f8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	041a      	lsls	r2, r3, #16
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	431a      	orrs	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800891c:	d174      	bne.n	8008a08 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008924:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800892c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008934:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d108      	bne.n	8008956 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	431a      	orrs	r2, r3
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	4313      	orrs	r3, r2
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	627b      	str	r3, [r7, #36]	@ 0x24
 8008954:	e053      	b.n	80089fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d106      	bne.n	800896c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	4313      	orrs	r3, r2
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	4313      	orrs	r3, r2
 8008968:	627b      	str	r3, [r7, #36]	@ 0x24
 800896a:	e048      	b.n	80089fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b02      	cmp	r3, #2
 8008972:	d111      	bne.n	8008998 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	0cdb      	lsrs	r3, r3, #19
 8008978:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	0a9b      	lsrs	r3, r3, #10
 800897e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	08db      	lsrs	r3, r3, #3
 8008984:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	02db      	lsls	r3, r3, #11
 800898e:	4313      	orrs	r3, r2
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	627b      	str	r3, [r7, #36]	@ 0x24
 8008996:	e032      	b.n	80089fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d117      	bne.n	80089d0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	0fdb      	lsrs	r3, r3, #31
 80089a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	0cdb      	lsrs	r3, r3, #19
 80089aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	0adb      	lsrs	r3, r3, #11
 80089b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	08db      	lsrs	r3, r3, #3
 80089b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	029b      	lsls	r3, r3, #10
 80089c0:	431a      	orrs	r2, r3
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	03db      	lsls	r3, r3, #15
 80089c6:	4313      	orrs	r3, r2
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ce:	e016      	b.n	80089fe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	0f1b      	lsrs	r3, r3, #28
 80089d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	0d1b      	lsrs	r3, r3, #20
 80089da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	0b1b      	lsrs	r3, r3, #12
 80089e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	091b      	lsrs	r3, r3, #4
 80089e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	011a      	lsls	r2, r3, #4
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	021b      	lsls	r3, r3, #8
 80089f0:	431a      	orrs	r2, r3
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	031b      	lsls	r3, r3, #12
 80089f6:	4313      	orrs	r3, r2
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a04:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008a06:	e003      	b.n	8008a10 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	60da      	str	r2, [r3, #12]
}
 8008a10:	bf00      	nop
 8008a12:	372c      	adds	r7, #44	@ 0x2c
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b089      	sub	sp, #36	@ 0x24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008a26:	2300      	movs	r3, #0
 8008a28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8008a36:	2300      	movs	r3, #0
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	e175      	b.n	8008d28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
 8008a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	f040 8164 	bne.w	8008d22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d005      	beq.n	8008a72 <HAL_GPIO_Init+0x56>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d130      	bne.n	8008ad4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a82:	43db      	mvns	r3, r3
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	4013      	ands	r3, r2
 8008a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	091b      	lsrs	r3, r3, #4
 8008abe:	f003 0201 	and.w	r2, r3, #1
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d017      	beq.n	8008b10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	2203      	movs	r2, #3
 8008aec:	fa02 f303 	lsl.w	r3, r2, r3
 8008af0:	43db      	mvns	r3, r3
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	4013      	ands	r3, r2
 8008af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	fa02 f303 	lsl.w	r3, r2, r3
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f003 0303 	and.w	r3, r3, #3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d123      	bne.n	8008b64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	08da      	lsrs	r2, r3, #3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3208      	adds	r2, #8
 8008b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	220f      	movs	r2, #15
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	691a      	ldr	r2, [r3, #16]
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	08da      	lsrs	r2, r3, #3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	3208      	adds	r2, #8
 8008b5e:	69b9      	ldr	r1, [r7, #24]
 8008b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	2203      	movs	r2, #3
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	43db      	mvns	r3, r3
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f003 0203 	and.w	r2, r3, #3
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80be 	beq.w	8008d22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ba6:	4b66      	ldr	r3, [pc, #408]	@ (8008d40 <HAL_GPIO_Init+0x324>)
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008baa:	4a65      	ldr	r2, [pc, #404]	@ (8008d40 <HAL_GPIO_Init+0x324>)
 8008bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8008bb2:	4b63      	ldr	r3, [pc, #396]	@ (8008d40 <HAL_GPIO_Init+0x324>)
 8008bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008bbe:	4a61      	ldr	r2, [pc, #388]	@ (8008d44 <HAL_GPIO_Init+0x328>)
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	089b      	lsrs	r3, r3, #2
 8008bc4:	3302      	adds	r3, #2
 8008bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	220f      	movs	r2, #15
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	43db      	mvns	r3, r3
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	4013      	ands	r3, r2
 8008be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a58      	ldr	r2, [pc, #352]	@ (8008d48 <HAL_GPIO_Init+0x32c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d037      	beq.n	8008c5a <HAL_GPIO_Init+0x23e>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a57      	ldr	r2, [pc, #348]	@ (8008d4c <HAL_GPIO_Init+0x330>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d031      	beq.n	8008c56 <HAL_GPIO_Init+0x23a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a56      	ldr	r2, [pc, #344]	@ (8008d50 <HAL_GPIO_Init+0x334>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d02b      	beq.n	8008c52 <HAL_GPIO_Init+0x236>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a55      	ldr	r2, [pc, #340]	@ (8008d54 <HAL_GPIO_Init+0x338>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d025      	beq.n	8008c4e <HAL_GPIO_Init+0x232>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a54      	ldr	r2, [pc, #336]	@ (8008d58 <HAL_GPIO_Init+0x33c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d01f      	beq.n	8008c4a <HAL_GPIO_Init+0x22e>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a53      	ldr	r2, [pc, #332]	@ (8008d5c <HAL_GPIO_Init+0x340>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d019      	beq.n	8008c46 <HAL_GPIO_Init+0x22a>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a52      	ldr	r2, [pc, #328]	@ (8008d60 <HAL_GPIO_Init+0x344>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d013      	beq.n	8008c42 <HAL_GPIO_Init+0x226>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a51      	ldr	r2, [pc, #324]	@ (8008d64 <HAL_GPIO_Init+0x348>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00d      	beq.n	8008c3e <HAL_GPIO_Init+0x222>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a50      	ldr	r2, [pc, #320]	@ (8008d68 <HAL_GPIO_Init+0x34c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d007      	beq.n	8008c3a <HAL_GPIO_Init+0x21e>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a4f      	ldr	r2, [pc, #316]	@ (8008d6c <HAL_GPIO_Init+0x350>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d101      	bne.n	8008c36 <HAL_GPIO_Init+0x21a>
 8008c32:	2309      	movs	r3, #9
 8008c34:	e012      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c36:	230a      	movs	r3, #10
 8008c38:	e010      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c3a:	2308      	movs	r3, #8
 8008c3c:	e00e      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c3e:	2307      	movs	r3, #7
 8008c40:	e00c      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c42:	2306      	movs	r3, #6
 8008c44:	e00a      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c46:	2305      	movs	r3, #5
 8008c48:	e008      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c4a:	2304      	movs	r3, #4
 8008c4c:	e006      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e004      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e002      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e000      	b.n	8008c5c <HAL_GPIO_Init+0x240>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	69fa      	ldr	r2, [r7, #28]
 8008c5e:	f002 0203 	and.w	r2, r2, #3
 8008c62:	0092      	lsls	r2, r2, #2
 8008c64:	4093      	lsls	r3, r2
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008c6c:	4935      	ldr	r1, [pc, #212]	@ (8008d44 <HAL_GPIO_Init+0x328>)
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	089b      	lsrs	r3, r3, #2
 8008c72:	3302      	adds	r3, #2
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8008d70 <HAL_GPIO_Init+0x354>)
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	43db      	mvns	r3, r3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	4013      	ands	r3, r2
 8008c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c9e:	4a34      	ldr	r2, [pc, #208]	@ (8008d70 <HAL_GPIO_Init+0x354>)
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ca4:	4b32      	ldr	r3, [pc, #200]	@ (8008d70 <HAL_GPIO_Init+0x354>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	43db      	mvns	r3, r3
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008cc8:	4a29      	ldr	r2, [pc, #164]	@ (8008d70 <HAL_GPIO_Init+0x354>)
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008cce:	4b28      	ldr	r3, [pc, #160]	@ (8008d70 <HAL_GPIO_Init+0x354>)
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	43db      	mvns	r3, r3
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8008d70 <HAL_GPIO_Init+0x354>)
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8008d70 <HAL_GPIO_Init+0x354>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	43db      	mvns	r3, r3
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	4013      	ands	r3, r2
 8008d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008d1c:	4a14      	ldr	r2, [pc, #80]	@ (8008d70 <HAL_GPIO_Init+0x354>)
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	3301      	adds	r3, #1
 8008d26:	61fb      	str	r3, [r7, #28]
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b0f      	cmp	r3, #15
 8008d2c:	f67f ae86 	bls.w	8008a3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	3724      	adds	r7, #36	@ 0x24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	40023800 	.word	0x40023800
 8008d44:	40013800 	.word	0x40013800
 8008d48:	40020000 	.word	0x40020000
 8008d4c:	40020400 	.word	0x40020400
 8008d50:	40020800 	.word	0x40020800
 8008d54:	40020c00 	.word	0x40020c00
 8008d58:	40021000 	.word	0x40021000
 8008d5c:	40021400 	.word	0x40021400
 8008d60:	40021800 	.word	0x40021800
 8008d64:	40021c00 	.word	0x40021c00
 8008d68:	40022000 	.word	0x40022000
 8008d6c:	40022400 	.word	0x40022400
 8008d70:	40013c00 	.word	0x40013c00

08008d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	e0d9      	b.n	8008f44 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008d90:	2201      	movs	r2, #1
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	fa02 f303 	lsl.w	r3, r2, r3
 8008d98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	f040 80c9 	bne.w	8008f3e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008dac:	4a6b      	ldr	r2, [pc, #428]	@ (8008f5c <HAL_GPIO_DeInit+0x1e8>)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	089b      	lsrs	r3, r3, #2
 8008db2:	3302      	adds	r3, #2
 8008db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008db8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	220f      	movs	r2, #15
 8008dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a63      	ldr	r2, [pc, #396]	@ (8008f60 <HAL_GPIO_DeInit+0x1ec>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d037      	beq.n	8008e46 <HAL_GPIO_DeInit+0xd2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a62      	ldr	r2, [pc, #392]	@ (8008f64 <HAL_GPIO_DeInit+0x1f0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d031      	beq.n	8008e42 <HAL_GPIO_DeInit+0xce>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a61      	ldr	r2, [pc, #388]	@ (8008f68 <HAL_GPIO_DeInit+0x1f4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d02b      	beq.n	8008e3e <HAL_GPIO_DeInit+0xca>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a60      	ldr	r2, [pc, #384]	@ (8008f6c <HAL_GPIO_DeInit+0x1f8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d025      	beq.n	8008e3a <HAL_GPIO_DeInit+0xc6>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a5f      	ldr	r2, [pc, #380]	@ (8008f70 <HAL_GPIO_DeInit+0x1fc>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d01f      	beq.n	8008e36 <HAL_GPIO_DeInit+0xc2>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a5e      	ldr	r2, [pc, #376]	@ (8008f74 <HAL_GPIO_DeInit+0x200>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d019      	beq.n	8008e32 <HAL_GPIO_DeInit+0xbe>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a5d      	ldr	r2, [pc, #372]	@ (8008f78 <HAL_GPIO_DeInit+0x204>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d013      	beq.n	8008e2e <HAL_GPIO_DeInit+0xba>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a5c      	ldr	r2, [pc, #368]	@ (8008f7c <HAL_GPIO_DeInit+0x208>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00d      	beq.n	8008e2a <HAL_GPIO_DeInit+0xb6>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a5b      	ldr	r2, [pc, #364]	@ (8008f80 <HAL_GPIO_DeInit+0x20c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d007      	beq.n	8008e26 <HAL_GPIO_DeInit+0xb2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a5a      	ldr	r2, [pc, #360]	@ (8008f84 <HAL_GPIO_DeInit+0x210>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d101      	bne.n	8008e22 <HAL_GPIO_DeInit+0xae>
 8008e1e:	2309      	movs	r3, #9
 8008e20:	e012      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e22:	230a      	movs	r3, #10
 8008e24:	e010      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e26:	2308      	movs	r3, #8
 8008e28:	e00e      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e2a:	2307      	movs	r3, #7
 8008e2c:	e00c      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e2e:	2306      	movs	r3, #6
 8008e30:	e00a      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e32:	2305      	movs	r3, #5
 8008e34:	e008      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e36:	2304      	movs	r3, #4
 8008e38:	e006      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e004      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e002      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <HAL_GPIO_DeInit+0xd4>
 8008e46:	2300      	movs	r3, #0
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	f002 0203 	and.w	r2, r2, #3
 8008e4e:	0092      	lsls	r2, r2, #2
 8008e50:	4093      	lsls	r3, r2
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d132      	bne.n	8008ebe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008e58:	4b4b      	ldr	r3, [pc, #300]	@ (8008f88 <HAL_GPIO_DeInit+0x214>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	43db      	mvns	r3, r3
 8008e60:	4949      	ldr	r1, [pc, #292]	@ (8008f88 <HAL_GPIO_DeInit+0x214>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008e66:	4b48      	ldr	r3, [pc, #288]	@ (8008f88 <HAL_GPIO_DeInit+0x214>)
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	4946      	ldr	r1, [pc, #280]	@ (8008f88 <HAL_GPIO_DeInit+0x214>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008e74:	4b44      	ldr	r3, [pc, #272]	@ (8008f88 <HAL_GPIO_DeInit+0x214>)
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	4942      	ldr	r1, [pc, #264]	@ (8008f88 <HAL_GPIO_DeInit+0x214>)
 8008e7e:	4013      	ands	r3, r2
 8008e80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008e82:	4b41      	ldr	r3, [pc, #260]	@ (8008f88 <HAL_GPIO_DeInit+0x214>)
 8008e84:	689a      	ldr	r2, [r3, #8]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	43db      	mvns	r3, r3
 8008e8a:	493f      	ldr	r1, [pc, #252]	@ (8008f88 <HAL_GPIO_DeInit+0x214>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	220f      	movs	r2, #15
 8008e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8008f5c <HAL_GPIO_DeInit+0x1e8>)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	089b      	lsrs	r3, r3, #2
 8008ea6:	3302      	adds	r3, #2
 8008ea8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	43da      	mvns	r2, r3
 8008eb0:	482a      	ldr	r0, [pc, #168]	@ (8008f5c <HAL_GPIO_DeInit+0x1e8>)
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	089b      	lsrs	r3, r3, #2
 8008eb6:	400a      	ands	r2, r1
 8008eb8:	3302      	adds	r3, #2
 8008eba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	2103      	movs	r1, #3
 8008ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	401a      	ands	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	08da      	lsrs	r2, r3, #3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3208      	adds	r2, #8
 8008edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	220f      	movs	r2, #15
 8008eea:	fa02 f303 	lsl.w	r3, r2, r3
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	08d2      	lsrs	r2, r2, #3
 8008ef4:	4019      	ands	r1, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3208      	adds	r2, #8
 8008efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	2103      	movs	r1, #3
 8008f08:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	401a      	ands	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	2101      	movs	r1, #1
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f20:	43db      	mvns	r3, r3
 8008f22:	401a      	ands	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	2103      	movs	r1, #3
 8008f32:	fa01 f303 	lsl.w	r3, r1, r3
 8008f36:	43db      	mvns	r3, r3
 8008f38:	401a      	ands	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	3301      	adds	r3, #1
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2b0f      	cmp	r3, #15
 8008f48:	f67f af22 	bls.w	8008d90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008f4c:	bf00      	nop
 8008f4e:	bf00      	nop
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	40013800 	.word	0x40013800
 8008f60:	40020000 	.word	0x40020000
 8008f64:	40020400 	.word	0x40020400
 8008f68:	40020800 	.word	0x40020800
 8008f6c:	40020c00 	.word	0x40020c00
 8008f70:	40021000 	.word	0x40021000
 8008f74:	40021400 	.word	0x40021400
 8008f78:	40021800 	.word	0x40021800
 8008f7c:	40021c00 	.word	0x40021c00
 8008f80:	40022000 	.word	0x40022000
 8008f84:	40022400 	.word	0x40022400
 8008f88:	40013c00 	.word	0x40013c00

08008f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691a      	ldr	r2, [r3, #16]
 8008f9c:	887b      	ldrh	r3, [r7, #2]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	73fb      	strb	r3, [r7, #15]
 8008fa8:	e001      	b.n	8008fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	807b      	strh	r3, [r7, #2]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fcc:	787b      	ldrb	r3, [r7, #1]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fd2:	887a      	ldrh	r2, [r7, #2]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008fd8:	e003      	b.n	8008fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008fda:	887b      	ldrh	r3, [r7, #2]
 8008fdc:	041a      	lsls	r2, r3, #16
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	619a      	str	r2, [r3, #24]
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e08b      	b.n	800911a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7f9 fc22 	bl	8002860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2224      	movs	r2, #36	@ 0x24
 8009020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0201 	bic.w	r2, r2, #1
 8009032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009040:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009050:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d107      	bne.n	800906a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	e006      	b.n	8009078 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689a      	ldr	r2, [r3, #8]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009076:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d108      	bne.n	8009092 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	e007      	b.n	80090a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6859      	ldr	r1, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009124 <HAL_I2C_Init+0x134>)
 80090ae:	430b      	orrs	r3, r1
 80090b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691a      	ldr	r2, [r3, #16]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	430a      	orrs	r2, r1
 80090da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	69d9      	ldr	r1, [r3, #28]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1a      	ldr	r2, [r3, #32]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0201 	orr.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2220      	movs	r2, #32
 8009106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	02008000 	.word	0x02008000

08009128 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e021      	b.n	800917e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2224      	movs	r2, #36	@ 0x24
 800913e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0201 	bic.w	r2, r2, #1
 8009150:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7f9 fc2c 	bl	80029b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af02      	add	r7, sp, #8
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	4603      	mov	r3, r0
 8009198:	817b      	strh	r3, [r7, #10]
 800919a:	460b      	mov	r3, r1
 800919c:	813b      	strh	r3, [r7, #8]
 800919e:	4613      	mov	r3, r2
 80091a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	f040 80f9 	bne.w	80093a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <HAL_I2C_Mem_Write+0x34>
 80091b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d105      	bne.n	80091c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e0ed      	b.n	80093a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <HAL_I2C_Mem_Write+0x4e>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e0e6      	b.n	80093a4 <HAL_I2C_Mem_Write+0x21c>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80091de:	f7fe f8cd 	bl	800737c <HAL_GetTick>
 80091e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2319      	movs	r3, #25
 80091ea:	2201      	movs	r2, #1
 80091ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f000 fad1 	bl	8009798 <I2C_WaitOnFlagUntilTimeout>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e0d1      	b.n	80093a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2221      	movs	r2, #33	@ 0x21
 8009204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2240      	movs	r2, #64	@ 0x40
 800920c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a3a      	ldr	r2, [r7, #32]
 800921a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009220:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009228:	88f8      	ldrh	r0, [r7, #6]
 800922a:	893a      	ldrh	r2, [r7, #8]
 800922c:	8979      	ldrh	r1, [r7, #10]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	4603      	mov	r3, r0
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f9e1 	bl	8009600 <I2C_RequestMemoryWrite>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e0a9      	b.n	80093a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009254:	b29b      	uxth	r3, r3
 8009256:	2bff      	cmp	r3, #255	@ 0xff
 8009258:	d90e      	bls.n	8009278 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	22ff      	movs	r2, #255	@ 0xff
 800925e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009264:	b2da      	uxtb	r2, r3
 8009266:	8979      	ldrh	r1, [r7, #10]
 8009268:	2300      	movs	r3, #0
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 fc55 	bl	8009b20 <I2C_TransferConfig>
 8009276:	e00f      	b.n	8009298 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800927c:	b29a      	uxth	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009286:	b2da      	uxtb	r2, r3
 8009288:	8979      	ldrh	r1, [r7, #10]
 800928a:	2300      	movs	r3, #0
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 fc44 	bl	8009b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 fad4 	bl	800984a <I2C_WaitOnTXISFlagUntilTimeout>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d001      	beq.n	80092ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e07b      	b.n	80093a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b0:	781a      	ldrb	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d034      	beq.n	8009350 <HAL_I2C_Mem_Write+0x1c8>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d130      	bne.n	8009350 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f4:	2200      	movs	r2, #0
 80092f6:	2180      	movs	r1, #128	@ 0x80
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fa4d 	bl	8009798 <I2C_WaitOnFlagUntilTimeout>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e04d      	b.n	80093a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800930c:	b29b      	uxth	r3, r3
 800930e:	2bff      	cmp	r3, #255	@ 0xff
 8009310:	d90e      	bls.n	8009330 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	22ff      	movs	r2, #255	@ 0xff
 8009316:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800931c:	b2da      	uxtb	r2, r3
 800931e:	8979      	ldrh	r1, [r7, #10]
 8009320:	2300      	movs	r3, #0
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fbf9 	bl	8009b20 <I2C_TransferConfig>
 800932e:	e00f      	b.n	8009350 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800933e:	b2da      	uxtb	r2, r3
 8009340:	8979      	ldrh	r1, [r7, #10]
 8009342:	2300      	movs	r3, #0
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fbe8 	bl	8009b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009354:	b29b      	uxth	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d19e      	bne.n	8009298 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 faba 	bl	80098d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e01a      	b.n	80093a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2220      	movs	r2, #32
 8009374:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6859      	ldr	r1, [r3, #4]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <HAL_I2C_Mem_Write+0x224>)
 8009382:	400b      	ands	r3, r1
 8009384:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	e000      	b.n	80093a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80093a2:	2302      	movs	r3, #2
  }
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	fe00e800 	.word	0xfe00e800

080093b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af02      	add	r7, sp, #8
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	4608      	mov	r0, r1
 80093ba:	4611      	mov	r1, r2
 80093bc:	461a      	mov	r2, r3
 80093be:	4603      	mov	r3, r0
 80093c0:	817b      	strh	r3, [r7, #10]
 80093c2:	460b      	mov	r3, r1
 80093c4:	813b      	strh	r3, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	f040 80fd 	bne.w	80095d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <HAL_I2C_Mem_Read+0x34>
 80093de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d105      	bne.n	80093f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0f1      	b.n	80095d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d101      	bne.n	80093fe <HAL_I2C_Mem_Read+0x4e>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e0ea      	b.n	80095d4 <HAL_I2C_Mem_Read+0x224>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009406:	f7fd ffb9 	bl	800737c <HAL_GetTick>
 800940a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	2319      	movs	r3, #25
 8009412:	2201      	movs	r2, #1
 8009414:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 f9bd 	bl	8009798 <I2C_WaitOnFlagUntilTimeout>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e0d5      	b.n	80095d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2222      	movs	r2, #34	@ 0x22
 800942c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2240      	movs	r2, #64	@ 0x40
 8009434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a3a      	ldr	r2, [r7, #32]
 8009442:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009448:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009450:	88f8      	ldrh	r0, [r7, #6]
 8009452:	893a      	ldrh	r2, [r7, #8]
 8009454:	8979      	ldrh	r1, [r7, #10]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	4603      	mov	r3, r0
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 f921 	bl	80096a8 <I2C_RequestMemoryRead>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e0ad      	b.n	80095d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800947c:	b29b      	uxth	r3, r3
 800947e:	2bff      	cmp	r3, #255	@ 0xff
 8009480:	d90e      	bls.n	80094a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2201      	movs	r2, #1
 8009486:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800948c:	b2da      	uxtb	r2, r3
 800948e:	8979      	ldrh	r1, [r7, #10]
 8009490:	4b52      	ldr	r3, [pc, #328]	@ (80095dc <HAL_I2C_Mem_Read+0x22c>)
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 fb41 	bl	8009b20 <I2C_TransferConfig>
 800949e:	e00f      	b.n	80094c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	8979      	ldrh	r1, [r7, #10]
 80094b2:	4b4a      	ldr	r3, [pc, #296]	@ (80095dc <HAL_I2C_Mem_Read+0x22c>)
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 fb30 	bl	8009b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c6:	2200      	movs	r2, #0
 80094c8:	2104      	movs	r1, #4
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 f964 	bl	8009798 <I2C_WaitOnFlagUntilTimeout>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e07c      	b.n	80095d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e4:	b2d2      	uxtb	r2, r2
 80094e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094f6:	3b01      	subs	r3, #1
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009502:	b29b      	uxth	r3, r3
 8009504:	3b01      	subs	r3, #1
 8009506:	b29a      	uxth	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009510:	b29b      	uxth	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d034      	beq.n	8009580 <HAL_I2C_Mem_Read+0x1d0>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800951a:	2b00      	cmp	r3, #0
 800951c:	d130      	bne.n	8009580 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009524:	2200      	movs	r2, #0
 8009526:	2180      	movs	r1, #128	@ 0x80
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f935 	bl	8009798 <I2C_WaitOnFlagUntilTimeout>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e04d      	b.n	80095d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800953c:	b29b      	uxth	r3, r3
 800953e:	2bff      	cmp	r3, #255	@ 0xff
 8009540:	d90e      	bls.n	8009560 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800954c:	b2da      	uxtb	r2, r3
 800954e:	8979      	ldrh	r1, [r7, #10]
 8009550:	2300      	movs	r3, #0
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 fae1 	bl	8009b20 <I2C_TransferConfig>
 800955e:	e00f      	b.n	8009580 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800956e:	b2da      	uxtb	r2, r3
 8009570:	8979      	ldrh	r1, [r7, #10]
 8009572:	2300      	movs	r3, #0
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 fad0 	bl	8009b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009584:	b29b      	uxth	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d19a      	bne.n	80094c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 f9a2 	bl	80098d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e01a      	b.n	80095d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2220      	movs	r2, #32
 80095a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6859      	ldr	r1, [r3, #4]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	4b0b      	ldr	r3, [pc, #44]	@ (80095e0 <HAL_I2C_Mem_Read+0x230>)
 80095b2:	400b      	ands	r3, r1
 80095b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e000      	b.n	80095d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80095d2:	2302      	movs	r3, #2
  }
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	80002400 	.word	0x80002400
 80095e0:	fe00e800 	.word	0xfe00e800

080095e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095f2:	b2db      	uxtb	r3, r3
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af02      	add	r7, sp, #8
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	4608      	mov	r0, r1
 800960a:	4611      	mov	r1, r2
 800960c:	461a      	mov	r2, r3
 800960e:	4603      	mov	r3, r0
 8009610:	817b      	strh	r3, [r7, #10]
 8009612:	460b      	mov	r3, r1
 8009614:	813b      	strh	r3, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	b2da      	uxtb	r2, r3
 800961e:	8979      	ldrh	r1, [r7, #10]
 8009620:	4b20      	ldr	r3, [pc, #128]	@ (80096a4 <I2C_RequestMemoryWrite+0xa4>)
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fa79 	bl	8009b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	69b9      	ldr	r1, [r7, #24]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 f909 	bl	800984a <I2C_WaitOnTXISFlagUntilTimeout>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e02c      	b.n	800969c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d105      	bne.n	8009654 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009648:	893b      	ldrh	r3, [r7, #8]
 800964a:	b2da      	uxtb	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	629a      	str	r2, [r3, #40]	@ 0x28
 8009652:	e015      	b.n	8009680 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009654:	893b      	ldrh	r3, [r7, #8]
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	b29b      	uxth	r3, r3
 800965a:	b2da      	uxtb	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009662:	69fa      	ldr	r2, [r7, #28]
 8009664:	69b9      	ldr	r1, [r7, #24]
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 f8ef 	bl	800984a <I2C_WaitOnTXISFlagUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e012      	b.n	800969c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009676:	893b      	ldrh	r3, [r7, #8]
 8009678:	b2da      	uxtb	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	2200      	movs	r2, #0
 8009688:	2180      	movs	r1, #128	@ 0x80
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 f884 	bl	8009798 <I2C_WaitOnFlagUntilTimeout>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e000      	b.n	800969c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	80002000 	.word	0x80002000

080096a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	4608      	mov	r0, r1
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	817b      	strh	r3, [r7, #10]
 80096ba:	460b      	mov	r3, r1
 80096bc:	813b      	strh	r3, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80096c2:	88fb      	ldrh	r3, [r7, #6]
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	8979      	ldrh	r1, [r7, #10]
 80096c8:	4b20      	ldr	r3, [pc, #128]	@ (800974c <I2C_RequestMemoryRead+0xa4>)
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	2300      	movs	r3, #0
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 fa26 	bl	8009b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	69b9      	ldr	r1, [r7, #24]
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f8b6 	bl	800984a <I2C_WaitOnTXISFlagUntilTimeout>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e02c      	b.n	8009742 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096e8:	88fb      	ldrh	r3, [r7, #6]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d105      	bne.n	80096fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096ee:	893b      	ldrh	r3, [r7, #8]
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80096f8:	e015      	b.n	8009726 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80096fa:	893b      	ldrh	r3, [r7, #8]
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	b29b      	uxth	r3, r3
 8009700:	b2da      	uxtb	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	69b9      	ldr	r1, [r7, #24]
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f89c 	bl	800984a <I2C_WaitOnTXISFlagUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e012      	b.n	8009742 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800971c:	893b      	ldrh	r3, [r7, #8]
 800971e:	b2da      	uxtb	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2200      	movs	r2, #0
 800972e:	2140      	movs	r1, #64	@ 0x40
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 f831 	bl	8009798 <I2C_WaitOnFlagUntilTimeout>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e000      	b.n	8009742 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	80002000 	.word	0x80002000

08009750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b02      	cmp	r3, #2
 8009764:	d103      	bne.n	800976e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2200      	movs	r2, #0
 800976c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b01      	cmp	r3, #1
 800977a:	d007      	beq.n	800978c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	619a      	str	r2, [r3, #24]
  }
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	4613      	mov	r3, r2
 80097a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097a8:	e03b      	b.n	8009822 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 f8d6 	bl	8009960 <I2C_IsErrorOccurred>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e041      	b.n	8009842 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097c4:	d02d      	beq.n	8009822 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097c6:	f7fd fdd9 	bl	800737c <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d302      	bcc.n	80097dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d122      	bne.n	8009822 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	699a      	ldr	r2, [r3, #24]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	4013      	ands	r3, r2
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	bf0c      	ite	eq
 80097ec:	2301      	moveq	r3, #1
 80097ee:	2300      	movne	r3, #0
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	461a      	mov	r2, r3
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d113      	bne.n	8009822 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097fe:	f043 0220 	orr.w	r2, r3, #32
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2220      	movs	r2, #32
 800980a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e00f      	b.n	8009842 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	4013      	ands	r3, r2
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	429a      	cmp	r2, r3
 8009830:	bf0c      	ite	eq
 8009832:	2301      	moveq	r3, #1
 8009834:	2300      	movne	r3, #0
 8009836:	b2db      	uxtb	r3, r3
 8009838:	461a      	mov	r2, r3
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	429a      	cmp	r2, r3
 800983e:	d0b4      	beq.n	80097aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009856:	e033      	b.n	80098c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f87f 	bl	8009960 <I2C_IsErrorOccurred>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e031      	b.n	80098d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009872:	d025      	beq.n	80098c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009874:	f7fd fd82 	bl	800737c <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	429a      	cmp	r2, r3
 8009882:	d302      	bcc.n	800988a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d11a      	bne.n	80098c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	f003 0302 	and.w	r3, r3, #2
 8009894:	2b02      	cmp	r3, #2
 8009896:	d013      	beq.n	80098c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800989c:	f043 0220 	orr.w	r2, r3, #32
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e007      	b.n	80098d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d1c4      	bne.n	8009858 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098e4:	e02f      	b.n	8009946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	68b9      	ldr	r1, [r7, #8]
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 f838 	bl	8009960 <I2C_IsErrorOccurred>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e02d      	b.n	8009956 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098fa:	f7fd fd3f 	bl	800737c <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	429a      	cmp	r2, r3
 8009908:	d302      	bcc.n	8009910 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d11a      	bne.n	8009946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	2b20      	cmp	r3, #32
 800991c:	d013      	beq.n	8009946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009922:	f043 0220 	orr.w	r2, r3, #32
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e007      	b.n	8009956 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b20      	cmp	r3, #32
 8009952:	d1c8      	bne.n	80098e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	@ 0x28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	f003 0310 	and.w	r3, r3, #16
 8009988:	2b00      	cmp	r3, #0
 800998a:	d068      	beq.n	8009a5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2210      	movs	r2, #16
 8009992:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009994:	e049      	b.n	8009a2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800999c:	d045      	beq.n	8009a2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800999e:	f7fd fced 	bl	800737c <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d302      	bcc.n	80099b4 <I2C_IsErrorOccurred+0x54>
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d13a      	bne.n	8009a2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d6:	d121      	bne.n	8009a1c <I2C_IsErrorOccurred+0xbc>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099de:	d01d      	beq.n	8009a1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80099e0:	7cfb      	ldrb	r3, [r7, #19]
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	d01a      	beq.n	8009a1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80099f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80099f6:	f7fd fcc1 	bl	800737c <HAL_GetTick>
 80099fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099fc:	e00e      	b.n	8009a1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80099fe:	f7fd fcbd 	bl	800737c <HAL_GetTick>
 8009a02:	4602      	mov	r2, r0
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	2b19      	cmp	r3, #25
 8009a0a:	d907      	bls.n	8009a1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	f043 0320 	orr.w	r3, r3, #32
 8009a12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009a1a:	e006      	b.n	8009a2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	d1e9      	bne.n	80099fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	d003      	beq.n	8009a40 <I2C_IsErrorOccurred+0xe0>
 8009a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d0aa      	beq.n	8009996 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d103      	bne.n	8009a50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	f043 0304 	orr.w	r3, r3, #4
 8009a56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00b      	beq.n	8009a88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	f043 0301 	orr.w	r3, r3, #1
 8009a76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00b      	beq.n	8009aaa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	f043 0308 	orr.w	r3, r3, #8
 8009a98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009aa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00b      	beq.n	8009acc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	f043 0302 	orr.w	r3, r3, #2
 8009aba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009acc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01c      	beq.n	8009b0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7ff fe3b 	bl	8009750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6859      	ldr	r1, [r3, #4]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8009b1c <I2C_IsErrorOccurred+0x1bc>)
 8009ae6:	400b      	ands	r3, r1
 8009ae8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	431a      	orrs	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2220      	movs	r2, #32
 8009afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3728      	adds	r7, #40	@ 0x28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	fe00e800 	.word	0xfe00e800

08009b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b087      	sub	sp, #28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	607b      	str	r3, [r7, #4]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	817b      	strh	r3, [r7, #10]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b32:	897b      	ldrh	r3, [r7, #10]
 8009b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b38:	7a7b      	ldrb	r3, [r7, #9]
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b40:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b4e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	0d5b      	lsrs	r3, r3, #21
 8009b5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009b5e:	4b08      	ldr	r3, [pc, #32]	@ (8009b80 <I2C_TransferConfig+0x60>)
 8009b60:	430b      	orrs	r3, r1
 8009b62:	43db      	mvns	r3, r3
 8009b64:	ea02 0103 	and.w	r1, r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b72:	bf00      	nop
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	03ff63ff 	.word	0x03ff63ff

08009b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b20      	cmp	r3, #32
 8009b98:	d138      	bne.n	8009c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e032      	b.n	8009c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2224      	movs	r2, #36	@ 0x24
 8009bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f022 0201 	bic.w	r2, r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6819      	ldr	r1, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	430a      	orrs	r2, r1
 8009be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f042 0201 	orr.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e000      	b.n	8009c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c0c:	2302      	movs	r3, #2
  }
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d139      	bne.n	8009ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e033      	b.n	8009ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2224      	movs	r2, #36	@ 0x24
 8009c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0201 	orr.w	r2, r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ca4:	2302      	movs	r3, #2
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e08f      	b.n	8009de4 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7f8 ff27 	bl	8002b2c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699a      	ldr	r2, [r3, #24]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009cf4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6999      	ldr	r1, [r3, #24]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	041b      	lsls	r3, r3, #16
 8009d20:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6999      	ldr	r1, [r3, #24]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	041b      	lsls	r3, r3, #16
 8009d36:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a19      	ldr	r1, [r3, #32]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	430a      	orrs	r2, r1
 8009d44:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d4a:	041b      	lsls	r3, r3, #16
 8009d4c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d60:	041b      	lsls	r3, r3, #16
 8009d62:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009d78:	021b      	lsls	r3, r3, #8
 8009d7a:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009d94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009da8:	431a      	orrs	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0206 	orr.w	r2, r2, #6
 8009dc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	699a      	ldr	r2, [r3, #24]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0201 	orr.w	r2, r2, #1
 8009dd0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e02:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f003 0304 	and.w	r3, r3, #4
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d023      	beq.n	8009e56 <HAL_LTDC_IRQHandler+0x6a>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f003 0304 	and.w	r3, r3, #4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01e      	beq.n	8009e56 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f022 0204 	bic.w	r2, r2, #4
 8009e26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2204      	movs	r2, #4
 8009e2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e36:	f043 0201 	orr.w	r2, r3, #1
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2204      	movs	r2, #4
 8009e44:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f86f 	bl	8009f34 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f003 0302 	and.w	r3, r3, #2
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d023      	beq.n	8009ea8 <HAL_LTDC_IRQHandler+0xbc>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d01e      	beq.n	8009ea8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0202 	bic.w	r2, r2, #2
 8009e78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e88:	f043 0202 	orr.w	r2, r3, #2
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2204      	movs	r2, #4
 8009e96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f846 	bl	8009f34 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01b      	beq.n	8009eea <HAL_LTDC_IRQHandler+0xfe>
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d016      	beq.n	8009eea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 0201 	bic.w	r2, r2, #1
 8009eca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f82f 	bl	8009f48 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01b      	beq.n	8009f2c <HAL_LTDC_IRQHandler+0x140>
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f003 0308 	and.w	r3, r3, #8
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d016      	beq.n	8009f2c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0208 	bic.w	r2, r2, #8
 8009f0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2208      	movs	r2, #8
 8009f14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f818 	bl	8009f5c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009f2c:	bf00      	nop
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009f64:	bf00      	nop
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009f70:	b5b0      	push	{r4, r5, r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d101      	bne.n	8009f8a <HAL_LTDC_ConfigLayer+0x1a>
 8009f86:	2302      	movs	r3, #2
 8009f88:	e02c      	b.n	8009fe4 <HAL_LTDC_ConfigLayer+0x74>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2202      	movs	r2, #2
 8009f96:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2134      	movs	r1, #52	@ 0x34
 8009fa0:	fb01 f303 	mul.w	r3, r1, r3
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	4614      	mov	r4, r2
 8009fae:	461d      	mov	r5, r3
 8009fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	68b9      	ldr	r1, [r7, #8]
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f81f 	bl	800a008 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009fe2:	2300      	movs	r3, #0
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bdb0      	pop	{r4, r5, r7, pc}

08009fec <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(const LTDC_HandleTypeDef *hltdc)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009ffa:	b2db      	uxtb	r3, r3
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a008:	b480      	push	{r7}
 800a00a:	b089      	sub	sp, #36	@ 0x24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a024:	4413      	add	r3, r2
 800a026:	041b      	lsls	r3, r3, #16
 800a028:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	01db      	lsls	r3, r3, #7
 800a034:	4413      	add	r3, r2
 800a036:	3384      	adds	r3, #132	@ 0x84
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	6812      	ldr	r2, [r2, #0]
 800a03e:	4611      	mov	r1, r2
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	01d2      	lsls	r2, r2, #7
 800a044:	440a      	add	r2, r1
 800a046:	3284      	adds	r2, #132	@ 0x84
 800a048:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a04c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	0c1b      	lsrs	r3, r3, #16
 800a05a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a05e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a060:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4619      	mov	r1, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	01db      	lsls	r3, r3, #7
 800a06c:	440b      	add	r3, r1
 800a06e:	3384      	adds	r3, #132	@ 0x84
 800a070:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a076:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a086:	4413      	add	r3, r2
 800a088:	041b      	lsls	r3, r3, #16
 800a08a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	461a      	mov	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	01db      	lsls	r3, r3, #7
 800a096:	4413      	add	r3, r2
 800a098:	3384      	adds	r3, #132	@ 0x84
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	6812      	ldr	r2, [r2, #0]
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	01d2      	lsls	r2, r2, #7
 800a0a6:	440a      	add	r2, r1
 800a0a8:	3284      	adds	r2, #132	@ 0x84
 800a0aa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a0ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	689a      	ldr	r2, [r3, #8]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0be:	4413      	add	r3, r2
 800a0c0:	1c5a      	adds	r2, r3, #1
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	01db      	lsls	r3, r3, #7
 800a0cc:	440b      	add	r3, r1
 800a0ce:	3384      	adds	r3, #132	@ 0x84
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	01db      	lsls	r3, r3, #7
 800a0e2:	4413      	add	r3, r2
 800a0e4:	3384      	adds	r3, #132	@ 0x84
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	6812      	ldr	r2, [r2, #0]
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	01d2      	lsls	r2, r2, #7
 800a0f2:	440a      	add	r2, r1
 800a0f4:	3284      	adds	r2, #132	@ 0x84
 800a0f6:	f023 0307 	bic.w	r3, r3, #7
 800a0fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	01db      	lsls	r3, r3, #7
 800a106:	4413      	add	r3, r2
 800a108:	3384      	adds	r3, #132	@ 0x84
 800a10a:	461a      	mov	r2, r3
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a122:	041b      	lsls	r3, r3, #16
 800a124:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	061b      	lsls	r3, r3, #24
 800a12c:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a134:	461a      	mov	r2, r3
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	431a      	orrs	r2, r3
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	431a      	orrs	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4619      	mov	r1, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	01db      	lsls	r3, r3, #7
 800a148:	440b      	add	r3, r1
 800a14a:	3384      	adds	r3, #132	@ 0x84
 800a14c:	4619      	mov	r1, r3
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	4313      	orrs	r3, r2
 800a152:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	01db      	lsls	r3, r3, #7
 800a15e:	4413      	add	r3, r2
 800a160:	3384      	adds	r3, #132	@ 0x84
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	6812      	ldr	r2, [r2, #0]
 800a168:	4611      	mov	r1, r2
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	01d2      	lsls	r2, r2, #7
 800a16e:	440a      	add	r2, r1
 800a170:	3284      	adds	r2, #132	@ 0x84
 800a172:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a176:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	01db      	lsls	r3, r3, #7
 800a182:	4413      	add	r3, r2
 800a184:	3384      	adds	r3, #132	@ 0x84
 800a186:	461a      	mov	r2, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	01db      	lsls	r3, r3, #7
 800a198:	4413      	add	r3, r2
 800a19a:	3384      	adds	r3, #132	@ 0x84
 800a19c:	69da      	ldr	r2, [r3, #28]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	01db      	lsls	r3, r3, #7
 800a1a8:	440b      	add	r3, r1
 800a1aa:	3384      	adds	r3, #132	@ 0x84
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4b4f      	ldr	r3, [pc, #316]	@ (800a2ec <LTDC_SetConfig+0x2e4>)
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	69da      	ldr	r2, [r3, #28]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	68f9      	ldr	r1, [r7, #12]
 800a1be:	6809      	ldr	r1, [r1, #0]
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	01c9      	lsls	r1, r1, #7
 800a1c6:	4401      	add	r1, r0
 800a1c8:	3184      	adds	r1, #132	@ 0x84
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	01db      	lsls	r3, r3, #7
 800a1d8:	4413      	add	r3, r2
 800a1da:	3384      	adds	r3, #132	@ 0x84
 800a1dc:	461a      	mov	r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d102      	bne.n	800a1f2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	61fb      	str	r3, [r7, #28]
 800a1f0:	e01b      	b.n	800a22a <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d102      	bne.n	800a200 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	61fb      	str	r3, [r7, #28]
 800a1fe:	e014      	b.n	800a22a <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	2b04      	cmp	r3, #4
 800a206:	d00b      	beq.n	800a220 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d007      	beq.n	800a220 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a214:	2b03      	cmp	r3, #3
 800a216:	d003      	beq.n	800a220 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a21c:	2b07      	cmp	r3, #7
 800a21e:	d102      	bne.n	800a226 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a220:	2302      	movs	r3, #2
 800a222:	61fb      	str	r3, [r7, #28]
 800a224:	e001      	b.n	800a22a <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a226:	2301      	movs	r3, #1
 800a228:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	01db      	lsls	r3, r3, #7
 800a234:	4413      	add	r3, r2
 800a236:	3384      	adds	r3, #132	@ 0x84
 800a238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	4611      	mov	r1, r2
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	01d2      	lsls	r2, r2, #7
 800a244:	440a      	add	r2, r1
 800a246:	3284      	adds	r2, #132	@ 0x84
 800a248:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a24c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a252:	69fa      	ldr	r2, [r7, #28]
 800a254:	fb02 f303 	mul.w	r3, r2, r3
 800a258:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	6859      	ldr	r1, [r3, #4]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	1acb      	subs	r3, r1, r3
 800a264:	69f9      	ldr	r1, [r7, #28]
 800a266:	fb01 f303 	mul.w	r3, r1, r3
 800a26a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a26c:	68f9      	ldr	r1, [r7, #12]
 800a26e:	6809      	ldr	r1, [r1, #0]
 800a270:	4608      	mov	r0, r1
 800a272:	6879      	ldr	r1, [r7, #4]
 800a274:	01c9      	lsls	r1, r1, #7
 800a276:	4401      	add	r1, r0
 800a278:	3184      	adds	r1, #132	@ 0x84
 800a27a:	4313      	orrs	r3, r2
 800a27c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	01db      	lsls	r3, r3, #7
 800a288:	4413      	add	r3, r2
 800a28a:	3384      	adds	r3, #132	@ 0x84
 800a28c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4619      	mov	r1, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	01db      	lsls	r3, r3, #7
 800a298:	440b      	add	r3, r1
 800a29a:	3384      	adds	r3, #132	@ 0x84
 800a29c:	4619      	mov	r1, r3
 800a29e:	4b14      	ldr	r3, [pc, #80]	@ (800a2f0 <LTDC_SetConfig+0x2e8>)
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	01db      	lsls	r3, r3, #7
 800a2ae:	4413      	add	r3, r2
 800a2b0:	3384      	adds	r3, #132	@ 0x84
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	01db      	lsls	r3, r3, #7
 800a2c4:	4413      	add	r3, r2
 800a2c6:	3384      	adds	r3, #132	@ 0x84
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	6812      	ldr	r2, [r2, #0]
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	01d2      	lsls	r2, r2, #7
 800a2d4:	440a      	add	r2, r1
 800a2d6:	3284      	adds	r2, #132	@ 0x84
 800a2d8:	f043 0301 	orr.w	r3, r3, #1
 800a2dc:	6013      	str	r3, [r2, #0]
}
 800a2de:	bf00      	nop
 800a2e0:	3724      	adds	r7, #36	@ 0x24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	fffff8f8 	.word	0xfffff8f8
 800a2f0:	fffff800 	.word	0xfffff800

0800a2f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a2f8:	4b05      	ldr	r3, [pc, #20]	@ (800a310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a04      	ldr	r2, [pc, #16]	@ (800a310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a2fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a302:	6013      	str	r3, [r2, #0]
}
 800a304:	bf00      	nop
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	40007000 	.word	0x40007000

0800a314 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a31e:	4b23      	ldr	r3, [pc, #140]	@ (800a3ac <HAL_PWREx_EnableOverDrive+0x98>)
 800a320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a322:	4a22      	ldr	r2, [pc, #136]	@ (800a3ac <HAL_PWREx_EnableOverDrive+0x98>)
 800a324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a328:	6413      	str	r3, [r2, #64]	@ 0x40
 800a32a:	4b20      	ldr	r3, [pc, #128]	@ (800a3ac <HAL_PWREx_EnableOverDrive+0x98>)
 800a32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a336:	4b1e      	ldr	r3, [pc, #120]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a1d      	ldr	r2, [pc, #116]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a33c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a340:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a342:	f7fd f81b 	bl	800737c <HAL_GetTick>
 800a346:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a348:	e009      	b.n	800a35e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a34a:	f7fd f817 	bl	800737c <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a358:	d901      	bls.n	800a35e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e022      	b.n	800a3a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a35e:	4b14      	ldr	r3, [pc, #80]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a36a:	d1ee      	bne.n	800a34a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a36c:	4b10      	ldr	r3, [pc, #64]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a0f      	ldr	r2, [pc, #60]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a378:	f7fd f800 	bl	800737c <HAL_GetTick>
 800a37c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a37e:	e009      	b.n	800a394 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a380:	f7fc fffc 	bl	800737c <HAL_GetTick>
 800a384:	4602      	mov	r2, r0
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a38e:	d901      	bls.n	800a394 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e007      	b.n	800a3a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a394:	4b06      	ldr	r3, [pc, #24]	@ (800a3b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a39c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3a0:	d1ee      	bne.n	800a380 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	40023800 	.word	0x40023800
 800a3b0:	40007000 	.word	0x40007000

0800a3b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e291      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8087 	beq.w	800a4e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a3d8:	4b96      	ldr	r3, [pc, #600]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f003 030c 	and.w	r3, r3, #12
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d00c      	beq.n	800a3fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3e4:	4b93      	ldr	r3, [pc, #588]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f003 030c 	and.w	r3, r3, #12
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	d112      	bne.n	800a416 <HAL_RCC_OscConfig+0x62>
 800a3f0:	4b90      	ldr	r3, [pc, #576]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3fc:	d10b      	bne.n	800a416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3fe:	4b8d      	ldr	r3, [pc, #564]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d06c      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x130>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d168      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e26b      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a41e:	d106      	bne.n	800a42e <HAL_RCC_OscConfig+0x7a>
 800a420:	4b84      	ldr	r3, [pc, #528]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a83      	ldr	r2, [pc, #524]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	e02e      	b.n	800a48c <HAL_RCC_OscConfig+0xd8>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10c      	bne.n	800a450 <HAL_RCC_OscConfig+0x9c>
 800a436:	4b7f      	ldr	r3, [pc, #508]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a7e      	ldr	r2, [pc, #504]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a43c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	4b7c      	ldr	r3, [pc, #496]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a7b      	ldr	r2, [pc, #492]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	e01d      	b.n	800a48c <HAL_RCC_OscConfig+0xd8>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a458:	d10c      	bne.n	800a474 <HAL_RCC_OscConfig+0xc0>
 800a45a:	4b76      	ldr	r3, [pc, #472]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a75      	ldr	r2, [pc, #468]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	4b73      	ldr	r3, [pc, #460]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a72      	ldr	r2, [pc, #456]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a46c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	e00b      	b.n	800a48c <HAL_RCC_OscConfig+0xd8>
 800a474:	4b6f      	ldr	r3, [pc, #444]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a6e      	ldr	r2, [pc, #440]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a47a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	4b6c      	ldr	r3, [pc, #432]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a6b      	ldr	r2, [pc, #428]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a48a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d013      	beq.n	800a4bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a494:	f7fc ff72 	bl	800737c <HAL_GetTick>
 800a498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a49a:	e008      	b.n	800a4ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a49c:	f7fc ff6e 	bl	800737c <HAL_GetTick>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	2b64      	cmp	r3, #100	@ 0x64
 800a4a8:	d901      	bls.n	800a4ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e21f      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4ae:	4b61      	ldr	r3, [pc, #388]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d0f0      	beq.n	800a49c <HAL_RCC_OscConfig+0xe8>
 800a4ba:	e014      	b.n	800a4e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4bc:	f7fc ff5e 	bl	800737c <HAL_GetTick>
 800a4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4c4:	f7fc ff5a 	bl	800737c <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b64      	cmp	r3, #100	@ 0x64
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e20b      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4d6:	4b57      	ldr	r3, [pc, #348]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1f0      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x110>
 800a4e2:	e000      	b.n	800a4e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d069      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a4f2:	4b50      	ldr	r3, [pc, #320]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f003 030c 	and.w	r3, r3, #12
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00b      	beq.n	800a516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a4fe:	4b4d      	ldr	r3, [pc, #308]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f003 030c 	and.w	r3, r3, #12
 800a506:	2b08      	cmp	r3, #8
 800a508:	d11c      	bne.n	800a544 <HAL_RCC_OscConfig+0x190>
 800a50a:	4b4a      	ldr	r3, [pc, #296]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d116      	bne.n	800a544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a516:	4b47      	ldr	r3, [pc, #284]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <HAL_RCC_OscConfig+0x17a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d001      	beq.n	800a52e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e1df      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a52e:	4b41      	ldr	r3, [pc, #260]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	493d      	ldr	r1, [pc, #244]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a542:	e040      	b.n	800a5c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d023      	beq.n	800a594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a54c:	4b39      	ldr	r3, [pc, #228]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a38      	ldr	r2, [pc, #224]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a558:	f7fc ff10 	bl	800737c <HAL_GetTick>
 800a55c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a55e:	e008      	b.n	800a572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a560:	f7fc ff0c 	bl	800737c <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d901      	bls.n	800a572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e1bd      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a572:	4b30      	ldr	r3, [pc, #192]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0f0      	beq.n	800a560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a57e:	4b2d      	ldr	r3, [pc, #180]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	4929      	ldr	r1, [pc, #164]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	600b      	str	r3, [r1, #0]
 800a592:	e018      	b.n	800a5c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a594:	4b27      	ldr	r3, [pc, #156]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a26      	ldr	r2, [pc, #152]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a59a:	f023 0301 	bic.w	r3, r3, #1
 800a59e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a0:	f7fc feec 	bl	800737c <HAL_GetTick>
 800a5a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5a6:	e008      	b.n	800a5ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5a8:	f7fc fee8 	bl	800737c <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e199      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5ba:	4b1e      	ldr	r3, [pc, #120]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0302 	and.w	r3, r3, #2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1f0      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f003 0308 	and.w	r3, r3, #8
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d038      	beq.n	800a644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d019      	beq.n	800a60e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5da:	4b16      	ldr	r3, [pc, #88]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a5dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5de:	4a15      	ldr	r2, [pc, #84]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a5e0:	f043 0301 	orr.w	r3, r3, #1
 800a5e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5e6:	f7fc fec9 	bl	800737c <HAL_GetTick>
 800a5ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5ec:	e008      	b.n	800a600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5ee:	f7fc fec5 	bl	800737c <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d901      	bls.n	800a600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e176      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a600:	4b0c      	ldr	r3, [pc, #48]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d0f0      	beq.n	800a5ee <HAL_RCC_OscConfig+0x23a>
 800a60c:	e01a      	b.n	800a644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a60e:	4b09      	ldr	r3, [pc, #36]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a612:	4a08      	ldr	r2, [pc, #32]	@ (800a634 <HAL_RCC_OscConfig+0x280>)
 800a614:	f023 0301 	bic.w	r3, r3, #1
 800a618:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61a:	f7fc feaf 	bl	800737c <HAL_GetTick>
 800a61e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a620:	e00a      	b.n	800a638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a622:	f7fc feab 	bl	800737c <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d903      	bls.n	800a638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e15c      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
 800a634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a638:	4b91      	ldr	r3, [pc, #580]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a63a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1ee      	bne.n	800a622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 80a4 	beq.w	800a79a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a652:	4b8b      	ldr	r3, [pc, #556]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10d      	bne.n	800a67a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a65e:	4b88      	ldr	r3, [pc, #544]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a662:	4a87      	ldr	r2, [pc, #540]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a668:	6413      	str	r3, [r2, #64]	@ 0x40
 800a66a:	4b85      	ldr	r3, [pc, #532]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a66c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a66e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a672:	60bb      	str	r3, [r7, #8]
 800a674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a676:	2301      	movs	r3, #1
 800a678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a67a:	4b82      	ldr	r3, [pc, #520]	@ (800a884 <HAL_RCC_OscConfig+0x4d0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a682:	2b00      	cmp	r3, #0
 800a684:	d118      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a686:	4b7f      	ldr	r3, [pc, #508]	@ (800a884 <HAL_RCC_OscConfig+0x4d0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a7e      	ldr	r2, [pc, #504]	@ (800a884 <HAL_RCC_OscConfig+0x4d0>)
 800a68c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a692:	f7fc fe73 	bl	800737c <HAL_GetTick>
 800a696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a698:	e008      	b.n	800a6ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a69a:	f7fc fe6f 	bl	800737c <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b64      	cmp	r3, #100	@ 0x64
 800a6a6:	d901      	bls.n	800a6ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e120      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6ac:	4b75      	ldr	r3, [pc, #468]	@ (800a884 <HAL_RCC_OscConfig+0x4d0>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0f0      	beq.n	800a69a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d106      	bne.n	800a6ce <HAL_RCC_OscConfig+0x31a>
 800a6c0:	4b6f      	ldr	r3, [pc, #444]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6c4:	4a6e      	ldr	r2, [pc, #440]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6c6:	f043 0301 	orr.w	r3, r3, #1
 800a6ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6cc:	e02d      	b.n	800a72a <HAL_RCC_OscConfig+0x376>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10c      	bne.n	800a6f0 <HAL_RCC_OscConfig+0x33c>
 800a6d6:	4b6a      	ldr	r3, [pc, #424]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6da:	4a69      	ldr	r2, [pc, #420]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6dc:	f023 0301 	bic.w	r3, r3, #1
 800a6e0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6e2:	4b67      	ldr	r3, [pc, #412]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6e6:	4a66      	ldr	r2, [pc, #408]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6e8:	f023 0304 	bic.w	r3, r3, #4
 800a6ec:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6ee:	e01c      	b.n	800a72a <HAL_RCC_OscConfig+0x376>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	2b05      	cmp	r3, #5
 800a6f6:	d10c      	bne.n	800a712 <HAL_RCC_OscConfig+0x35e>
 800a6f8:	4b61      	ldr	r3, [pc, #388]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6fc:	4a60      	ldr	r2, [pc, #384]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6fe:	f043 0304 	orr.w	r3, r3, #4
 800a702:	6713      	str	r3, [r2, #112]	@ 0x70
 800a704:	4b5e      	ldr	r3, [pc, #376]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a708:	4a5d      	ldr	r2, [pc, #372]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a710:	e00b      	b.n	800a72a <HAL_RCC_OscConfig+0x376>
 800a712:	4b5b      	ldr	r3, [pc, #364]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a716:	4a5a      	ldr	r2, [pc, #360]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a718:	f023 0301 	bic.w	r3, r3, #1
 800a71c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a71e:	4b58      	ldr	r3, [pc, #352]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a722:	4a57      	ldr	r2, [pc, #348]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a724:	f023 0304 	bic.w	r3, r3, #4
 800a728:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d015      	beq.n	800a75e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a732:	f7fc fe23 	bl	800737c <HAL_GetTick>
 800a736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a738:	e00a      	b.n	800a750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a73a:	f7fc fe1f 	bl	800737c <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a748:	4293      	cmp	r3, r2
 800a74a:	d901      	bls.n	800a750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e0ce      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a750:	4b4b      	ldr	r3, [pc, #300]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0ee      	beq.n	800a73a <HAL_RCC_OscConfig+0x386>
 800a75c:	e014      	b.n	800a788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a75e:	f7fc fe0d 	bl	800737c <HAL_GetTick>
 800a762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a764:	e00a      	b.n	800a77c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a766:	f7fc fe09 	bl	800737c <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a774:	4293      	cmp	r3, r2
 800a776:	d901      	bls.n	800a77c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e0b8      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a77c:	4b40      	ldr	r3, [pc, #256]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a77e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a780:	f003 0302 	and.w	r3, r3, #2
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1ee      	bne.n	800a766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d105      	bne.n	800a79a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a78e:	4b3c      	ldr	r3, [pc, #240]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a792:	4a3b      	ldr	r2, [pc, #236]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a798:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 80a4 	beq.w	800a8ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a7a4:	4b36      	ldr	r3, [pc, #216]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f003 030c 	and.w	r3, r3, #12
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d06b      	beq.n	800a888 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d149      	bne.n	800a84c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7b8:	4b31      	ldr	r3, [pc, #196]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a30      	ldr	r2, [pc, #192]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a7be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c4:	f7fc fdda 	bl	800737c <HAL_GetTick>
 800a7c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7ca:	e008      	b.n	800a7de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7cc:	f7fc fdd6 	bl	800737c <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e087      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7de:	4b28      	ldr	r3, [pc, #160]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1f0      	bne.n	800a7cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	69da      	ldr	r2, [r3, #28]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f8:	019b      	lsls	r3, r3, #6
 800a7fa:	431a      	orrs	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a800:	085b      	lsrs	r3, r3, #1
 800a802:	3b01      	subs	r3, #1
 800a804:	041b      	lsls	r3, r3, #16
 800a806:	431a      	orrs	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a80c:	061b      	lsls	r3, r3, #24
 800a80e:	4313      	orrs	r3, r2
 800a810:	4a1b      	ldr	r2, [pc, #108]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a812:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a816:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a818:	4b19      	ldr	r3, [pc, #100]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a18      	ldr	r2, [pc, #96]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a81e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a824:	f7fc fdaa 	bl	800737c <HAL_GetTick>
 800a828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a82a:	e008      	b.n	800a83e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a82c:	f7fc fda6 	bl	800737c <HAL_GetTick>
 800a830:	4602      	mov	r2, r0
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	2b02      	cmp	r3, #2
 800a838:	d901      	bls.n	800a83e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e057      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a83e:	4b10      	ldr	r3, [pc, #64]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0f0      	beq.n	800a82c <HAL_RCC_OscConfig+0x478>
 800a84a:	e04f      	b.n	800a8ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a84c:	4b0c      	ldr	r3, [pc, #48]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a0b      	ldr	r2, [pc, #44]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a858:	f7fc fd90 	bl	800737c <HAL_GetTick>
 800a85c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a85e:	e008      	b.n	800a872 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a860:	f7fc fd8c 	bl	800737c <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d901      	bls.n	800a872 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e03d      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a872:	4b03      	ldr	r3, [pc, #12]	@ (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f0      	bne.n	800a860 <HAL_RCC_OscConfig+0x4ac>
 800a87e:	e035      	b.n	800a8ec <HAL_RCC_OscConfig+0x538>
 800a880:	40023800 	.word	0x40023800
 800a884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a888:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f8 <HAL_RCC_OscConfig+0x544>)
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d028      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d121      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d11a      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a8be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d111      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ce:	085b      	lsrs	r3, r3, #1
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d107      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d001      	beq.n	800a8ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e000      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	40023800 	.word	0x40023800

0800a8fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e0d0      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a914:	4b6a      	ldr	r3, [pc, #424]	@ (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 030f 	and.w	r3, r3, #15
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d910      	bls.n	800a944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a922:	4b67      	ldr	r3, [pc, #412]	@ (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f023 020f 	bic.w	r2, r3, #15
 800a92a:	4965      	ldr	r1, [pc, #404]	@ (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	4313      	orrs	r3, r2
 800a930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a932:	4b63      	ldr	r3, [pc, #396]	@ (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 030f 	and.w	r3, r3, #15
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d001      	beq.n	800a944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e0b8      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d020      	beq.n	800a992 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d005      	beq.n	800a968 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a95c:	4b59      	ldr	r3, [pc, #356]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	4a58      	ldr	r2, [pc, #352]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0308 	and.w	r3, r3, #8
 800a970:	2b00      	cmp	r3, #0
 800a972:	d005      	beq.n	800a980 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a974:	4b53      	ldr	r3, [pc, #332]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	4a52      	ldr	r2, [pc, #328]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a97a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a97e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a980:	4b50      	ldr	r3, [pc, #320]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	494d      	ldr	r1, [pc, #308]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d040      	beq.n	800aa20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d107      	bne.n	800a9b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9a6:	4b47      	ldr	r3, [pc, #284]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d115      	bne.n	800a9de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e07f      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d107      	bne.n	800a9ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9be:	4b41      	ldr	r3, [pc, #260]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e073      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9ce:	4b3d      	ldr	r3, [pc, #244]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e06b      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9de:	4b39      	ldr	r3, [pc, #228]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f023 0203 	bic.w	r2, r3, #3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	4936      	ldr	r1, [pc, #216]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9f0:	f7fc fcc4 	bl	800737c <HAL_GetTick>
 800a9f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9f6:	e00a      	b.n	800aa0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9f8:	f7fc fcc0 	bl	800737c <HAL_GetTick>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d901      	bls.n	800aa0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e053      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa0e:	4b2d      	ldr	r3, [pc, #180]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	f003 020c 	and.w	r2, r3, #12
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d1eb      	bne.n	800a9f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa20:	4b27      	ldr	r3, [pc, #156]	@ (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 030f 	and.w	r3, r3, #15
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d210      	bcs.n	800aa50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa2e:	4b24      	ldr	r3, [pc, #144]	@ (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f023 020f 	bic.w	r2, r3, #15
 800aa36:	4922      	ldr	r1, [pc, #136]	@ (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa3e:	4b20      	ldr	r3, [pc, #128]	@ (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 030f 	and.w	r3, r3, #15
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d001      	beq.n	800aa50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e032      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d008      	beq.n	800aa6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa5c:	4b19      	ldr	r3, [pc, #100]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	4916      	ldr	r1, [pc, #88]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0308 	and.w	r3, r3, #8
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d009      	beq.n	800aa8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aa7a:	4b12      	ldr	r3, [pc, #72]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	490e      	ldr	r1, [pc, #56]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa8e:	f000 f821 	bl	800aad4 <HAL_RCC_GetSysClockFreq>
 800aa92:	4602      	mov	r2, r0
 800aa94:	4b0b      	ldr	r3, [pc, #44]	@ (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	091b      	lsrs	r3, r3, #4
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	490a      	ldr	r1, [pc, #40]	@ (800aac8 <HAL_RCC_ClockConfig+0x1cc>)
 800aaa0:	5ccb      	ldrb	r3, [r1, r3]
 800aaa2:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa6:	4a09      	ldr	r2, [pc, #36]	@ (800aacc <HAL_RCC_ClockConfig+0x1d0>)
 800aaa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aaaa:	4b09      	ldr	r3, [pc, #36]	@ (800aad0 <HAL_RCC_ClockConfig+0x1d4>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fb ff50 	bl	8006954 <HAL_InitTick>

  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	40023c00 	.word	0x40023c00
 800aac4:	40023800 	.word	0x40023800
 800aac8:	080147b8 	.word	0x080147b8
 800aacc:	20000078 	.word	0x20000078
 800aad0:	2000007c 	.word	0x2000007c

0800aad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aad8:	b090      	sub	sp, #64	@ 0x40
 800aada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34
 800aae0:	2300      	movs	r3, #0
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aae4:	2300      	movs	r3, #0
 800aae6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aaec:	4b59      	ldr	r3, [pc, #356]	@ (800ac54 <HAL_RCC_GetSysClockFreq+0x180>)
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f003 030c 	and.w	r3, r3, #12
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d00d      	beq.n	800ab14 <HAL_RCC_GetSysClockFreq+0x40>
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	f200 80a1 	bhi.w	800ac40 <HAL_RCC_GetSysClockFreq+0x16c>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <HAL_RCC_GetSysClockFreq+0x34>
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	d003      	beq.n	800ab0e <HAL_RCC_GetSysClockFreq+0x3a>
 800ab06:	e09b      	b.n	800ac40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ab08:	4b53      	ldr	r3, [pc, #332]	@ (800ac58 <HAL_RCC_GetSysClockFreq+0x184>)
 800ab0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ab0c:	e09b      	b.n	800ac46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ab0e:	4b53      	ldr	r3, [pc, #332]	@ (800ac5c <HAL_RCC_GetSysClockFreq+0x188>)
 800ab10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ab12:	e098      	b.n	800ac46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab14:	4b4f      	ldr	r3, [pc, #316]	@ (800ac54 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ab1e:	4b4d      	ldr	r3, [pc, #308]	@ (800ac54 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d028      	beq.n	800ab7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab2a:	4b4a      	ldr	r3, [pc, #296]	@ (800ac54 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	099b      	lsrs	r3, r3, #6
 800ab30:	2200      	movs	r2, #0
 800ab32:	623b      	str	r3, [r7, #32]
 800ab34:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	4b47      	ldr	r3, [pc, #284]	@ (800ac5c <HAL_RCC_GetSysClockFreq+0x188>)
 800ab40:	fb03 f201 	mul.w	r2, r3, r1
 800ab44:	2300      	movs	r3, #0
 800ab46:	fb00 f303 	mul.w	r3, r0, r3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	4a43      	ldr	r2, [pc, #268]	@ (800ac5c <HAL_RCC_GetSysClockFreq+0x188>)
 800ab4e:	fba0 1202 	umull	r1, r2, r0, r2
 800ab52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab54:	460a      	mov	r2, r1
 800ab56:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ab58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab5a:	4413      	add	r3, r2
 800ab5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab60:	2200      	movs	r2, #0
 800ab62:	61bb      	str	r3, [r7, #24]
 800ab64:	61fa      	str	r2, [r7, #28]
 800ab66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ab6e:	f7f6 f883 	bl	8000c78 <__aeabi_uldivmod>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4613      	mov	r3, r2
 800ab78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab7a:	e053      	b.n	800ac24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab7c:	4b35      	ldr	r3, [pc, #212]	@ (800ac54 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	099b      	lsrs	r3, r3, #6
 800ab82:	2200      	movs	r2, #0
 800ab84:	613b      	str	r3, [r7, #16]
 800ab86:	617a      	str	r2, [r7, #20]
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ab8e:	f04f 0b00 	mov.w	fp, #0
 800ab92:	4652      	mov	r2, sl
 800ab94:	465b      	mov	r3, fp
 800ab96:	f04f 0000 	mov.w	r0, #0
 800ab9a:	f04f 0100 	mov.w	r1, #0
 800ab9e:	0159      	lsls	r1, r3, #5
 800aba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aba4:	0150      	lsls	r0, r2, #5
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	ebb2 080a 	subs.w	r8, r2, sl
 800abae:	eb63 090b 	sbc.w	r9, r3, fp
 800abb2:	f04f 0200 	mov.w	r2, #0
 800abb6:	f04f 0300 	mov.w	r3, #0
 800abba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800abbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800abc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800abc6:	ebb2 0408 	subs.w	r4, r2, r8
 800abca:	eb63 0509 	sbc.w	r5, r3, r9
 800abce:	f04f 0200 	mov.w	r2, #0
 800abd2:	f04f 0300 	mov.w	r3, #0
 800abd6:	00eb      	lsls	r3, r5, #3
 800abd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abdc:	00e2      	lsls	r2, r4, #3
 800abde:	4614      	mov	r4, r2
 800abe0:	461d      	mov	r5, r3
 800abe2:	eb14 030a 	adds.w	r3, r4, sl
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	eb45 030b 	adc.w	r3, r5, fp
 800abec:	607b      	str	r3, [r7, #4]
 800abee:	f04f 0200 	mov.w	r2, #0
 800abf2:	f04f 0300 	mov.w	r3, #0
 800abf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800abfa:	4629      	mov	r1, r5
 800abfc:	028b      	lsls	r3, r1, #10
 800abfe:	4621      	mov	r1, r4
 800ac00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ac04:	4621      	mov	r1, r4
 800ac06:	028a      	lsls	r2, r1, #10
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac0e:	2200      	movs	r2, #0
 800ac10:	60bb      	str	r3, [r7, #8]
 800ac12:	60fa      	str	r2, [r7, #12]
 800ac14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac18:	f7f6 f82e 	bl	8000c78 <__aeabi_uldivmod>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4613      	mov	r3, r2
 800ac22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ac24:	4b0b      	ldr	r3, [pc, #44]	@ (800ac54 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	0c1b      	lsrs	r3, r3, #16
 800ac2a:	f003 0303 	and.w	r3, r3, #3
 800ac2e:	3301      	adds	r3, #1
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ac34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ac3e:	e002      	b.n	800ac46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ac40:	4b05      	ldr	r3, [pc, #20]	@ (800ac58 <HAL_RCC_GetSysClockFreq+0x184>)
 800ac42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ac44:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3740      	adds	r7, #64	@ 0x40
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac52:	bf00      	nop
 800ac54:	40023800 	.word	0x40023800
 800ac58:	00f42400 	.word	0x00f42400
 800ac5c:	017d7840 	.word	0x017d7840

0800ac60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac64:	4b03      	ldr	r3, [pc, #12]	@ (800ac74 <HAL_RCC_GetHCLKFreq+0x14>)
 800ac66:	681b      	ldr	r3, [r3, #0]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	20000078 	.word	0x20000078

0800ac78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ac7c:	f7ff fff0 	bl	800ac60 <HAL_RCC_GetHCLKFreq>
 800ac80:	4602      	mov	r2, r0
 800ac82:	4b05      	ldr	r3, [pc, #20]	@ (800ac98 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	0a9b      	lsrs	r3, r3, #10
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	4903      	ldr	r1, [pc, #12]	@ (800ac9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac8e:	5ccb      	ldrb	r3, [r1, r3]
 800ac90:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	40023800 	.word	0x40023800
 800ac9c:	080147c8 	.word	0x080147c8

0800aca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aca4:	f7ff ffdc 	bl	800ac60 <HAL_RCC_GetHCLKFreq>
 800aca8:	4602      	mov	r2, r0
 800acaa:	4b05      	ldr	r3, [pc, #20]	@ (800acc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	0b5b      	lsrs	r3, r3, #13
 800acb0:	f003 0307 	and.w	r3, r3, #7
 800acb4:	4903      	ldr	r1, [pc, #12]	@ (800acc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800acb6:	5ccb      	ldrb	r3, [r1, r3]
 800acb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	40023800 	.word	0x40023800
 800acc4:	080147c8 	.word	0x080147c8

0800acc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	220f      	movs	r2, #15
 800acd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800acd8:	4b12      	ldr	r3, [pc, #72]	@ (800ad24 <HAL_RCC_GetClockConfig+0x5c>)
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f003 0203 	and.w	r2, r3, #3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ace4:	4b0f      	ldr	r3, [pc, #60]	@ (800ad24 <HAL_RCC_GetClockConfig+0x5c>)
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800acf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ad24 <HAL_RCC_GetClockConfig+0x5c>)
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800acfc:	4b09      	ldr	r3, [pc, #36]	@ (800ad24 <HAL_RCC_GetClockConfig+0x5c>)
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	08db      	lsrs	r3, r3, #3
 800ad02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ad0a:	4b07      	ldr	r3, [pc, #28]	@ (800ad28 <HAL_RCC_GetClockConfig+0x60>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 020f 	and.w	r2, r3, #15
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	601a      	str	r2, [r3, #0]
}
 800ad16:	bf00      	nop
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	40023800 	.word	0x40023800
 800ad28:	40023c00 	.word	0x40023c00

0800ad2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d012      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ad54:	4b69      	ldr	r3, [pc, #420]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	4a68      	ldr	r2, [pc, #416]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ad5e:	6093      	str	r3, [r2, #8]
 800ad60:	4b66      	ldr	r3, [pc, #408]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad68:	4964      	ldr	r1, [pc, #400]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ad76:	2301      	movs	r3, #1
 800ad78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d017      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad86:	4b5d      	ldr	r3, [pc, #372]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad94:	4959      	ldr	r1, [pc, #356]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ada4:	d101      	bne.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ada6:	2301      	movs	r3, #1
 800ada8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800adb2:	2301      	movs	r3, #1
 800adb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d017      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800adc2:	4b4e      	ldr	r3, [pc, #312]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adc8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add0:	494a      	ldr	r1, [pc, #296]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800add2:	4313      	orrs	r3, r2
 800add4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800addc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ade0:	d101      	bne.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ade2:	2301      	movs	r3, #1
 800ade4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	d101      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800adee:	2301      	movs	r3, #1
 800adf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800adfe:	2301      	movs	r3, #1
 800ae00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0320 	and.w	r3, r3, #32
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 808b 	beq.w	800af26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ae10:	4b3a      	ldr	r3, [pc, #232]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae14:	4a39      	ldr	r2, [pc, #228]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae1a:	6413      	str	r3, [r2, #64]	@ 0x40
 800ae1c:	4b37      	ldr	r3, [pc, #220]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ae24:	60bb      	str	r3, [r7, #8]
 800ae26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ae28:	4b35      	ldr	r3, [pc, #212]	@ (800af00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a34      	ldr	r2, [pc, #208]	@ (800af00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ae2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae34:	f7fc faa2 	bl	800737c <HAL_GetTick>
 800ae38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ae3a:	e008      	b.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae3c:	f7fc fa9e 	bl	800737c <HAL_GetTick>
 800ae40:	4602      	mov	r2, r0
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	2b64      	cmp	r3, #100	@ 0x64
 800ae48:	d901      	bls.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	e357      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ae4e:	4b2c      	ldr	r3, [pc, #176]	@ (800af00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d0f0      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ae5a:	4b28      	ldr	r3, [pc, #160]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d035      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d02e      	beq.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae78:	4b20      	ldr	r3, [pc, #128]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ae82:	4b1e      	ldr	r3, [pc, #120]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae86:	4a1d      	ldr	r2, [pc, #116]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ae8c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ae8e:	4b1b      	ldr	r3, [pc, #108]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae92:	4a1a      	ldr	r2, [pc, #104]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ae9a:	4a18      	ldr	r2, [pc, #96]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aea0:	4b16      	ldr	r3, [pc, #88]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d114      	bne.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeac:	f7fc fa66 	bl	800737c <HAL_GetTick>
 800aeb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aeb2:	e00a      	b.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aeb4:	f7fc fa62 	bl	800737c <HAL_GetTick>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d901      	bls.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e319      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aeca:	4b0c      	ldr	r3, [pc, #48]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0ee      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aede:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aee2:	d111      	bne.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800aee4:	4b05      	ldr	r3, [pc, #20]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800aef0:	4b04      	ldr	r3, [pc, #16]	@ (800af04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800aef2:	400b      	ands	r3, r1
 800aef4:	4901      	ldr	r1, [pc, #4]	@ (800aefc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	608b      	str	r3, [r1, #8]
 800aefa:	e00b      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800aefc:	40023800 	.word	0x40023800
 800af00:	40007000 	.word	0x40007000
 800af04:	0ffffcff 	.word	0x0ffffcff
 800af08:	4baa      	ldr	r3, [pc, #680]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	4aa9      	ldr	r2, [pc, #676]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af0e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800af12:	6093      	str	r3, [r2, #8]
 800af14:	4ba7      	ldr	r3, [pc, #668]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af20:	49a4      	ldr	r1, [pc, #656]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af22:	4313      	orrs	r3, r2
 800af24:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0310 	and.w	r3, r3, #16
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d010      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af32:	4ba0      	ldr	r3, [pc, #640]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af38:	4a9e      	ldr	r2, [pc, #632]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800af42:	4b9c      	ldr	r3, [pc, #624]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af44:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4c:	4999      	ldr	r1, [pc, #612]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af4e:	4313      	orrs	r3, r2
 800af50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00a      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800af60:	4b94      	ldr	r3, [pc, #592]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af6e:	4991      	ldr	r1, [pc, #580]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af70:	4313      	orrs	r3, r2
 800af72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800af82:	4b8c      	ldr	r3, [pc, #560]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af90:	4988      	ldr	r1, [pc, #544]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af92:	4313      	orrs	r3, r2
 800af94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00a      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800afa4:	4b83      	ldr	r3, [pc, #524]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afb2:	4980      	ldr	r1, [pc, #512]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afb4:	4313      	orrs	r3, r2
 800afb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00a      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800afc6:	4b7b      	ldr	r3, [pc, #492]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd4:	4977      	ldr	r1, [pc, #476]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afd6:	4313      	orrs	r3, r2
 800afd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00a      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800afe8:	4b72      	ldr	r3, [pc, #456]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afee:	f023 0203 	bic.w	r2, r3, #3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aff6:	496f      	ldr	r1, [pc, #444]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aff8:	4313      	orrs	r3, r2
 800affa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00a      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b00a:	4b6a      	ldr	r3, [pc, #424]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b010:	f023 020c 	bic.w	r2, r3, #12
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b018:	4966      	ldr	r1, [pc, #408]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00a      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b02c:	4b61      	ldr	r3, [pc, #388]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b032:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b03a:	495e      	ldr	r1, [pc, #376]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00a      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b04e:	4b59      	ldr	r3, [pc, #356]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b054:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b05c:	4955      	ldr	r1, [pc, #340]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00a      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b070:	4b50      	ldr	r3, [pc, #320]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b076:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b07e:	494d      	ldr	r1, [pc, #308]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b080:	4313      	orrs	r3, r2
 800b082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b092:	4b48      	ldr	r3, [pc, #288]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b098:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0a0:	4944      	ldr	r1, [pc, #272]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00a      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b0b4:	4b3f      	ldr	r3, [pc, #252]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0c2:	493c      	ldr	r1, [pc, #240]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00a      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b0d6:	4b37      	ldr	r3, [pc, #220]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0e4:	4933      	ldr	r1, [pc, #204]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00a      	beq.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b0f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0fe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b106:	492b      	ldr	r1, [pc, #172]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b108:	4313      	orrs	r3, r2
 800b10a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b116:	2b00      	cmp	r3, #0
 800b118:	d011      	beq.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b11a:	4b26      	ldr	r3, [pc, #152]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b120:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b128:	4922      	ldr	r1, [pc, #136]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b138:	d101      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b13a:	2301      	movs	r3, #1
 800b13c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0308 	and.w	r3, r3, #8
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b14a:	2301      	movs	r3, #1
 800b14c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b15a:	4b16      	ldr	r3, [pc, #88]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b160:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b168:	4912      	ldr	r1, [pc, #72]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00b      	beq.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b17c:	4b0d      	ldr	r3, [pc, #52]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b182:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18c:	4909      	ldr	r1, [pc, #36]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b18e:	4313      	orrs	r3, r2
 800b190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d006      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 80d9 	beq.w	800b35a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b1a8:	4b02      	ldr	r3, [pc, #8]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a01      	ldr	r2, [pc, #4]	@ (800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b1b2:	e001      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b1b4:	40023800 	.word	0x40023800
 800b1b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1ba:	f7fc f8df 	bl	800737c <HAL_GetTick>
 800b1be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b1c0:	e008      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b1c2:	f7fc f8db 	bl	800737c <HAL_GetTick>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	2b64      	cmp	r3, #100	@ 0x64
 800b1ce:	d901      	bls.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e194      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b1d4:	4b6c      	ldr	r3, [pc, #432]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1f0      	bne.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d021      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d11d      	bne.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b1f4:	4b64      	ldr	r3, [pc, #400]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1fa:	0c1b      	lsrs	r3, r3, #16
 800b1fc:	f003 0303 	and.w	r3, r3, #3
 800b200:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b202:	4b61      	ldr	r3, [pc, #388]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b208:	0e1b      	lsrs	r3, r3, #24
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	019a      	lsls	r2, r3, #6
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	041b      	lsls	r3, r3, #16
 800b21a:	431a      	orrs	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	061b      	lsls	r3, r3, #24
 800b220:	431a      	orrs	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	071b      	lsls	r3, r3, #28
 800b228:	4957      	ldr	r1, [pc, #348]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b244:	d00a      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d02e      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b25a:	d129      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b25c:	4b4a      	ldr	r3, [pc, #296]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b262:	0c1b      	lsrs	r3, r3, #16
 800b264:	f003 0303 	and.w	r3, r3, #3
 800b268:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b26a:	4b47      	ldr	r3, [pc, #284]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b270:	0f1b      	lsrs	r3, r3, #28
 800b272:	f003 0307 	and.w	r3, r3, #7
 800b276:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	019a      	lsls	r2, r3, #6
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	061b      	lsls	r3, r3, #24
 800b28a:	431a      	orrs	r2, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	071b      	lsls	r3, r3, #28
 800b290:	493d      	ldr	r1, [pc, #244]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b292:	4313      	orrs	r3, r2
 800b294:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b298:	4b3b      	ldr	r3, [pc, #236]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b29a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b29e:	f023 021f 	bic.w	r2, r3, #31
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	4937      	ldr	r1, [pc, #220]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01d      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b2bc:	4b32      	ldr	r3, [pc, #200]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2c2:	0e1b      	lsrs	r3, r3, #24
 800b2c4:	f003 030f 	and.w	r3, r3, #15
 800b2c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2d0:	0f1b      	lsrs	r3, r3, #28
 800b2d2:	f003 0307 	and.w	r3, r3, #7
 800b2d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	019a      	lsls	r2, r3, #6
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	691b      	ldr	r3, [r3, #16]
 800b2e2:	041b      	lsls	r3, r3, #16
 800b2e4:	431a      	orrs	r2, r3
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	061b      	lsls	r3, r3, #24
 800b2ea:	431a      	orrs	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	071b      	lsls	r3, r3, #28
 800b2f0:	4925      	ldr	r1, [pc, #148]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d011      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	019a      	lsls	r2, r3, #6
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	041b      	lsls	r3, r3, #16
 800b310:	431a      	orrs	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	061b      	lsls	r3, r3, #24
 800b318:	431a      	orrs	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	071b      	lsls	r3, r3, #28
 800b320:	4919      	ldr	r1, [pc, #100]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b322:	4313      	orrs	r3, r2
 800b324:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b328:	4b17      	ldr	r3, [pc, #92]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a16      	ldr	r2, [pc, #88]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b32e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b334:	f7fc f822 	bl	800737c <HAL_GetTick>
 800b338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b33a:	e008      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b33c:	f7fc f81e 	bl	800737c <HAL_GetTick>
 800b340:	4602      	mov	r2, r0
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	2b64      	cmp	r3, #100	@ 0x64
 800b348:	d901      	bls.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b34a:	2303      	movs	r3, #3
 800b34c:	e0d7      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b34e:	4b0e      	ldr	r3, [pc, #56]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0f0      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	f040 80cd 	bne.w	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b362:	4b09      	ldr	r3, [pc, #36]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a08      	ldr	r2, [pc, #32]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b36c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b36e:	f7fc f805 	bl	800737c <HAL_GetTick>
 800b372:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b374:	e00a      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b376:	f7fc f801 	bl	800737c <HAL_GetTick>
 800b37a:	4602      	mov	r2, r0
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	2b64      	cmp	r3, #100	@ 0x64
 800b382:	d903      	bls.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e0ba      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b388:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b38c:	4b5e      	ldr	r3, [pc, #376]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b398:	d0ed      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d009      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d02e      	beq.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d12a      	bne.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b3c2:	4b51      	ldr	r3, [pc, #324]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3c8:	0c1b      	lsrs	r3, r3, #16
 800b3ca:	f003 0303 	and.w	r3, r3, #3
 800b3ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b3d0:	4b4d      	ldr	r3, [pc, #308]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d6:	0f1b      	lsrs	r3, r3, #28
 800b3d8:	f003 0307 	and.w	r3, r3, #7
 800b3dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	019a      	lsls	r2, r3, #6
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	041b      	lsls	r3, r3, #16
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	061b      	lsls	r3, r3, #24
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	071b      	lsls	r3, r3, #28
 800b3f6:	4944      	ldr	r1, [pc, #272]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b3fe:	4b42      	ldr	r3, [pc, #264]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b404:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b40c:	3b01      	subs	r3, #1
 800b40e:	021b      	lsls	r3, r3, #8
 800b410:	493d      	ldr	r1, [pc, #244]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b412:	4313      	orrs	r3, r2
 800b414:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b420:	2b00      	cmp	r3, #0
 800b422:	d022      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b42c:	d11d      	bne.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b42e:	4b36      	ldr	r3, [pc, #216]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b434:	0e1b      	lsrs	r3, r3, #24
 800b436:	f003 030f 	and.w	r3, r3, #15
 800b43a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b43c:	4b32      	ldr	r3, [pc, #200]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b442:	0f1b      	lsrs	r3, r3, #28
 800b444:	f003 0307 	and.w	r3, r3, #7
 800b448:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	019a      	lsls	r2, r3, #6
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	041b      	lsls	r3, r3, #16
 800b456:	431a      	orrs	r2, r3
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	061b      	lsls	r3, r3, #24
 800b45c:	431a      	orrs	r2, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	071b      	lsls	r3, r3, #28
 800b462:	4929      	ldr	r1, [pc, #164]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b464:	4313      	orrs	r3, r2
 800b466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 0308 	and.w	r3, r3, #8
 800b472:	2b00      	cmp	r3, #0
 800b474:	d028      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b476:	4b24      	ldr	r3, [pc, #144]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b47c:	0e1b      	lsrs	r3, r3, #24
 800b47e:	f003 030f 	and.w	r3, r3, #15
 800b482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b484:	4b20      	ldr	r3, [pc, #128]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b48a:	0c1b      	lsrs	r3, r3, #16
 800b48c:	f003 0303 	and.w	r3, r3, #3
 800b490:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	019a      	lsls	r2, r3, #6
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	041b      	lsls	r3, r3, #16
 800b49c:	431a      	orrs	r2, r3
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	061b      	lsls	r3, r3, #24
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	071b      	lsls	r3, r3, #28
 800b4aa:	4917      	ldr	r1, [pc, #92]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b4b2:	4b15      	ldr	r3, [pc, #84]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c0:	4911      	ldr	r1, [pc, #68]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a0e      	ldr	r2, [pc, #56]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b4ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4d4:	f7fb ff52 	bl	800737c <HAL_GetTick>
 800b4d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b4da:	e008      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b4dc:	f7fb ff4e 	bl	800737c <HAL_GetTick>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	2b64      	cmp	r3, #100	@ 0x64
 800b4e8:	d901      	bls.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e007      	b.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b4ee:	4b06      	ldr	r3, [pc, #24]	@ (800b508 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4fa:	d1ef      	bne.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3720      	adds	r7, #32
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	40023800 	.word	0x40023800

0800b50c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d101      	bne.n	800b51e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e071      	b.n	800b602 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	7f5b      	ldrb	r3, [r3, #29]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d105      	bne.n	800b534 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7f9 f988 	bl	8004844 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2202      	movs	r2, #2
 800b538:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	f003 0310 	and.w	r3, r3, #16
 800b544:	2b10      	cmp	r3, #16
 800b546:	d053      	beq.n	800b5f0 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	22ca      	movs	r2, #202	@ 0xca
 800b54e:	625a      	str	r2, [r3, #36]	@ 0x24
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2253      	movs	r2, #83	@ 0x53
 800b556:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 fac7 	bl	800baec <RTC_EnterInitMode>
 800b55e:	4603      	mov	r3, r0
 800b560:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d12a      	bne.n	800b5be <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	6899      	ldr	r1, [r3, #8]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	4b26      	ldr	r3, [pc, #152]	@ (800b60c <HAL_RTC_Init+0x100>)
 800b574:	400b      	ands	r3, r1
 800b576:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	6899      	ldr	r1, [r3, #8]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	431a      	orrs	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	431a      	orrs	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	68d2      	ldr	r2, [r2, #12]
 800b59e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6919      	ldr	r1, [r3, #16]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	041a      	lsls	r2, r3, #16
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fad0 	bl	800bb5a <RTC_ExitInitMode>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d110      	bne.n	800b5e6 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f022 0208 	bic.w	r2, r2, #8
 800b5d2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	699a      	ldr	r2, [r3, #24]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	22ff      	movs	r2, #255	@ 0xff
 800b5ec:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5ee:	e001      	b.n	800b5f4 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d102      	bne.n	800b600 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	ff8fffbf 	.word	0xff8fffbf

0800b610 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b610:	b590      	push	{r4, r7, lr}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	7f1b      	ldrb	r3, [r3, #28]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d101      	bne.n	800b62c <HAL_RTC_SetTime+0x1c>
 800b628:	2302      	movs	r3, #2
 800b62a:	e085      	b.n	800b738 <HAL_RTC_SetTime+0x128>
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2201      	movs	r2, #1
 800b630:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2202      	movs	r2, #2
 800b636:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d126      	bne.n	800b68c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d102      	bne.n	800b652 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2200      	movs	r2, #0
 800b650:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	4618      	mov	r0, r3
 800b658:	f000 faa4 	bl	800bba4 <RTC_ByteToBcd2>
 800b65c:	4603      	mov	r3, r0
 800b65e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	785b      	ldrb	r3, [r3, #1]
 800b664:	4618      	mov	r0, r3
 800b666:	f000 fa9d 	bl	800bba4 <RTC_ByteToBcd2>
 800b66a:	4603      	mov	r3, r0
 800b66c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b66e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	789b      	ldrb	r3, [r3, #2]
 800b674:	4618      	mov	r0, r3
 800b676:	f000 fa95 	bl	800bba4 <RTC_ByteToBcd2>
 800b67a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b67c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	78db      	ldrb	r3, [r3, #3]
 800b684:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b686:	4313      	orrs	r3, r2
 800b688:	617b      	str	r3, [r7, #20]
 800b68a:	e018      	b.n	800b6be <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b696:	2b00      	cmp	r3, #0
 800b698:	d102      	bne.n	800b6a0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2200      	movs	r2, #0
 800b69e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	785b      	ldrb	r3, [r3, #1]
 800b6aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b6ac:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b6b2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	78db      	ldrb	r3, [r3, #3]
 800b6b8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	22ca      	movs	r2, #202	@ 0xca
 800b6c4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2253      	movs	r2, #83	@ 0x53
 800b6cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f000 fa0c 	bl	800baec <RTC_EnterInitMode>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b6d8:	7cfb      	ldrb	r3, [r7, #19]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d11e      	bne.n	800b71c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	6979      	ldr	r1, [r7, #20]
 800b6e4:	4b16      	ldr	r3, [pc, #88]	@ (800b740 <HAL_RTC_SetTime+0x130>)
 800b6e6:	400b      	ands	r3, r1
 800b6e8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b6f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6899      	ldr	r1, [r3, #8]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	68da      	ldr	r2, [r3, #12]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	431a      	orrs	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	430a      	orrs	r2, r1
 800b710:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fa21 	bl	800bb5a <RTC_ExitInitMode>
 800b718:	4603      	mov	r3, r0
 800b71a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b71c:	7cfb      	ldrb	r3, [r7, #19]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d102      	bne.n	800b728 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	22ff      	movs	r2, #255	@ 0xff
 800b72e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	771a      	strb	r2, [r3, #28]

  return status;
 800b736:	7cfb      	ldrb	r3, [r7, #19]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	371c      	adds	r7, #28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd90      	pop	{r4, r7, pc}
 800b740:	007f7f7f 	.word	0x007f7f7f

0800b744 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b744:	b590      	push	{r4, r7, lr}
 800b746:	b087      	sub	sp, #28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b750:	2300      	movs	r3, #0
 800b752:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	7f1b      	ldrb	r3, [r3, #28]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d101      	bne.n	800b760 <HAL_RTC_SetDate+0x1c>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e06f      	b.n	800b840 <HAL_RTC_SetDate+0xfc>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2201      	movs	r2, #1
 800b764:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2202      	movs	r2, #2
 800b76a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10e      	bne.n	800b790 <HAL_RTC_SetDate+0x4c>
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	785b      	ldrb	r3, [r3, #1]
 800b776:	f003 0310 	and.w	r3, r3, #16
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d008      	beq.n	800b790 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	785b      	ldrb	r3, [r3, #1]
 800b782:	f023 0310 	bic.w	r3, r3, #16
 800b786:	b2db      	uxtb	r3, r3
 800b788:	330a      	adds	r3, #10
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d11c      	bne.n	800b7d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	78db      	ldrb	r3, [r3, #3]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 fa02 	bl	800bba4 <RTC_ByteToBcd2>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	785b      	ldrb	r3, [r3, #1]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 f9fb 	bl	800bba4 <RTC_ByteToBcd2>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b7b2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	789b      	ldrb	r3, [r3, #2]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 f9f3 	bl	800bba4 <RTC_ByteToBcd2>
 800b7be:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b7c0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	617b      	str	r3, [r7, #20]
 800b7ce:	e00e      	b.n	800b7ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	78db      	ldrb	r3, [r3, #3]
 800b7d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	785b      	ldrb	r3, [r3, #1]
 800b7da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7dc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	22ca      	movs	r2, #202	@ 0xca
 800b7f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2253      	movs	r2, #83	@ 0x53
 800b7fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 f974 	bl	800baec <RTC_EnterInitMode>
 800b804:	4603      	mov	r3, r0
 800b806:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b808:	7cfb      	ldrb	r3, [r7, #19]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10a      	bne.n	800b824 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	6979      	ldr	r1, [r7, #20]
 800b814:	4b0c      	ldr	r3, [pc, #48]	@ (800b848 <HAL_RTC_SetDate+0x104>)
 800b816:	400b      	ands	r3, r1
 800b818:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 f99d 	bl	800bb5a <RTC_ExitInitMode>
 800b820:	4603      	mov	r3, r0
 800b822:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b824:	7cfb      	ldrb	r3, [r7, #19]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d102      	bne.n	800b830 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	22ff      	movs	r2, #255	@ 0xff
 800b836:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	771a      	strb	r2, [r3, #28]

  return status;
 800b83e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b840:	4618      	mov	r0, r3
 800b842:	371c      	adds	r7, #28
 800b844:	46bd      	mov	sp, r7
 800b846:	bd90      	pop	{r4, r7, pc}
 800b848:	00ffff3f 	.word	0x00ffff3f

0800b84c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b84c:	b590      	push	{r4, r7, lr}
 800b84e:	b089      	sub	sp, #36	@ 0x24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b85c:	2300      	movs	r3, #0
 800b85e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b860:	2300      	movs	r3, #0
 800b862:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	7f1b      	ldrb	r3, [r3, #28]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d101      	bne.n	800b870 <HAL_RTC_SetAlarm+0x24>
 800b86c:	2302      	movs	r3, #2
 800b86e:	e113      	b.n	800ba98 <HAL_RTC_SetAlarm+0x24c>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2201      	movs	r2, #1
 800b874:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2202      	movs	r2, #2
 800b87a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d137      	bne.n	800b8f2 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d102      	bne.n	800b896 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2200      	movs	r2, #0
 800b894:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 f982 	bl	800bba4 <RTC_ByteToBcd2>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	785b      	ldrb	r3, [r3, #1]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 f97b 	bl	800bba4 <RTC_ByteToBcd2>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b8b2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	789b      	ldrb	r3, [r3, #2]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 f973 	bl	800bba4 <RTC_ByteToBcd2>
 800b8be:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b8c0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	78db      	ldrb	r3, [r3, #3]
 800b8c8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b8ca:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 f965 	bl	800bba4 <RTC_ByteToBcd2>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b8de:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b8e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	e023      	b.n	800b93a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d102      	bne.n	800b906 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2200      	movs	r2, #0
 800b904:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	785b      	ldrb	r3, [r3, #1]
 800b910:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b912:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b918:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	78db      	ldrb	r3, [r3, #3]
 800b91e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b920:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b928:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b92a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b930:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b936:	4313      	orrs	r3, r2
 800b938:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b942:	4313      	orrs	r3, r2
 800b944:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	22ca      	movs	r2, #202	@ 0xca
 800b94c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2253      	movs	r2, #83	@ 0x53
 800b954:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b95a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b95e:	d148      	bne.n	800b9f2 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	689a      	ldr	r2, [r3, #8]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b96e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b97e:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	b2da      	uxtb	r2, r3
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b990:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b992:	f7fb fcf3 	bl	800737c <HAL_GetTick>
 800b996:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b998:	e013      	b.n	800b9c2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b99a:	f7fb fcef 	bl	800737c <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b9a8:	d90b      	bls.n	800b9c2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	22ff      	movs	r2, #255	@ 0xff
 800b9b0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2203      	movs	r2, #3
 800b9b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	e06a      	b.n	800ba98 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d0e4      	beq.n	800b99a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	69fa      	ldr	r2, [r7, #28]
 800b9d6:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9ee:	609a      	str	r2, [r3, #8]
 800b9f0:	e047      	b.n	800ba82 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689a      	ldr	r2, [r3, #8]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ba00:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ba10:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ba22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ba24:	f7fb fcaa 	bl	800737c <HAL_GetTick>
 800ba28:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ba2a:	e013      	b.n	800ba54 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba2c:	f7fb fca6 	bl	800737c <HAL_GetTick>
 800ba30:	4602      	mov	r2, r0
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba3a:	d90b      	bls.n	800ba54 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	22ff      	movs	r2, #255	@ 0xff
 800ba42:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2203      	movs	r2, #3
 800ba48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e021      	b.n	800ba98 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	f003 0302 	and.w	r3, r3, #2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0e4      	beq.n	800ba2c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	69fa      	ldr	r2, [r7, #28]
 800ba68:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba80:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	22ff      	movs	r2, #255	@ 0xff
 800ba88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3724      	adds	r7, #36	@ 0x24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd90      	pop	{r4, r7, pc}

0800baa0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800baa8:	2300      	movs	r3, #0
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a0d      	ldr	r2, [pc, #52]	@ (800bae8 <HAL_RTC_WaitForSynchro+0x48>)
 800bab2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bab4:	f7fb fc62 	bl	800737c <HAL_GetTick>
 800bab8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800baba:	e009      	b.n	800bad0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800babc:	f7fb fc5e 	bl	800737c <HAL_GetTick>
 800bac0:	4602      	mov	r2, r0
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	1ad3      	subs	r3, r2, r3
 800bac6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800baca:	d901      	bls.n	800bad0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	e007      	b.n	800bae0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	f003 0320 	and.w	r3, r3, #32
 800bada:	2b00      	cmp	r3, #0
 800badc:	d0ee      	beq.n	800babc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	0001ff5f 	.word	0x0001ff5f

0800baec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800baf4:	2300      	movs	r3, #0
 800baf6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d122      	bne.n	800bb50 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68da      	ldr	r2, [r3, #12]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bb18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bb1a:	f7fb fc2f 	bl	800737c <HAL_GetTick>
 800bb1e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bb20:	e00c      	b.n	800bb3c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bb22:	f7fb fc2b 	bl	800737c <HAL_GetTick>
 800bb26:	4602      	mov	r2, r0
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bb30:	d904      	bls.n	800bb3c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2204      	movs	r2, #4
 800bb36:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d102      	bne.n	800bb50 <RTC_EnterInitMode+0x64>
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d1e8      	bne.n	800bb22 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68da      	ldr	r2, [r3, #12]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb74:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f003 0320 	and.w	r3, r3, #32
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10a      	bne.n	800bb9a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7ff ff8b 	bl	800baa0 <HAL_RTC_WaitForSynchro>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d004      	beq.n	800bb9a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2204      	movs	r2, #4
 800bb94:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bbb2:	e005      	b.n	800bbc0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	3b0a      	subs	r3, #10
 800bbbe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b09      	cmp	r3, #9
 800bbc4:	d8f6      	bhi.n	800bbb4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	011b      	lsls	r3, r3, #4
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	b2db      	uxtb	r3, r3
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bbec:	2300      	movs	r3, #0
 800bbee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	7f1b      	ldrb	r3, [r3, #28]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d101      	bne.n	800bbfc <HAL_RTCEx_SetTimeStamp+0x1c>
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	e050      	b.n	800bc9e <HAL_RTCEx_SetTimeStamp+0xbe>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2202      	movs	r2, #2
 800bc06:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f022 0206 	bic.w	r2, r2, #6
 800bc16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	430a      	orrs	r2, r1
 800bc26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	689a      	ldr	r2, [r3, #8]
 800bc2e:	4b1f      	ldr	r3, [pc, #124]	@ (800bcac <HAL_RTCEx_SetTimeStamp+0xcc>)
 800bc30:	4013      	ands	r3, r2
 800bc32:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	22ca      	movs	r2, #202	@ 0xca
 800bc42:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2253      	movs	r2, #83	@ 0x53
 800bc4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	697a      	ldr	r2, [r7, #20]
 800bc52:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800bc64:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800bc76:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689a      	ldr	r2, [r3, #8]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc86:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	22ff      	movs	r2, #255	@ 0xff
 800bc8e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2201      	movs	r2, #1
 800bc94:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	371c      	adds	r7, #28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	fffff7f7 	.word	0xfffff7f7

0800bcb0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e025      	b.n	800bd10 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d106      	bne.n	800bcde <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7f5 fc01 	bl	80014e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2202      	movs	r2, #2
 800bce2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3304      	adds	r3, #4
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	f001 fa4b 	bl	800d18c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6818      	ldr	r0, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	f001 fa9f 	bl	800d244 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bd2a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d101      	bne.n	800bd36 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800bd32:	2302      	movs	r3, #2
 800bd34:	e021      	b.n	800bd7a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d002      	beq.n	800bd42 <HAL_SDRAM_SendCommand+0x2a>
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]
 800bd3e:	2b05      	cmp	r3, #5
 800bd40:	d118      	bne.n	800bd74 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2202      	movs	r2, #2
 800bd46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	68b9      	ldr	r1, [r7, #8]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f001 fae0 	bl	800d318 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d104      	bne.n	800bd6a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2205      	movs	r2, #5
 800bd64:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bd68:	e006      	b.n	800bd78 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bd72:	e001      	b.n	800bd78 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	e000      	b.n	800bd7a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b082      	sub	sp, #8
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d101      	bne.n	800bd9c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800bd98:	2302      	movs	r3, #2
 800bd9a:	e016      	b.n	800bdca <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d10f      	bne.n	800bdc8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f001 fad2 	bl	800d360 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e000      	b.n	800bdca <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b084      	sub	sp, #16
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d101      	bne.n	800bde4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e09d      	b.n	800bf20 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d108      	bne.n	800bdfe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bdf4:	d009      	beq.n	800be0a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	61da      	str	r2, [r3, #28]
 800bdfc:	e005      	b.n	800be0a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d106      	bne.n	800be2a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7f8 fd79 	bl	800491c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2202      	movs	r2, #2
 800be2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800be40:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800be4a:	d902      	bls.n	800be52 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800be4c:	2300      	movs	r3, #0
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	e002      	b.n	800be58 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800be52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800be60:	d007      	beq.n	800be72 <HAL_SPI_Init+0xa0>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800be6a:	d002      	beq.n	800be72 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800be82:	431a      	orrs	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	f003 0302 	and.w	r3, r3, #2
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	699b      	ldr	r3, [r3, #24]
 800be9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bea0:	431a      	orrs	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	69db      	ldr	r3, [r3, #28]
 800bea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800beaa:	431a      	orrs	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beb4:	ea42 0103 	orr.w	r1, r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bebc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	0c1b      	lsrs	r3, r3, #16
 800bece:	f003 0204 	and.w	r2, r3, #4
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed6:	f003 0310 	and.w	r3, r3, #16
 800beda:	431a      	orrs	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee0:	f003 0308 	and.w	r3, r3, #8
 800bee4:	431a      	orrs	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800beee:	ea42 0103 	orr.w	r1, r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	430a      	orrs	r2, r1
 800befe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	69da      	ldr	r2, [r3, #28]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bf0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d101      	bne.n	800bf3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e049      	b.n	800bfce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7fa ff98 	bl	8006e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2202      	movs	r2, #2
 800bf58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3304      	adds	r3, #4
 800bf64:	4619      	mov	r1, r3
 800bf66:	4610      	mov	r0, r2
 800bf68:	f000 faa8 	bl	800c4bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d001      	beq.n	800bff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e054      	b.n	800c09a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f042 0201 	orr.w	r2, r2, #1
 800c006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a26      	ldr	r2, [pc, #152]	@ (800c0a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d022      	beq.n	800c058 <HAL_TIM_Base_Start_IT+0x80>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c01a:	d01d      	beq.n	800c058 <HAL_TIM_Base_Start_IT+0x80>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a22      	ldr	r2, [pc, #136]	@ (800c0ac <HAL_TIM_Base_Start_IT+0xd4>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d018      	beq.n	800c058 <HAL_TIM_Base_Start_IT+0x80>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a21      	ldr	r2, [pc, #132]	@ (800c0b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d013      	beq.n	800c058 <HAL_TIM_Base_Start_IT+0x80>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a1f      	ldr	r2, [pc, #124]	@ (800c0b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d00e      	beq.n	800c058 <HAL_TIM_Base_Start_IT+0x80>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a1e      	ldr	r2, [pc, #120]	@ (800c0b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d009      	beq.n	800c058 <HAL_TIM_Base_Start_IT+0x80>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a1c      	ldr	r2, [pc, #112]	@ (800c0bc <HAL_TIM_Base_Start_IT+0xe4>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d004      	beq.n	800c058 <HAL_TIM_Base_Start_IT+0x80>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a1b      	ldr	r2, [pc, #108]	@ (800c0c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d115      	bne.n	800c084 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	689a      	ldr	r2, [r3, #8]
 800c05e:	4b19      	ldr	r3, [pc, #100]	@ (800c0c4 <HAL_TIM_Base_Start_IT+0xec>)
 800c060:	4013      	ands	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b06      	cmp	r3, #6
 800c068:	d015      	beq.n	800c096 <HAL_TIM_Base_Start_IT+0xbe>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c070:	d011      	beq.n	800c096 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f042 0201 	orr.w	r2, r2, #1
 800c080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c082:	e008      	b.n	800c096 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f042 0201 	orr.w	r2, r2, #1
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	e000      	b.n	800c098 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	40010000 	.word	0x40010000
 800c0ac:	40000400 	.word	0x40000400
 800c0b0:	40000800 	.word	0x40000800
 800c0b4:	40000c00 	.word	0x40000c00
 800c0b8:	40010400 	.word	0x40010400
 800c0bc:	40014000 	.word	0x40014000
 800c0c0:	40001800 	.word	0x40001800
 800c0c4:	00010007 	.word	0x00010007

0800c0c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	f003 0302 	and.w	r3, r3, #2
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d020      	beq.n	800c12c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f003 0302 	and.w	r3, r3, #2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d01b      	beq.n	800c12c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f06f 0202 	mvn.w	r2, #2
 800c0fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	f003 0303 	and.w	r3, r3, #3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f9b4 	bl	800c480 <HAL_TIM_IC_CaptureCallback>
 800c118:	e005      	b.n	800c126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 f9a6 	bl	800c46c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f9b7 	bl	800c494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	f003 0304 	and.w	r3, r3, #4
 800c132:	2b00      	cmp	r3, #0
 800c134:	d020      	beq.n	800c178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	f003 0304 	and.w	r3, r3, #4
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d01b      	beq.n	800c178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f06f 0204 	mvn.w	r2, #4
 800c148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2202      	movs	r2, #2
 800c14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f98e 	bl	800c480 <HAL_TIM_IC_CaptureCallback>
 800c164:	e005      	b.n	800c172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f980 	bl	800c46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 f991 	bl	800c494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	f003 0308 	and.w	r3, r3, #8
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d020      	beq.n	800c1c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f003 0308 	and.w	r3, r3, #8
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d01b      	beq.n	800c1c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f06f 0208 	mvn.w	r2, #8
 800c194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2204      	movs	r2, #4
 800c19a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	69db      	ldr	r3, [r3, #28]
 800c1a2:	f003 0303 	and.w	r3, r3, #3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f968 	bl	800c480 <HAL_TIM_IC_CaptureCallback>
 800c1b0:	e005      	b.n	800c1be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f95a 	bl	800c46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f96b 	bl	800c494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	f003 0310 	and.w	r3, r3, #16
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d020      	beq.n	800c210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f003 0310 	and.w	r3, r3, #16
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d01b      	beq.n	800c210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f06f 0210 	mvn.w	r2, #16
 800c1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2208      	movs	r2, #8
 800c1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f942 	bl	800c480 <HAL_TIM_IC_CaptureCallback>
 800c1fc:	e005      	b.n	800c20a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f934 	bl	800c46c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f945 	bl	800c494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00c      	beq.n	800c234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f003 0301 	and.w	r3, r3, #1
 800c220:	2b00      	cmp	r3, #0
 800c222:	d007      	beq.n	800c234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f06f 0201 	mvn.w	r2, #1
 800c22c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7f6 fe58 	bl	8002ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d104      	bne.n	800c248 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00c      	beq.n	800c262 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d007      	beq.n	800c262 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fb05 	bl	800c86c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00c      	beq.n	800c286 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fafd 	bl	800c880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00c      	beq.n	800c2aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c296:	2b00      	cmp	r3, #0
 800c298:	d007      	beq.n	800c2aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f8ff 	bl	800c4a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	f003 0320 	and.w	r3, r3, #32
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00c      	beq.n	800c2ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f003 0320 	and.w	r3, r3, #32
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d007      	beq.n	800c2ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f06f 0220 	mvn.w	r2, #32
 800c2c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fac5 	bl	800c858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2ce:	bf00      	nop
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
	...

0800c2d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d101      	bne.n	800c2f4 <HAL_TIM_ConfigClockSource+0x1c>
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	e0b4      	b.n	800c45e <HAL_TIM_ConfigClockSource+0x186>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	4b56      	ldr	r3, [pc, #344]	@ (800c468 <HAL_TIM_ConfigClockSource+0x190>)
 800c310:	4013      	ands	r3, r2
 800c312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c31a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c32c:	d03e      	beq.n	800c3ac <HAL_TIM_ConfigClockSource+0xd4>
 800c32e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c332:	f200 8087 	bhi.w	800c444 <HAL_TIM_ConfigClockSource+0x16c>
 800c336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c33a:	f000 8086 	beq.w	800c44a <HAL_TIM_ConfigClockSource+0x172>
 800c33e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c342:	d87f      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x16c>
 800c344:	2b70      	cmp	r3, #112	@ 0x70
 800c346:	d01a      	beq.n	800c37e <HAL_TIM_ConfigClockSource+0xa6>
 800c348:	2b70      	cmp	r3, #112	@ 0x70
 800c34a:	d87b      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x16c>
 800c34c:	2b60      	cmp	r3, #96	@ 0x60
 800c34e:	d050      	beq.n	800c3f2 <HAL_TIM_ConfigClockSource+0x11a>
 800c350:	2b60      	cmp	r3, #96	@ 0x60
 800c352:	d877      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x16c>
 800c354:	2b50      	cmp	r3, #80	@ 0x50
 800c356:	d03c      	beq.n	800c3d2 <HAL_TIM_ConfigClockSource+0xfa>
 800c358:	2b50      	cmp	r3, #80	@ 0x50
 800c35a:	d873      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x16c>
 800c35c:	2b40      	cmp	r3, #64	@ 0x40
 800c35e:	d058      	beq.n	800c412 <HAL_TIM_ConfigClockSource+0x13a>
 800c360:	2b40      	cmp	r3, #64	@ 0x40
 800c362:	d86f      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x16c>
 800c364:	2b30      	cmp	r3, #48	@ 0x30
 800c366:	d064      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0x15a>
 800c368:	2b30      	cmp	r3, #48	@ 0x30
 800c36a:	d86b      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x16c>
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	d060      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0x15a>
 800c370:	2b20      	cmp	r3, #32
 800c372:	d867      	bhi.n	800c444 <HAL_TIM_ConfigClockSource+0x16c>
 800c374:	2b00      	cmp	r3, #0
 800c376:	d05c      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0x15a>
 800c378:	2b10      	cmp	r3, #16
 800c37a:	d05a      	beq.n	800c432 <HAL_TIM_ConfigClockSource+0x15a>
 800c37c:	e062      	b.n	800c444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c38e:	f000 f9b5 	bl	800c6fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c3a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	609a      	str	r2, [r3, #8]
      break;
 800c3aa:	e04f      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c3bc:	f000 f99e 	bl	800c6fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689a      	ldr	r2, [r3, #8]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c3ce:	609a      	str	r2, [r3, #8]
      break;
 800c3d0:	e03c      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f000 f912 	bl	800c608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2150      	movs	r1, #80	@ 0x50
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 f96b 	bl	800c6c6 <TIM_ITRx_SetConfig>
      break;
 800c3f0:	e02c      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3fe:	461a      	mov	r2, r3
 800c400:	f000 f931 	bl	800c666 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2160      	movs	r1, #96	@ 0x60
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 f95b 	bl	800c6c6 <TIM_ITRx_SetConfig>
      break;
 800c410:	e01c      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c41e:	461a      	mov	r2, r3
 800c420:	f000 f8f2 	bl	800c608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2140      	movs	r1, #64	@ 0x40
 800c42a:	4618      	mov	r0, r3
 800c42c:	f000 f94b 	bl	800c6c6 <TIM_ITRx_SetConfig>
      break;
 800c430:	e00c      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4619      	mov	r1, r3
 800c43c:	4610      	mov	r0, r2
 800c43e:	f000 f942 	bl	800c6c6 <TIM_ITRx_SetConfig>
      break;
 800c442:	e003      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	73fb      	strb	r3, [r7, #15]
      break;
 800c448:	e000      	b.n	800c44c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c44a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	fffeff88 	.word	0xfffeff88

0800c46c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a43      	ldr	r2, [pc, #268]	@ (800c5dc <TIM_Base_SetConfig+0x120>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d013      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4da:	d00f      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a40      	ldr	r2, [pc, #256]	@ (800c5e0 <TIM_Base_SetConfig+0x124>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d00b      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4a3f      	ldr	r2, [pc, #252]	@ (800c5e4 <TIM_Base_SetConfig+0x128>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d007      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a3e      	ldr	r2, [pc, #248]	@ (800c5e8 <TIM_Base_SetConfig+0x12c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d003      	beq.n	800c4fc <TIM_Base_SetConfig+0x40>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a3d      	ldr	r2, [pc, #244]	@ (800c5ec <TIM_Base_SetConfig+0x130>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d108      	bne.n	800c50e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a32      	ldr	r2, [pc, #200]	@ (800c5dc <TIM_Base_SetConfig+0x120>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d02b      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c51c:	d027      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a2f      	ldr	r2, [pc, #188]	@ (800c5e0 <TIM_Base_SetConfig+0x124>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d023      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a2e      	ldr	r2, [pc, #184]	@ (800c5e4 <TIM_Base_SetConfig+0x128>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d01f      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a2d      	ldr	r2, [pc, #180]	@ (800c5e8 <TIM_Base_SetConfig+0x12c>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d01b      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a2c      	ldr	r2, [pc, #176]	@ (800c5ec <TIM_Base_SetConfig+0x130>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d017      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a2b      	ldr	r2, [pc, #172]	@ (800c5f0 <TIM_Base_SetConfig+0x134>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d013      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a2a      	ldr	r2, [pc, #168]	@ (800c5f4 <TIM_Base_SetConfig+0x138>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00f      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a29      	ldr	r2, [pc, #164]	@ (800c5f8 <TIM_Base_SetConfig+0x13c>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00b      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a28      	ldr	r2, [pc, #160]	@ (800c5fc <TIM_Base_SetConfig+0x140>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d007      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a27      	ldr	r2, [pc, #156]	@ (800c600 <TIM_Base_SetConfig+0x144>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d003      	beq.n	800c56e <TIM_Base_SetConfig+0xb2>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a26      	ldr	r2, [pc, #152]	@ (800c604 <TIM_Base_SetConfig+0x148>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d108      	bne.n	800c580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	695b      	ldr	r3, [r3, #20]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a0e      	ldr	r2, [pc, #56]	@ (800c5dc <TIM_Base_SetConfig+0x120>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d003      	beq.n	800c5ae <TIM_Base_SetConfig+0xf2>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a10      	ldr	r2, [pc, #64]	@ (800c5ec <TIM_Base_SetConfig+0x130>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d103      	bne.n	800c5b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	691a      	ldr	r2, [r3, #16]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f043 0204 	orr.w	r2, r3, #4
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	601a      	str	r2, [r3, #0]
}
 800c5ce:	bf00      	nop
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	40010000 	.word	0x40010000
 800c5e0:	40000400 	.word	0x40000400
 800c5e4:	40000800 	.word	0x40000800
 800c5e8:	40000c00 	.word	0x40000c00
 800c5ec:	40010400 	.word	0x40010400
 800c5f0:	40014000 	.word	0x40014000
 800c5f4:	40014400 	.word	0x40014400
 800c5f8:	40014800 	.word	0x40014800
 800c5fc:	40001800 	.word	0x40001800
 800c600:	40001c00 	.word	0x40001c00
 800c604:	40002000 	.word	0x40002000

0800c608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c608:	b480      	push	{r7}
 800c60a:	b087      	sub	sp, #28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6a1b      	ldr	r3, [r3, #32]
 800c618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	f023 0201 	bic.w	r2, r3, #1
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	011b      	lsls	r3, r3, #4
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	f023 030a 	bic.w	r3, r3, #10
 800c644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	621a      	str	r2, [r3, #32]
}
 800c65a:	bf00      	nop
 800c65c:	371c      	adds	r7, #28
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c666:	b480      	push	{r7}
 800c668:	b087      	sub	sp, #28
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6a1b      	ldr	r3, [r3, #32]
 800c67c:	f023 0210 	bic.w	r2, r3, #16
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	031b      	lsls	r3, r3, #12
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	4313      	orrs	r3, r2
 800c69a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c6a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	011b      	lsls	r3, r3, #4
 800c6a8:	697a      	ldr	r2, [r7, #20]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	693a      	ldr	r2, [r7, #16]
 800c6b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	621a      	str	r2, [r3, #32]
}
 800c6ba:	bf00      	nop
 800c6bc:	371c      	adds	r7, #28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	f043 0307 	orr.w	r3, r3, #7
 800c6e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	609a      	str	r2, [r3, #8]
}
 800c6f0:	bf00      	nop
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b087      	sub	sp, #28
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c716:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	021a      	lsls	r2, r3, #8
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	431a      	orrs	r2, r3
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	4313      	orrs	r3, r2
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	4313      	orrs	r3, r2
 800c728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	609a      	str	r2, [r3, #8]
}
 800c730:	bf00      	nop
 800c732:	371c      	adds	r7, #28
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d101      	bne.n	800c754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c750:	2302      	movs	r3, #2
 800c752:	e06d      	b.n	800c830 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2201      	movs	r2, #1
 800c758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2202      	movs	r2, #2
 800c760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a30      	ldr	r2, [pc, #192]	@ (800c83c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d004      	beq.n	800c788 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a2f      	ldr	r2, [pc, #188]	@ (800c840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d108      	bne.n	800c79a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c78e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	4313      	orrs	r3, r2
 800c798:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a20      	ldr	r2, [pc, #128]	@ (800c83c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d022      	beq.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7c6:	d01d      	beq.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c844 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d018      	beq.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c848 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d013      	beq.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a1a      	ldr	r2, [pc, #104]	@ (800c84c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d00e      	beq.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a15      	ldr	r2, [pc, #84]	@ (800c840 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d009      	beq.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a16      	ldr	r2, [pc, #88]	@ (800c850 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d004      	beq.n	800c804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a15      	ldr	r2, [pc, #84]	@ (800c854 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d10c      	bne.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c80a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	4313      	orrs	r3, r2
 800c814:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	40010000 	.word	0x40010000
 800c840:	40010400 	.word	0x40010400
 800c844:	40000400 	.word	0x40000400
 800c848:	40000800 	.word	0x40000800
 800c84c:	40000c00 	.word	0x40000c00
 800c850:	40014000 	.word	0x40014000
 800c854:	40001800 	.word	0x40001800

0800c858 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c860:	bf00      	nop
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c888:	bf00      	nop
 800c88a:	370c      	adds	r7, #12
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e040      	b.n	800c928 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d106      	bne.n	800c8bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7fa fc06 	bl	80070c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2224      	movs	r2, #36	@ 0x24
 800c8c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f022 0201 	bic.w	r2, r2, #1
 800c8d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fa8c 	bl	800cdf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f825 	bl	800c930 <UART_SetConfig>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d101      	bne.n	800c8f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e01b      	b.n	800c928 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c8fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	689a      	ldr	r2, [r3, #8]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c90e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f042 0201 	orr.w	r2, r2, #1
 800c91e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fb0b 	bl	800cf3c <UART_CheckIdleState>
 800c926:	4603      	mov	r3, r0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c938:	2300      	movs	r3, #0
 800c93a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689a      	ldr	r2, [r3, #8]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	431a      	orrs	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	431a      	orrs	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	69db      	ldr	r3, [r3, #28]
 800c950:	4313      	orrs	r3, r2
 800c952:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	4ba6      	ldr	r3, [pc, #664]	@ (800cbf4 <UART_SetConfig+0x2c4>)
 800c95c:	4013      	ands	r3, r2
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	6979      	ldr	r1, [r7, #20]
 800c964:	430b      	orrs	r3, r1
 800c966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68da      	ldr	r2, [r3, #12]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	430a      	orrs	r2, r1
 800c97c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	697a      	ldr	r2, [r7, #20]
 800c99e:	430a      	orrs	r2, r1
 800c9a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a94      	ldr	r2, [pc, #592]	@ (800cbf8 <UART_SetConfig+0x2c8>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d120      	bne.n	800c9ee <UART_SetConfig+0xbe>
 800c9ac:	4b93      	ldr	r3, [pc, #588]	@ (800cbfc <UART_SetConfig+0x2cc>)
 800c9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9b2:	f003 0303 	and.w	r3, r3, #3
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	d816      	bhi.n	800c9e8 <UART_SetConfig+0xb8>
 800c9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c9c0 <UART_SetConfig+0x90>)
 800c9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c0:	0800c9d1 	.word	0x0800c9d1
 800c9c4:	0800c9dd 	.word	0x0800c9dd
 800c9c8:	0800c9d7 	.word	0x0800c9d7
 800c9cc:	0800c9e3 	.word	0x0800c9e3
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	77fb      	strb	r3, [r7, #31]
 800c9d4:	e150      	b.n	800cc78 <UART_SetConfig+0x348>
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	77fb      	strb	r3, [r7, #31]
 800c9da:	e14d      	b.n	800cc78 <UART_SetConfig+0x348>
 800c9dc:	2304      	movs	r3, #4
 800c9de:	77fb      	strb	r3, [r7, #31]
 800c9e0:	e14a      	b.n	800cc78 <UART_SetConfig+0x348>
 800c9e2:	2308      	movs	r3, #8
 800c9e4:	77fb      	strb	r3, [r7, #31]
 800c9e6:	e147      	b.n	800cc78 <UART_SetConfig+0x348>
 800c9e8:	2310      	movs	r3, #16
 800c9ea:	77fb      	strb	r3, [r7, #31]
 800c9ec:	e144      	b.n	800cc78 <UART_SetConfig+0x348>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a83      	ldr	r2, [pc, #524]	@ (800cc00 <UART_SetConfig+0x2d0>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d132      	bne.n	800ca5e <UART_SetConfig+0x12e>
 800c9f8:	4b80      	ldr	r3, [pc, #512]	@ (800cbfc <UART_SetConfig+0x2cc>)
 800c9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9fe:	f003 030c 	and.w	r3, r3, #12
 800ca02:	2b0c      	cmp	r3, #12
 800ca04:	d828      	bhi.n	800ca58 <UART_SetConfig+0x128>
 800ca06:	a201      	add	r2, pc, #4	@ (adr r2, 800ca0c <UART_SetConfig+0xdc>)
 800ca08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0c:	0800ca41 	.word	0x0800ca41
 800ca10:	0800ca59 	.word	0x0800ca59
 800ca14:	0800ca59 	.word	0x0800ca59
 800ca18:	0800ca59 	.word	0x0800ca59
 800ca1c:	0800ca4d 	.word	0x0800ca4d
 800ca20:	0800ca59 	.word	0x0800ca59
 800ca24:	0800ca59 	.word	0x0800ca59
 800ca28:	0800ca59 	.word	0x0800ca59
 800ca2c:	0800ca47 	.word	0x0800ca47
 800ca30:	0800ca59 	.word	0x0800ca59
 800ca34:	0800ca59 	.word	0x0800ca59
 800ca38:	0800ca59 	.word	0x0800ca59
 800ca3c:	0800ca53 	.word	0x0800ca53
 800ca40:	2300      	movs	r3, #0
 800ca42:	77fb      	strb	r3, [r7, #31]
 800ca44:	e118      	b.n	800cc78 <UART_SetConfig+0x348>
 800ca46:	2302      	movs	r3, #2
 800ca48:	77fb      	strb	r3, [r7, #31]
 800ca4a:	e115      	b.n	800cc78 <UART_SetConfig+0x348>
 800ca4c:	2304      	movs	r3, #4
 800ca4e:	77fb      	strb	r3, [r7, #31]
 800ca50:	e112      	b.n	800cc78 <UART_SetConfig+0x348>
 800ca52:	2308      	movs	r3, #8
 800ca54:	77fb      	strb	r3, [r7, #31]
 800ca56:	e10f      	b.n	800cc78 <UART_SetConfig+0x348>
 800ca58:	2310      	movs	r3, #16
 800ca5a:	77fb      	strb	r3, [r7, #31]
 800ca5c:	e10c      	b.n	800cc78 <UART_SetConfig+0x348>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a68      	ldr	r2, [pc, #416]	@ (800cc04 <UART_SetConfig+0x2d4>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d120      	bne.n	800caaa <UART_SetConfig+0x17a>
 800ca68:	4b64      	ldr	r3, [pc, #400]	@ (800cbfc <UART_SetConfig+0x2cc>)
 800ca6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca6e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ca72:	2b30      	cmp	r3, #48	@ 0x30
 800ca74:	d013      	beq.n	800ca9e <UART_SetConfig+0x16e>
 800ca76:	2b30      	cmp	r3, #48	@ 0x30
 800ca78:	d814      	bhi.n	800caa4 <UART_SetConfig+0x174>
 800ca7a:	2b20      	cmp	r3, #32
 800ca7c:	d009      	beq.n	800ca92 <UART_SetConfig+0x162>
 800ca7e:	2b20      	cmp	r3, #32
 800ca80:	d810      	bhi.n	800caa4 <UART_SetConfig+0x174>
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <UART_SetConfig+0x15c>
 800ca86:	2b10      	cmp	r3, #16
 800ca88:	d006      	beq.n	800ca98 <UART_SetConfig+0x168>
 800ca8a:	e00b      	b.n	800caa4 <UART_SetConfig+0x174>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	77fb      	strb	r3, [r7, #31]
 800ca90:	e0f2      	b.n	800cc78 <UART_SetConfig+0x348>
 800ca92:	2302      	movs	r3, #2
 800ca94:	77fb      	strb	r3, [r7, #31]
 800ca96:	e0ef      	b.n	800cc78 <UART_SetConfig+0x348>
 800ca98:	2304      	movs	r3, #4
 800ca9a:	77fb      	strb	r3, [r7, #31]
 800ca9c:	e0ec      	b.n	800cc78 <UART_SetConfig+0x348>
 800ca9e:	2308      	movs	r3, #8
 800caa0:	77fb      	strb	r3, [r7, #31]
 800caa2:	e0e9      	b.n	800cc78 <UART_SetConfig+0x348>
 800caa4:	2310      	movs	r3, #16
 800caa6:	77fb      	strb	r3, [r7, #31]
 800caa8:	e0e6      	b.n	800cc78 <UART_SetConfig+0x348>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a56      	ldr	r2, [pc, #344]	@ (800cc08 <UART_SetConfig+0x2d8>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d120      	bne.n	800caf6 <UART_SetConfig+0x1c6>
 800cab4:	4b51      	ldr	r3, [pc, #324]	@ (800cbfc <UART_SetConfig+0x2cc>)
 800cab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cabe:	2bc0      	cmp	r3, #192	@ 0xc0
 800cac0:	d013      	beq.n	800caea <UART_SetConfig+0x1ba>
 800cac2:	2bc0      	cmp	r3, #192	@ 0xc0
 800cac4:	d814      	bhi.n	800caf0 <UART_SetConfig+0x1c0>
 800cac6:	2b80      	cmp	r3, #128	@ 0x80
 800cac8:	d009      	beq.n	800cade <UART_SetConfig+0x1ae>
 800caca:	2b80      	cmp	r3, #128	@ 0x80
 800cacc:	d810      	bhi.n	800caf0 <UART_SetConfig+0x1c0>
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d002      	beq.n	800cad8 <UART_SetConfig+0x1a8>
 800cad2:	2b40      	cmp	r3, #64	@ 0x40
 800cad4:	d006      	beq.n	800cae4 <UART_SetConfig+0x1b4>
 800cad6:	e00b      	b.n	800caf0 <UART_SetConfig+0x1c0>
 800cad8:	2300      	movs	r3, #0
 800cada:	77fb      	strb	r3, [r7, #31]
 800cadc:	e0cc      	b.n	800cc78 <UART_SetConfig+0x348>
 800cade:	2302      	movs	r3, #2
 800cae0:	77fb      	strb	r3, [r7, #31]
 800cae2:	e0c9      	b.n	800cc78 <UART_SetConfig+0x348>
 800cae4:	2304      	movs	r3, #4
 800cae6:	77fb      	strb	r3, [r7, #31]
 800cae8:	e0c6      	b.n	800cc78 <UART_SetConfig+0x348>
 800caea:	2308      	movs	r3, #8
 800caec:	77fb      	strb	r3, [r7, #31]
 800caee:	e0c3      	b.n	800cc78 <UART_SetConfig+0x348>
 800caf0:	2310      	movs	r3, #16
 800caf2:	77fb      	strb	r3, [r7, #31]
 800caf4:	e0c0      	b.n	800cc78 <UART_SetConfig+0x348>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a44      	ldr	r2, [pc, #272]	@ (800cc0c <UART_SetConfig+0x2dc>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d125      	bne.n	800cb4c <UART_SetConfig+0x21c>
 800cb00:	4b3e      	ldr	r3, [pc, #248]	@ (800cbfc <UART_SetConfig+0x2cc>)
 800cb02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb0e:	d017      	beq.n	800cb40 <UART_SetConfig+0x210>
 800cb10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb14:	d817      	bhi.n	800cb46 <UART_SetConfig+0x216>
 800cb16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb1a:	d00b      	beq.n	800cb34 <UART_SetConfig+0x204>
 800cb1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb20:	d811      	bhi.n	800cb46 <UART_SetConfig+0x216>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <UART_SetConfig+0x1fe>
 800cb26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb2a:	d006      	beq.n	800cb3a <UART_SetConfig+0x20a>
 800cb2c:	e00b      	b.n	800cb46 <UART_SetConfig+0x216>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	77fb      	strb	r3, [r7, #31]
 800cb32:	e0a1      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb34:	2302      	movs	r3, #2
 800cb36:	77fb      	strb	r3, [r7, #31]
 800cb38:	e09e      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb3a:	2304      	movs	r3, #4
 800cb3c:	77fb      	strb	r3, [r7, #31]
 800cb3e:	e09b      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb40:	2308      	movs	r3, #8
 800cb42:	77fb      	strb	r3, [r7, #31]
 800cb44:	e098      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb46:	2310      	movs	r3, #16
 800cb48:	77fb      	strb	r3, [r7, #31]
 800cb4a:	e095      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a2f      	ldr	r2, [pc, #188]	@ (800cc10 <UART_SetConfig+0x2e0>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d125      	bne.n	800cba2 <UART_SetConfig+0x272>
 800cb56:	4b29      	ldr	r3, [pc, #164]	@ (800cbfc <UART_SetConfig+0x2cc>)
 800cb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cb60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb64:	d017      	beq.n	800cb96 <UART_SetConfig+0x266>
 800cb66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cb6a:	d817      	bhi.n	800cb9c <UART_SetConfig+0x26c>
 800cb6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb70:	d00b      	beq.n	800cb8a <UART_SetConfig+0x25a>
 800cb72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cb76:	d811      	bhi.n	800cb9c <UART_SetConfig+0x26c>
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d003      	beq.n	800cb84 <UART_SetConfig+0x254>
 800cb7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb80:	d006      	beq.n	800cb90 <UART_SetConfig+0x260>
 800cb82:	e00b      	b.n	800cb9c <UART_SetConfig+0x26c>
 800cb84:	2301      	movs	r3, #1
 800cb86:	77fb      	strb	r3, [r7, #31]
 800cb88:	e076      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	77fb      	strb	r3, [r7, #31]
 800cb8e:	e073      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb90:	2304      	movs	r3, #4
 800cb92:	77fb      	strb	r3, [r7, #31]
 800cb94:	e070      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb96:	2308      	movs	r3, #8
 800cb98:	77fb      	strb	r3, [r7, #31]
 800cb9a:	e06d      	b.n	800cc78 <UART_SetConfig+0x348>
 800cb9c:	2310      	movs	r3, #16
 800cb9e:	77fb      	strb	r3, [r7, #31]
 800cba0:	e06a      	b.n	800cc78 <UART_SetConfig+0x348>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a1b      	ldr	r2, [pc, #108]	@ (800cc14 <UART_SetConfig+0x2e4>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d138      	bne.n	800cc1e <UART_SetConfig+0x2ee>
 800cbac:	4b13      	ldr	r3, [pc, #76]	@ (800cbfc <UART_SetConfig+0x2cc>)
 800cbae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbb2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cbb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cbba:	d017      	beq.n	800cbec <UART_SetConfig+0x2bc>
 800cbbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cbc0:	d82a      	bhi.n	800cc18 <UART_SetConfig+0x2e8>
 800cbc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbc6:	d00b      	beq.n	800cbe0 <UART_SetConfig+0x2b0>
 800cbc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbcc:	d824      	bhi.n	800cc18 <UART_SetConfig+0x2e8>
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <UART_SetConfig+0x2aa>
 800cbd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbd6:	d006      	beq.n	800cbe6 <UART_SetConfig+0x2b6>
 800cbd8:	e01e      	b.n	800cc18 <UART_SetConfig+0x2e8>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	77fb      	strb	r3, [r7, #31]
 800cbde:	e04b      	b.n	800cc78 <UART_SetConfig+0x348>
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	77fb      	strb	r3, [r7, #31]
 800cbe4:	e048      	b.n	800cc78 <UART_SetConfig+0x348>
 800cbe6:	2304      	movs	r3, #4
 800cbe8:	77fb      	strb	r3, [r7, #31]
 800cbea:	e045      	b.n	800cc78 <UART_SetConfig+0x348>
 800cbec:	2308      	movs	r3, #8
 800cbee:	77fb      	strb	r3, [r7, #31]
 800cbf0:	e042      	b.n	800cc78 <UART_SetConfig+0x348>
 800cbf2:	bf00      	nop
 800cbf4:	efff69f3 	.word	0xefff69f3
 800cbf8:	40011000 	.word	0x40011000
 800cbfc:	40023800 	.word	0x40023800
 800cc00:	40004400 	.word	0x40004400
 800cc04:	40004800 	.word	0x40004800
 800cc08:	40004c00 	.word	0x40004c00
 800cc0c:	40005000 	.word	0x40005000
 800cc10:	40011400 	.word	0x40011400
 800cc14:	40007800 	.word	0x40007800
 800cc18:	2310      	movs	r3, #16
 800cc1a:	77fb      	strb	r3, [r7, #31]
 800cc1c:	e02c      	b.n	800cc78 <UART_SetConfig+0x348>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a72      	ldr	r2, [pc, #456]	@ (800cdec <UART_SetConfig+0x4bc>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d125      	bne.n	800cc74 <UART_SetConfig+0x344>
 800cc28:	4b71      	ldr	r3, [pc, #452]	@ (800cdf0 <UART_SetConfig+0x4c0>)
 800cc2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc2e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cc32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cc36:	d017      	beq.n	800cc68 <UART_SetConfig+0x338>
 800cc38:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cc3c:	d817      	bhi.n	800cc6e <UART_SetConfig+0x33e>
 800cc3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc42:	d00b      	beq.n	800cc5c <UART_SetConfig+0x32c>
 800cc44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc48:	d811      	bhi.n	800cc6e <UART_SetConfig+0x33e>
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <UART_SetConfig+0x326>
 800cc4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc52:	d006      	beq.n	800cc62 <UART_SetConfig+0x332>
 800cc54:	e00b      	b.n	800cc6e <UART_SetConfig+0x33e>
 800cc56:	2300      	movs	r3, #0
 800cc58:	77fb      	strb	r3, [r7, #31]
 800cc5a:	e00d      	b.n	800cc78 <UART_SetConfig+0x348>
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	77fb      	strb	r3, [r7, #31]
 800cc60:	e00a      	b.n	800cc78 <UART_SetConfig+0x348>
 800cc62:	2304      	movs	r3, #4
 800cc64:	77fb      	strb	r3, [r7, #31]
 800cc66:	e007      	b.n	800cc78 <UART_SetConfig+0x348>
 800cc68:	2308      	movs	r3, #8
 800cc6a:	77fb      	strb	r3, [r7, #31]
 800cc6c:	e004      	b.n	800cc78 <UART_SetConfig+0x348>
 800cc6e:	2310      	movs	r3, #16
 800cc70:	77fb      	strb	r3, [r7, #31]
 800cc72:	e001      	b.n	800cc78 <UART_SetConfig+0x348>
 800cc74:	2310      	movs	r3, #16
 800cc76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	69db      	ldr	r3, [r3, #28]
 800cc7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc80:	d15b      	bne.n	800cd3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cc82:	7ffb      	ldrb	r3, [r7, #31]
 800cc84:	2b08      	cmp	r3, #8
 800cc86:	d828      	bhi.n	800ccda <UART_SetConfig+0x3aa>
 800cc88:	a201      	add	r2, pc, #4	@ (adr r2, 800cc90 <UART_SetConfig+0x360>)
 800cc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8e:	bf00      	nop
 800cc90:	0800ccb5 	.word	0x0800ccb5
 800cc94:	0800ccbd 	.word	0x0800ccbd
 800cc98:	0800ccc5 	.word	0x0800ccc5
 800cc9c:	0800ccdb 	.word	0x0800ccdb
 800cca0:	0800cccb 	.word	0x0800cccb
 800cca4:	0800ccdb 	.word	0x0800ccdb
 800cca8:	0800ccdb 	.word	0x0800ccdb
 800ccac:	0800ccdb 	.word	0x0800ccdb
 800ccb0:	0800ccd3 	.word	0x0800ccd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccb4:	f7fd ffe0 	bl	800ac78 <HAL_RCC_GetPCLK1Freq>
 800ccb8:	61b8      	str	r0, [r7, #24]
        break;
 800ccba:	e013      	b.n	800cce4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccbc:	f7fd fff0 	bl	800aca0 <HAL_RCC_GetPCLK2Freq>
 800ccc0:	61b8      	str	r0, [r7, #24]
        break;
 800ccc2:	e00f      	b.n	800cce4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ccc4:	4b4b      	ldr	r3, [pc, #300]	@ (800cdf4 <UART_SetConfig+0x4c4>)
 800ccc6:	61bb      	str	r3, [r7, #24]
        break;
 800ccc8:	e00c      	b.n	800cce4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccca:	f7fd ff03 	bl	800aad4 <HAL_RCC_GetSysClockFreq>
 800ccce:	61b8      	str	r0, [r7, #24]
        break;
 800ccd0:	e008      	b.n	800cce4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ccd6:	61bb      	str	r3, [r7, #24]
        break;
 800ccd8:	e004      	b.n	800cce4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	77bb      	strb	r3, [r7, #30]
        break;
 800cce2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d074      	beq.n	800cdd4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	005a      	lsls	r2, r3, #1
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	085b      	lsrs	r3, r3, #1
 800ccf4:	441a      	add	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2b0f      	cmp	r3, #15
 800cd04:	d916      	bls.n	800cd34 <UART_SetConfig+0x404>
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd0c:	d212      	bcs.n	800cd34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	f023 030f 	bic.w	r3, r3, #15
 800cd16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	085b      	lsrs	r3, r3, #1
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	f003 0307 	and.w	r3, r3, #7
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	89fb      	ldrh	r3, [r7, #14]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	89fa      	ldrh	r2, [r7, #14]
 800cd30:	60da      	str	r2, [r3, #12]
 800cd32:	e04f      	b.n	800cdd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	77bb      	strb	r3, [r7, #30]
 800cd38:	e04c      	b.n	800cdd4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd3a:	7ffb      	ldrb	r3, [r7, #31]
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	d828      	bhi.n	800cd92 <UART_SetConfig+0x462>
 800cd40:	a201      	add	r2, pc, #4	@ (adr r2, 800cd48 <UART_SetConfig+0x418>)
 800cd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd46:	bf00      	nop
 800cd48:	0800cd6d 	.word	0x0800cd6d
 800cd4c:	0800cd75 	.word	0x0800cd75
 800cd50:	0800cd7d 	.word	0x0800cd7d
 800cd54:	0800cd93 	.word	0x0800cd93
 800cd58:	0800cd83 	.word	0x0800cd83
 800cd5c:	0800cd93 	.word	0x0800cd93
 800cd60:	0800cd93 	.word	0x0800cd93
 800cd64:	0800cd93 	.word	0x0800cd93
 800cd68:	0800cd8b 	.word	0x0800cd8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd6c:	f7fd ff84 	bl	800ac78 <HAL_RCC_GetPCLK1Freq>
 800cd70:	61b8      	str	r0, [r7, #24]
        break;
 800cd72:	e013      	b.n	800cd9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd74:	f7fd ff94 	bl	800aca0 <HAL_RCC_GetPCLK2Freq>
 800cd78:	61b8      	str	r0, [r7, #24]
        break;
 800cd7a:	e00f      	b.n	800cd9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd7c:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf4 <UART_SetConfig+0x4c4>)
 800cd7e:	61bb      	str	r3, [r7, #24]
        break;
 800cd80:	e00c      	b.n	800cd9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd82:	f7fd fea7 	bl	800aad4 <HAL_RCC_GetSysClockFreq>
 800cd86:	61b8      	str	r0, [r7, #24]
        break;
 800cd88:	e008      	b.n	800cd9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd8e:	61bb      	str	r3, [r7, #24]
        break;
 800cd90:	e004      	b.n	800cd9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	77bb      	strb	r3, [r7, #30]
        break;
 800cd9a:	bf00      	nop
    }

    if (pclk != 0U)
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d018      	beq.n	800cdd4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	085a      	lsrs	r2, r3, #1
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	441a      	add	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	2b0f      	cmp	r3, #15
 800cdba:	d909      	bls.n	800cdd0 <UART_SetConfig+0x4a0>
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdc2:	d205      	bcs.n	800cdd0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	60da      	str	r2, [r3, #12]
 800cdce:	e001      	b.n	800cdd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cde0:	7fbb      	ldrb	r3, [r7, #30]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3720      	adds	r7, #32
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	40007c00 	.word	0x40007c00
 800cdf0:	40023800 	.word	0x40023800
 800cdf4:	00f42400 	.word	0x00f42400

0800cdf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce04:	f003 0308 	and.w	r3, r3, #8
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00a      	beq.n	800ce22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	430a      	orrs	r2, r1
 800ce20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce26:	f003 0301 	and.w	r3, r3, #1
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00a      	beq.n	800ce44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	430a      	orrs	r2, r1
 800ce42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce48:	f003 0302 	and.w	r3, r3, #2
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00a      	beq.n	800ce66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	430a      	orrs	r2, r1
 800ce64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce6a:	f003 0304 	and.w	r3, r3, #4
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00a      	beq.n	800ce88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	430a      	orrs	r2, r1
 800ce86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce8c:	f003 0310 	and.w	r3, r3, #16
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00a      	beq.n	800ceaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	430a      	orrs	r2, r1
 800cea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceae:	f003 0320 	and.w	r3, r3, #32
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00a      	beq.n	800cecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	430a      	orrs	r2, r1
 800ceca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d01a      	beq.n	800cf0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	430a      	orrs	r2, r1
 800ceec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cef6:	d10a      	bne.n	800cf0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	430a      	orrs	r2, r1
 800cf0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00a      	beq.n	800cf30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	430a      	orrs	r2, r1
 800cf2e:	605a      	str	r2, [r3, #4]
  }
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b08c      	sub	sp, #48	@ 0x30
 800cf40:	af02      	add	r7, sp, #8
 800cf42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf4c:	f7fa fa16 	bl	800737c <HAL_GetTick>
 800cf50:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f003 0308 	and.w	r3, r3, #8
 800cf5c:	2b08      	cmp	r3, #8
 800cf5e:	d12e      	bne.n	800cfbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 f83b 	bl	800cfea <UART_WaitOnFlagUntilTimeout>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d021      	beq.n	800cfbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	e853 3f00 	ldrex	r3, [r3]
 800cf86:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf8e:	623b      	str	r3, [r7, #32]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	461a      	mov	r2, r3
 800cf96:	6a3b      	ldr	r3, [r7, #32]
 800cf98:	61fb      	str	r3, [r7, #28]
 800cf9a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9c:	69b9      	ldr	r1, [r7, #24]
 800cf9e:	69fa      	ldr	r2, [r7, #28]
 800cfa0:	e841 2300 	strex	r3, r2, [r1]
 800cfa4:	617b      	str	r3, [r7, #20]
   return(result);
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1e6      	bne.n	800cf7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2220      	movs	r2, #32
 800cfb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	e011      	b.n	800cfe2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2220      	movs	r2, #32
 800cfc2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2220      	movs	r2, #32
 800cfc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3728      	adds	r7, #40	@ 0x28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b084      	sub	sp, #16
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	60f8      	str	r0, [r7, #12]
 800cff2:	60b9      	str	r1, [r7, #8]
 800cff4:	603b      	str	r3, [r7, #0]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cffa:	e04f      	b.n	800d09c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d002:	d04b      	beq.n	800d09c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d004:	f7fa f9ba 	bl	800737c <HAL_GetTick>
 800d008:	4602      	mov	r2, r0
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	429a      	cmp	r2, r3
 800d012:	d302      	bcc.n	800d01a <UART_WaitOnFlagUntilTimeout+0x30>
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d01a:	2303      	movs	r3, #3
 800d01c:	e04e      	b.n	800d0bc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f003 0304 	and.w	r3, r3, #4
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d037      	beq.n	800d09c <UART_WaitOnFlagUntilTimeout+0xb2>
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2b80      	cmp	r3, #128	@ 0x80
 800d030:	d034      	beq.n	800d09c <UART_WaitOnFlagUntilTimeout+0xb2>
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	2b40      	cmp	r3, #64	@ 0x40
 800d036:	d031      	beq.n	800d09c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	f003 0308 	and.w	r3, r3, #8
 800d042:	2b08      	cmp	r3, #8
 800d044:	d110      	bne.n	800d068 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2208      	movs	r2, #8
 800d04c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f000 f838 	bl	800d0c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2208      	movs	r2, #8
 800d058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e029      	b.n	800d0bc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	69db      	ldr	r3, [r3, #28]
 800d06e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d076:	d111      	bne.n	800d09c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d080:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f000 f81e 	bl	800d0c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2220      	movs	r2, #32
 800d08c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	e00f      	b.n	800d0bc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	69da      	ldr	r2, [r3, #28]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	bf0c      	ite	eq
 800d0ac:	2301      	moveq	r3, #1
 800d0ae:	2300      	movne	r3, #0
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	79fb      	ldrb	r3, [r7, #7]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d0a0      	beq.n	800cffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b095      	sub	sp, #84	@ 0x54
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0d4:	e853 3f00 	ldrex	r3, [r3]
 800d0d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d0f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0f2:	e841 2300 	strex	r3, r2, [r1]
 800d0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1e6      	bne.n	800d0cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	3308      	adds	r3, #8
 800d104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	e853 3f00 	ldrex	r3, [r3]
 800d10c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	f023 0301 	bic.w	r3, r3, #1
 800d114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	3308      	adds	r3, #8
 800d11c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d11e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e5      	bne.n	800d0fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d136:	2b01      	cmp	r3, #1
 800d138:	d118      	bne.n	800d16c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	e853 3f00 	ldrex	r3, [r3]
 800d146:	60bb      	str	r3, [r7, #8]
   return(result);
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	f023 0310 	bic.w	r3, r3, #16
 800d14e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	461a      	mov	r2, r3
 800d156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d158:	61bb      	str	r3, [r7, #24]
 800d15a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15c:	6979      	ldr	r1, [r7, #20]
 800d15e:	69ba      	ldr	r2, [r7, #24]
 800d160:	e841 2300 	strex	r3, r2, [r1]
 800d164:	613b      	str	r3, [r7, #16]
   return(result);
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1e6      	bne.n	800d13a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2220      	movs	r2, #32
 800d170:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d180:	bf00      	nop
 800d182:	3754      	adds	r7, #84	@ 0x54
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d121      	bne.n	800d1e2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	4b27      	ldr	r3, [pc, #156]	@ (800d240 <FMC_SDRAM_Init+0xb4>)
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	6851      	ldr	r1, [r2, #4]
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	6892      	ldr	r2, [r2, #8]
 800d1ae:	4311      	orrs	r1, r2
 800d1b0:	683a      	ldr	r2, [r7, #0]
 800d1b2:	68d2      	ldr	r2, [r2, #12]
 800d1b4:	4311      	orrs	r1, r2
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	6912      	ldr	r2, [r2, #16]
 800d1ba:	4311      	orrs	r1, r2
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	6952      	ldr	r2, [r2, #20]
 800d1c0:	4311      	orrs	r1, r2
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	6992      	ldr	r2, [r2, #24]
 800d1c6:	4311      	orrs	r1, r2
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	69d2      	ldr	r2, [r2, #28]
 800d1cc:	4311      	orrs	r1, r2
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	6a12      	ldr	r2, [r2, #32]
 800d1d2:	4311      	orrs	r1, r2
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d1d8:	430a      	orrs	r2, r1
 800d1da:	431a      	orrs	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	601a      	str	r2, [r3, #0]
 800d1e0:	e026      	b.n	800d230 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	69d9      	ldr	r1, [r3, #28]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	4319      	orrs	r1, r3
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f8:	430b      	orrs	r3, r1
 800d1fa:	431a      	orrs	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685a      	ldr	r2, [r3, #4]
 800d204:	4b0e      	ldr	r3, [pc, #56]	@ (800d240 <FMC_SDRAM_Init+0xb4>)
 800d206:	4013      	ands	r3, r2
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	6851      	ldr	r1, [r2, #4]
 800d20c:	683a      	ldr	r2, [r7, #0]
 800d20e:	6892      	ldr	r2, [r2, #8]
 800d210:	4311      	orrs	r1, r2
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	68d2      	ldr	r2, [r2, #12]
 800d216:	4311      	orrs	r1, r2
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	6912      	ldr	r2, [r2, #16]
 800d21c:	4311      	orrs	r1, r2
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	6952      	ldr	r2, [r2, #20]
 800d222:	4311      	orrs	r1, r2
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	6992      	ldr	r2, [r2, #24]
 800d228:	430a      	orrs	r2, r1
 800d22a:	431a      	orrs	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	ffff8000 	.word	0xffff8000

0800d244 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d128      	bne.n	800d2a8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	1e59      	subs	r1, r3, #1
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	3b01      	subs	r3, #1
 800d26a:	011b      	lsls	r3, r3, #4
 800d26c:	4319      	orrs	r1, r3
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	3b01      	subs	r3, #1
 800d274:	021b      	lsls	r3, r3, #8
 800d276:	4319      	orrs	r1, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	3b01      	subs	r3, #1
 800d27e:	031b      	lsls	r3, r3, #12
 800d280:	4319      	orrs	r1, r3
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	3b01      	subs	r3, #1
 800d288:	041b      	lsls	r3, r3, #16
 800d28a:	4319      	orrs	r1, r3
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	3b01      	subs	r3, #1
 800d292:	051b      	lsls	r3, r3, #20
 800d294:	4319      	orrs	r1, r3
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	3b01      	subs	r3, #1
 800d29c:	061b      	lsls	r3, r3, #24
 800d29e:	430b      	orrs	r3, r1
 800d2a0:	431a      	orrs	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	609a      	str	r2, [r3, #8]
 800d2a6:	e02d      	b.n	800d304 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	689a      	ldr	r2, [r3, #8]
 800d2ac:	4b19      	ldr	r3, [pc, #100]	@ (800d314 <FMC_SDRAM_Timing_Init+0xd0>)
 800d2ae:	4013      	ands	r3, r2
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	68d2      	ldr	r2, [r2, #12]
 800d2b4:	3a01      	subs	r2, #1
 800d2b6:	0311      	lsls	r1, r2, #12
 800d2b8:	68ba      	ldr	r2, [r7, #8]
 800d2ba:	6952      	ldr	r2, [r2, #20]
 800d2bc:	3a01      	subs	r2, #1
 800d2be:	0512      	lsls	r2, r2, #20
 800d2c0:	430a      	orrs	r2, r1
 800d2c2:	431a      	orrs	r2, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	1e59      	subs	r1, r3, #1
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	011b      	lsls	r3, r3, #4
 800d2de:	4319      	orrs	r1, r3
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	021b      	lsls	r3, r3, #8
 800d2e8:	4319      	orrs	r1, r3
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	041b      	lsls	r3, r3, #16
 800d2f2:	4319      	orrs	r1, r3
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	061b      	lsls	r3, r3, #24
 800d2fc:	430b      	orrs	r3, r1
 800d2fe:	431a      	orrs	r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	ff0f0fff 	.word	0xff0f0fff

0800d318 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	691a      	ldr	r2, [r3, #16]
 800d328:	4b0c      	ldr	r3, [pc, #48]	@ (800d35c <FMC_SDRAM_SendCommand+0x44>)
 800d32a:	4013      	ands	r3, r2
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	6811      	ldr	r1, [r2, #0]
 800d330:	68ba      	ldr	r2, [r7, #8]
 800d332:	6852      	ldr	r2, [r2, #4]
 800d334:	4311      	orrs	r1, r2
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	6892      	ldr	r2, [r2, #8]
 800d33a:	3a01      	subs	r2, #1
 800d33c:	0152      	lsls	r2, r2, #5
 800d33e:	4311      	orrs	r1, r2
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	68d2      	ldr	r2, [r2, #12]
 800d344:	0252      	lsls	r2, r2, #9
 800d346:	430a      	orrs	r2, r1
 800d348:	431a      	orrs	r2, r3
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	ffc00000 	.word	0xffc00000

0800d360 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	695a      	ldr	r2, [r3, #20]
 800d36e:	4b07      	ldr	r3, [pc, #28]	@ (800d38c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800d370:	4013      	ands	r3, r2
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	0052      	lsls	r2, r2, #1
 800d376:	431a      	orrs	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	ffffc001 	.word	0xffffc001

0800d390 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	4603      	mov	r3, r0
 800d398:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d39a:	2300      	movs	r3, #0
 800d39c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d39e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d3a2:	2b84      	cmp	r3, #132	@ 0x84
 800d3a4:	d005      	beq.n	800d3b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d3a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	3303      	adds	r3, #3
 800d3b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3c6:	f3ef 8305 	mrs	r3, IPSR
 800d3ca:	607b      	str	r3, [r7, #4]
  return(result);
 800d3cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bf14      	ite	ne
 800d3d2:	2301      	movne	r3, #1
 800d3d4:	2300      	moveq	r3, #0
 800d3d6:	b2db      	uxtb	r3, r3
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d3e8:	f001 f9f2 	bl	800e7d0 <vTaskStartScheduler>
  
  return osOK;
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d3f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3f4:	b089      	sub	sp, #36	@ 0x24
 800d3f6:	af04      	add	r7, sp, #16
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d020      	beq.n	800d446 <osThreadCreate+0x54>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d01c      	beq.n	800d446 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685c      	ldr	r4, [r3, #4]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	691e      	ldr	r6, [r3, #16]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff ffb6 	bl	800d390 <makeFreeRtosPriority>
 800d424:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d42e:	9202      	str	r2, [sp, #8]
 800d430:	9301      	str	r3, [sp, #4]
 800d432:	9100      	str	r1, [sp, #0]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	4632      	mov	r2, r6
 800d438:	4629      	mov	r1, r5
 800d43a:	4620      	mov	r0, r4
 800d43c:	f000 fff0 	bl	800e420 <xTaskCreateStatic>
 800d440:	4603      	mov	r3, r0
 800d442:	60fb      	str	r3, [r7, #12]
 800d444:	e01c      	b.n	800d480 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	685c      	ldr	r4, [r3, #4]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d452:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff ff98 	bl	800d390 <makeFreeRtosPriority>
 800d460:	4602      	mov	r2, r0
 800d462:	f107 030c 	add.w	r3, r7, #12
 800d466:	9301      	str	r3, [sp, #4]
 800d468:	9200      	str	r2, [sp, #0]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	4632      	mov	r2, r6
 800d46e:	4629      	mov	r1, r5
 800d470:	4620      	mov	r0, r4
 800d472:	f001 f83b 	bl	800e4ec <xTaskCreate>
 800d476:	4603      	mov	r3, r0
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d001      	beq.n	800d480 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d47c:	2300      	movs	r3, #0
 800d47e:	e000      	b.n	800d482 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d480:	68fb      	ldr	r3, [r7, #12]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3714      	adds	r7, #20
 800d486:	46bd      	mov	sp, r7
 800d488:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d48a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b084      	sub	sp, #16
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <osDelay+0x16>
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	e000      	b.n	800d4a2 <osDelay+0x18>
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f001 f95c 	bl	800e760 <vTaskDelay>
  
  return osOK;
 800d4a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b082      	sub	sp, #8
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d007      	beq.n	800d4d2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	2001      	movs	r0, #1
 800d4ca:	f000 fb24 	bl	800db16 <xQueueCreateMutexStatic>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	e003      	b.n	800d4da <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	f000 fb07 	bl	800dae6 <xQueueCreateMutex>
 800d4d8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d101      	bne.n	800d4fc <osMutexWait+0x18>
    return osErrorParameter;
 800d4f8:	2380      	movs	r3, #128	@ 0x80
 800d4fa:	e03a      	b.n	800d572 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d506:	d103      	bne.n	800d510 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800d508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	e009      	b.n	800d524 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d006      	beq.n	800d524 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <osMutexWait+0x40>
      ticks = 1;
 800d520:	2301      	movs	r3, #1
 800d522:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d524:	f7ff ff4c 	bl	800d3c0 <inHandlerMode>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d017      	beq.n	800d55e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d52e:	f107 0308 	add.w	r3, r7, #8
 800d532:	461a      	mov	r2, r3
 800d534:	2100      	movs	r1, #0
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fdc2 	bl	800e0c0 <xQueueReceiveFromISR>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d001      	beq.n	800d546 <osMutexWait+0x62>
      return osErrorOS;
 800d542:	23ff      	movs	r3, #255	@ 0xff
 800d544:	e015      	b.n	800d572 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d011      	beq.n	800d570 <osMutexWait+0x8c>
 800d54c:	4b0b      	ldr	r3, [pc, #44]	@ (800d57c <osMutexWait+0x98>)
 800d54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	f3bf 8f4f 	dsb	sy
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	e008      	b.n	800d570 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d55e:	68f9      	ldr	r1, [r7, #12]
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fc95 	bl	800de90 <xQueueSemaphoreTake>
 800d566:	4603      	mov	r3, r0
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d001      	beq.n	800d570 <osMutexWait+0x8c>
    return osErrorOS;
 800d56c:	23ff      	movs	r3, #255	@ 0xff
 800d56e:	e000      	b.n	800d572 <osMutexWait+0x8e>
  }
  
  return osOK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	e000ed04 	.word	0xe000ed04

0800d580 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d588:	2300      	movs	r3, #0
 800d58a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d58c:	2300      	movs	r3, #0
 800d58e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d590:	f7ff ff16 	bl	800d3c0 <inHandlerMode>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d016      	beq.n	800d5c8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d59a:	f107 0308 	add.w	r3, r7, #8
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fbdd 	bl	800dd60 <xQueueGiveFromISR>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d001      	beq.n	800d5b0 <osMutexRelease+0x30>
      return osErrorOS;
 800d5ac:	23ff      	movs	r3, #255	@ 0xff
 800d5ae:	e017      	b.n	800d5e0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d013      	beq.n	800d5de <osMutexRelease+0x5e>
 800d5b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d5e8 <osMutexRelease+0x68>)
 800d5b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	e00a      	b.n	800d5de <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fabc 	bl	800db4c <xQueueGenericSend>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d001      	beq.n	800d5de <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d5da:	23ff      	movs	r3, #255	@ 0xff
 800d5dc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d5de:	68fb      	ldr	r3, [r7, #12]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	e000ed04 	.word	0xe000ed04

0800d5ec <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b086      	sub	sp, #24
 800d5f0:	af02      	add	r7, sp, #8
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00f      	beq.n	800d61e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d10a      	bne.n	800d61a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	2203      	movs	r2, #3
 800d60a:	9200      	str	r2, [sp, #0]
 800d60c:	2200      	movs	r2, #0
 800d60e:	2100      	movs	r1, #0
 800d610:	2001      	movs	r0, #1
 800d612:	f000 f965 	bl	800d8e0 <xQueueGenericCreateStatic>
 800d616:	4603      	mov	r3, r0
 800d618:	e016      	b.n	800d648 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d61a:	2300      	movs	r3, #0
 800d61c:	e014      	b.n	800d648 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d110      	bne.n	800d646 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d624:	2203      	movs	r2, #3
 800d626:	2100      	movs	r1, #0
 800d628:	2001      	movs	r0, #1
 800d62a:	f000 f9e0 	bl	800d9ee <xQueueGenericCreate>
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d005      	beq.n	800d642 <osSemaphoreCreate+0x56>
 800d636:	2300      	movs	r3, #0
 800d638:	2200      	movs	r2, #0
 800d63a:	2100      	movs	r1, #0
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f000 fa85 	bl	800db4c <xQueueGenericSend>
      return sema;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	e000      	b.n	800d648 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d646:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d650:	b590      	push	{r4, r7, lr}
 800d652:	b085      	sub	sp, #20
 800d654:	af02      	add	r7, sp, #8
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d011      	beq.n	800d686 <osMessageCreate+0x36>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00d      	beq.n	800d686 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6859      	ldr	r1, [r3, #4]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	689a      	ldr	r2, [r3, #8]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	2400      	movs	r4, #0
 800d67c:	9400      	str	r4, [sp, #0]
 800d67e:	f000 f92f 	bl	800d8e0 <xQueueGenericCreateStatic>
 800d682:	4603      	mov	r3, r0
 800d684:	e008      	b.n	800d698 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6818      	ldr	r0, [r3, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	4619      	mov	r1, r3
 800d692:	f000 f9ac 	bl	800d9ee <xQueueGenericCreate>
 800d696:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d698:	4618      	mov	r0, r3
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd90      	pop	{r4, r7, pc}

0800d6a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f103 0208 	add.w	r2, r3, #8
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f103 0208 	add.w	r2, r3, #8
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f103 0208 	add.w	r2, r3, #8
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d6d4:	bf00      	nop
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d6ee:	bf00      	nop
 800d6f0:	370c      	adds	r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b085      	sub	sp, #20
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	689a      	ldr	r2, [r3, #8]
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	683a      	ldr	r2, [r7, #0]
 800d71e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	1c5a      	adds	r2, r3, #1
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	601a      	str	r2, [r3, #0]
}
 800d736:	bf00      	nop
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d742:	b480      	push	{r7}
 800d744:	b085      	sub	sp, #20
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d758:	d103      	bne.n	800d762 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	e00c      	b.n	800d77c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	3308      	adds	r3, #8
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	e002      	b.n	800d770 <vListInsert+0x2e>
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	60fb      	str	r3, [r7, #12]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d2f6      	bcs.n	800d76a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	683a      	ldr	r2, [r7, #0]
 800d78a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	683a      	ldr	r2, [r7, #0]
 800d796:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	1c5a      	adds	r2, r3, #1
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	601a      	str	r2, [r3, #0]
}
 800d7a8:	bf00      	nop
 800d7aa:	3714      	adds	r7, #20
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	6892      	ldr	r2, [r2, #8]
 800d7ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	6852      	ldr	r2, [r2, #4]
 800d7d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d103      	bne.n	800d7e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	689a      	ldr	r2, [r3, #8]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	1e5a      	subs	r2, r3, #1
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3714      	adds	r7, #20
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d10d      	bne.n	800d838 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d820:	b672      	cpsid	i
 800d822:	f383 8811 	msr	BASEPRI, r3
 800d826:	f3bf 8f6f 	isb	sy
 800d82a:	f3bf 8f4f 	dsb	sy
 800d82e:	b662      	cpsie	i
 800d830:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d832:	bf00      	nop
 800d834:	bf00      	nop
 800d836:	e7fd      	b.n	800d834 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d838:	f001 ff38 	bl	800f6ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d844:	68f9      	ldr	r1, [r7, #12]
 800d846:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d848:	fb01 f303 	mul.w	r3, r1, r3
 800d84c:	441a      	add	r2, r3
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2200      	movs	r2, #0
 800d856:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d868:	3b01      	subs	r3, #1
 800d86a:	68f9      	ldr	r1, [r7, #12]
 800d86c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d86e:	fb01 f303 	mul.w	r3, r1, r3
 800d872:	441a      	add	r2, r3
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	22ff      	movs	r2, #255	@ 0xff
 800d87c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	22ff      	movs	r2, #255	@ 0xff
 800d884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d114      	bne.n	800d8b8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d01a      	beq.n	800d8cc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	3310      	adds	r3, #16
 800d89a:	4618      	mov	r0, r3
 800d89c:	f001 f9ee 	bl	800ec7c <xTaskRemoveFromEventList>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d012      	beq.n	800d8cc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d8dc <xQueueGenericReset+0xd4>)
 800d8a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8ac:	601a      	str	r2, [r3, #0]
 800d8ae:	f3bf 8f4f 	dsb	sy
 800d8b2:	f3bf 8f6f 	isb	sy
 800d8b6:	e009      	b.n	800d8cc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	3310      	adds	r3, #16
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff feef 	bl	800d6a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3324      	adds	r3, #36	@ 0x24
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff feea 	bl	800d6a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d8cc:	f001 ff24 	bl	800f718 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d8d0:	2301      	movs	r3, #1
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	e000ed04 	.word	0xe000ed04

0800d8e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b08e      	sub	sp, #56	@ 0x38
 800d8e4:	af02      	add	r7, sp, #8
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
 800d8ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10d      	bne.n	800d910 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800d8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f8:	b672      	cpsid	i
 800d8fa:	f383 8811 	msr	BASEPRI, r3
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f3bf 8f4f 	dsb	sy
 800d906:	b662      	cpsie	i
 800d908:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d90a:	bf00      	nop
 800d90c:	bf00      	nop
 800d90e:	e7fd      	b.n	800d90c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10d      	bne.n	800d932 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800d916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d91a:	b672      	cpsid	i
 800d91c:	f383 8811 	msr	BASEPRI, r3
 800d920:	f3bf 8f6f 	isb	sy
 800d924:	f3bf 8f4f 	dsb	sy
 800d928:	b662      	cpsie	i
 800d92a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d92c:	bf00      	nop
 800d92e:	bf00      	nop
 800d930:	e7fd      	b.n	800d92e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <xQueueGenericCreateStatic+0x5e>
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <xQueueGenericCreateStatic+0x62>
 800d93e:	2301      	movs	r3, #1
 800d940:	e000      	b.n	800d944 <xQueueGenericCreateStatic+0x64>
 800d942:	2300      	movs	r3, #0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10d      	bne.n	800d964 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94c:	b672      	cpsid	i
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	b662      	cpsie	i
 800d95c:	623b      	str	r3, [r7, #32]
}
 800d95e:	bf00      	nop
 800d960:	bf00      	nop
 800d962:	e7fd      	b.n	800d960 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d102      	bne.n	800d970 <xQueueGenericCreateStatic+0x90>
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <xQueueGenericCreateStatic+0x94>
 800d970:	2301      	movs	r3, #1
 800d972:	e000      	b.n	800d976 <xQueueGenericCreateStatic+0x96>
 800d974:	2300      	movs	r3, #0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10d      	bne.n	800d996 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800d97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d97e:	b672      	cpsid	i
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	b662      	cpsie	i
 800d98e:	61fb      	str	r3, [r7, #28]
}
 800d990:	bf00      	nop
 800d992:	bf00      	nop
 800d994:	e7fd      	b.n	800d992 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d996:	2348      	movs	r3, #72	@ 0x48
 800d998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	2b48      	cmp	r3, #72	@ 0x48
 800d99e:	d00d      	beq.n	800d9bc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a4:	b672      	cpsid	i
 800d9a6:	f383 8811 	msr	BASEPRI, r3
 800d9aa:	f3bf 8f6f 	isb	sy
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	b662      	cpsie	i
 800d9b4:	61bb      	str	r3, [r7, #24]
}
 800d9b6:	bf00      	nop
 800d9b8:	bf00      	nop
 800d9ba:	e7fd      	b.n	800d9b8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d9bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00d      	beq.n	800d9e4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d9d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	68b9      	ldr	r1, [r7, #8]
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f000 f848 	bl	800da74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3730      	adds	r7, #48	@ 0x30
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b08a      	sub	sp, #40	@ 0x28
 800d9f2:	af02      	add	r7, sp, #8
 800d9f4:	60f8      	str	r0, [r7, #12]
 800d9f6:	60b9      	str	r1, [r7, #8]
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10d      	bne.n	800da1e <xQueueGenericCreate+0x30>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da06:	b672      	cpsid	i
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	b662      	cpsie	i
 800da16:	613b      	str	r3, [r7, #16]
}
 800da18:	bf00      	nop
 800da1a:	bf00      	nop
 800da1c:	e7fd      	b.n	800da1a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d102      	bne.n	800da2a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800da24:	2300      	movs	r3, #0
 800da26:	61fb      	str	r3, [r7, #28]
 800da28:	e004      	b.n	800da34 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	fb02 f303 	mul.w	r3, r2, r3
 800da32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	3348      	adds	r3, #72	@ 0x48
 800da38:	4618      	mov	r0, r3
 800da3a:	f001 ff65 	bl	800f908 <pvPortMalloc>
 800da3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d011      	beq.n	800da6a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	3348      	adds	r3, #72	@ 0x48
 800da4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	2200      	movs	r2, #0
 800da54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da58:	79fa      	ldrb	r2, [r7, #7]
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	4613      	mov	r3, r2
 800da60:	697a      	ldr	r2, [r7, #20]
 800da62:	68b9      	ldr	r1, [r7, #8]
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f000 f805 	bl	800da74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da6a:	69bb      	ldr	r3, [r7, #24]
	}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3720      	adds	r7, #32
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
 800da80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d103      	bne.n	800da90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	69ba      	ldr	r2, [r7, #24]
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	e002      	b.n	800da96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800da9c:	69bb      	ldr	r3, [r7, #24]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800daa2:	2101      	movs	r1, #1
 800daa4:	69b8      	ldr	r0, [r7, #24]
 800daa6:	f7ff feaf 	bl	800d808 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800daaa:	bf00      	nop
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00e      	beq.n	800dade <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dad2:	2300      	movs	r3, #0
 800dad4:	2200      	movs	r2, #0
 800dad6:	2100      	movs	r1, #0
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f837 	bl	800db4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dade:	bf00      	nop
 800dae0:	3708      	adds	r7, #8
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b086      	sub	sp, #24
 800daea:	af00      	add	r7, sp, #0
 800daec:	4603      	mov	r3, r0
 800daee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800daf0:	2301      	movs	r3, #1
 800daf2:	617b      	str	r3, [r7, #20]
 800daf4:	2300      	movs	r3, #0
 800daf6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	461a      	mov	r2, r3
 800dafc:	6939      	ldr	r1, [r7, #16]
 800dafe:	6978      	ldr	r0, [r7, #20]
 800db00:	f7ff ff75 	bl	800d9ee <xQueueGenericCreate>
 800db04:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f7ff ffd3 	bl	800dab2 <prvInitialiseMutex>

		return xNewQueue;
 800db0c:	68fb      	ldr	r3, [r7, #12]
	}
 800db0e:	4618      	mov	r0, r3
 800db10:	3718      	adds	r7, #24
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800db16:	b580      	push	{r7, lr}
 800db18:	b088      	sub	sp, #32
 800db1a:	af02      	add	r7, sp, #8
 800db1c:	4603      	mov	r3, r0
 800db1e:	6039      	str	r1, [r7, #0]
 800db20:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db22:	2301      	movs	r3, #1
 800db24:	617b      	str	r3, [r7, #20]
 800db26:	2300      	movs	r3, #0
 800db28:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2200      	movs	r2, #0
 800db32:	6939      	ldr	r1, [r7, #16]
 800db34:	6978      	ldr	r0, [r7, #20]
 800db36:	f7ff fed3 	bl	800d8e0 <xQueueGenericCreateStatic>
 800db3a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7ff ffb8 	bl	800dab2 <prvInitialiseMutex>

		return xNewQueue;
 800db42:	68fb      	ldr	r3, [r7, #12]
	}
 800db44:	4618      	mov	r0, r3
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b08e      	sub	sp, #56	@ 0x38
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
 800db58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800db5a:	2300      	movs	r3, #0
 800db5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800db62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10d      	bne.n	800db84 <xQueueGenericSend+0x38>
	__asm volatile
 800db68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db6c:	b672      	cpsid	i
 800db6e:	f383 8811 	msr	BASEPRI, r3
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	b662      	cpsie	i
 800db7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800db7e:	bf00      	nop
 800db80:	bf00      	nop
 800db82:	e7fd      	b.n	800db80 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d103      	bne.n	800db92 <xQueueGenericSend+0x46>
 800db8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d101      	bne.n	800db96 <xQueueGenericSend+0x4a>
 800db92:	2301      	movs	r3, #1
 800db94:	e000      	b.n	800db98 <xQueueGenericSend+0x4c>
 800db96:	2300      	movs	r3, #0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10d      	bne.n	800dbb8 <xQueueGenericSend+0x6c>
	__asm volatile
 800db9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba0:	b672      	cpsid	i
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	b662      	cpsie	i
 800dbb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dbb2:	bf00      	nop
 800dbb4:	bf00      	nop
 800dbb6:	e7fd      	b.n	800dbb4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d103      	bne.n	800dbc6 <xQueueGenericSend+0x7a>
 800dbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d101      	bne.n	800dbca <xQueueGenericSend+0x7e>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e000      	b.n	800dbcc <xQueueGenericSend+0x80>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10d      	bne.n	800dbec <xQueueGenericSend+0xa0>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd4:	b672      	cpsid	i
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	b662      	cpsie	i
 800dbe4:	623b      	str	r3, [r7, #32]
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	e7fd      	b.n	800dbe8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbec:	f001 fa0e 	bl	800f00c <xTaskGetSchedulerState>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d102      	bne.n	800dbfc <xQueueGenericSend+0xb0>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d101      	bne.n	800dc00 <xQueueGenericSend+0xb4>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e000      	b.n	800dc02 <xQueueGenericSend+0xb6>
 800dc00:	2300      	movs	r3, #0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d10d      	bne.n	800dc22 <xQueueGenericSend+0xd6>
	__asm volatile
 800dc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0a:	b672      	cpsid	i
 800dc0c:	f383 8811 	msr	BASEPRI, r3
 800dc10:	f3bf 8f6f 	isb	sy
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	b662      	cpsie	i
 800dc1a:	61fb      	str	r3, [r7, #28]
}
 800dc1c:	bf00      	nop
 800dc1e:	bf00      	nop
 800dc20:	e7fd      	b.n	800dc1e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc22:	f001 fd43 	bl	800f6ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d302      	bcc.n	800dc38 <xQueueGenericSend+0xec>
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d129      	bne.n	800dc8c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	68b9      	ldr	r1, [r7, #8]
 800dc3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc3e:	f000 fadf 	bl	800e200 <prvCopyDataToQueue>
 800dc42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d010      	beq.n	800dc6e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4e:	3324      	adds	r3, #36	@ 0x24
 800dc50:	4618      	mov	r0, r3
 800dc52:	f001 f813 	bl	800ec7c <xTaskRemoveFromEventList>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d013      	beq.n	800dc84 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dc5c:	4b3f      	ldr	r3, [pc, #252]	@ (800dd5c <xQueueGenericSend+0x210>)
 800dc5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	e00a      	b.n	800dc84 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d007      	beq.n	800dc84 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dc74:	4b39      	ldr	r3, [pc, #228]	@ (800dd5c <xQueueGenericSend+0x210>)
 800dc76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dc84:	f001 fd48 	bl	800f718 <vPortExitCritical>
				return pdPASS;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e063      	b.n	800dd54 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d103      	bne.n	800dc9a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc92:	f001 fd41 	bl	800f718 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dc96:	2300      	movs	r3, #0
 800dc98:	e05c      	b.n	800dd54 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d106      	bne.n	800dcae <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dca0:	f107 0314 	add.w	r3, r7, #20
 800dca4:	4618      	mov	r0, r3
 800dca6:	f001 f84f 	bl	800ed48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcae:	f001 fd33 	bl	800f718 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcb2:	f000 fdf3 	bl	800e89c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcb6:	f001 fcf9 	bl	800f6ac <vPortEnterCritical>
 800dcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcc0:	b25b      	sxtb	r3, r3
 800dcc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcc6:	d103      	bne.n	800dcd0 <xQueueGenericSend+0x184>
 800dcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcca:	2200      	movs	r2, #0
 800dccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcd6:	b25b      	sxtb	r3, r3
 800dcd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcdc:	d103      	bne.n	800dce6 <xQueueGenericSend+0x19a>
 800dcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dce6:	f001 fd17 	bl	800f718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcea:	1d3a      	adds	r2, r7, #4
 800dcec:	f107 0314 	add.w	r3, r7, #20
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f001 f83e 	bl	800ed74 <xTaskCheckForTimeOut>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d124      	bne.n	800dd48 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dcfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd00:	f000 fb76 	bl	800e3f0 <prvIsQueueFull>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d018      	beq.n	800dd3c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0c:	3310      	adds	r3, #16
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	4611      	mov	r1, r2
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 ff8a 	bl	800ec2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dd18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd1a:	f000 fb01 	bl	800e320 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dd1e:	f000 fdcb 	bl	800e8b8 <xTaskResumeAll>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f47f af7c 	bne.w	800dc22 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800dd2a:	4b0c      	ldr	r3, [pc, #48]	@ (800dd5c <xQueueGenericSend+0x210>)
 800dd2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd30:	601a      	str	r2, [r3, #0]
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	e772      	b.n	800dc22 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dd3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd3e:	f000 faef 	bl	800e320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd42:	f000 fdb9 	bl	800e8b8 <xTaskResumeAll>
 800dd46:	e76c      	b.n	800dc22 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dd48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd4a:	f000 fae9 	bl	800e320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd4e:	f000 fdb3 	bl	800e8b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dd52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3738      	adds	r7, #56	@ 0x38
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	e000ed04 	.word	0xe000ed04

0800dd60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08e      	sub	sp, #56	@ 0x38
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10d      	bne.n	800dd90 <xQueueGiveFromISR+0x30>
	__asm volatile
 800dd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd78:	b672      	cpsid	i
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	b662      	cpsie	i
 800dd88:	623b      	str	r3, [r7, #32]
}
 800dd8a:	bf00      	nop
 800dd8c:	bf00      	nop
 800dd8e:	e7fd      	b.n	800dd8c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00d      	beq.n	800ddb4 <xQueueGiveFromISR+0x54>
	__asm volatile
 800dd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd9c:	b672      	cpsid	i
 800dd9e:	f383 8811 	msr	BASEPRI, r3
 800dda2:	f3bf 8f6f 	isb	sy
 800dda6:	f3bf 8f4f 	dsb	sy
 800ddaa:	b662      	cpsie	i
 800ddac:	61fb      	str	r3, [r7, #28]
}
 800ddae:	bf00      	nop
 800ddb0:	bf00      	nop
 800ddb2:	e7fd      	b.n	800ddb0 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d103      	bne.n	800ddc4 <xQueueGiveFromISR+0x64>
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <xQueueGiveFromISR+0x68>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e000      	b.n	800ddca <xQueueGiveFromISR+0x6a>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10d      	bne.n	800ddea <xQueueGiveFromISR+0x8a>
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd2:	b672      	cpsid	i
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	b662      	cpsie	i
 800dde2:	61bb      	str	r3, [r7, #24]
}
 800dde4:	bf00      	nop
 800dde6:	bf00      	nop
 800dde8:	e7fd      	b.n	800dde6 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ddea:	f001 fd47 	bl	800f87c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ddee:	f3ef 8211 	mrs	r2, BASEPRI
 800ddf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf6:	b672      	cpsid	i
 800ddf8:	f383 8811 	msr	BASEPRI, r3
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	b662      	cpsie	i
 800de06:	617a      	str	r2, [r7, #20]
 800de08:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800de0a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800de14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d22b      	bcs.n	800de76 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800de1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2a:	1c5a      	adds	r2, r3, #1
 800de2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800de30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800de34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de38:	d112      	bne.n	800de60 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d016      	beq.n	800de70 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de44:	3324      	adds	r3, #36	@ 0x24
 800de46:	4618      	mov	r0, r3
 800de48:	f000 ff18 	bl	800ec7c <xTaskRemoveFromEventList>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00e      	beq.n	800de70 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	2201      	movs	r2, #1
 800de5c:	601a      	str	r2, [r3, #0]
 800de5e:	e007      	b.n	800de70 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de64:	3301      	adds	r3, #1
 800de66:	b2db      	uxtb	r3, r3
 800de68:	b25a      	sxtb	r2, r3
 800de6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800de70:	2301      	movs	r3, #1
 800de72:	637b      	str	r3, [r7, #52]	@ 0x34
 800de74:	e001      	b.n	800de7a <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800de76:	2300      	movs	r3, #0
 800de78:	637b      	str	r3, [r7, #52]	@ 0x34
 800de7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de7c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800de84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3738      	adds	r7, #56	@ 0x38
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08e      	sub	sp, #56	@ 0x38
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800de9a:	2300      	movs	r3, #0
 800de9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dea2:	2300      	movs	r3, #0
 800dea4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10d      	bne.n	800dec8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800deac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb0:	b672      	cpsid	i
 800deb2:	f383 8811 	msr	BASEPRI, r3
 800deb6:	f3bf 8f6f 	isb	sy
 800deba:	f3bf 8f4f 	dsb	sy
 800debe:	b662      	cpsie	i
 800dec0:	623b      	str	r3, [r7, #32]
}
 800dec2:	bf00      	nop
 800dec4:	bf00      	nop
 800dec6:	e7fd      	b.n	800dec4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00d      	beq.n	800deec <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ded0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded4:	b672      	cpsid	i
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	b662      	cpsie	i
 800dee4:	61fb      	str	r3, [r7, #28]
}
 800dee6:	bf00      	nop
 800dee8:	bf00      	nop
 800deea:	e7fd      	b.n	800dee8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800deec:	f001 f88e 	bl	800f00c <xTaskGetSchedulerState>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d102      	bne.n	800defc <xQueueSemaphoreTake+0x6c>
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d101      	bne.n	800df00 <xQueueSemaphoreTake+0x70>
 800defc:	2301      	movs	r3, #1
 800defe:	e000      	b.n	800df02 <xQueueSemaphoreTake+0x72>
 800df00:	2300      	movs	r3, #0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10d      	bne.n	800df22 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0a:	b672      	cpsid	i
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	b662      	cpsie	i
 800df1a:	61bb      	str	r3, [r7, #24]
}
 800df1c:	bf00      	nop
 800df1e:	bf00      	nop
 800df20:	e7fd      	b.n	800df1e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df22:	f001 fbc3 	bl	800f6ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800df26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800df2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d024      	beq.n	800df7c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800df32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df34:	1e5a      	subs	r2, r3, #1
 800df36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d104      	bne.n	800df4c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800df42:	f001 fa2d 	bl	800f3a0 <pvTaskIncrementMutexHeldCount>
 800df46:	4602      	mov	r2, r0
 800df48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00f      	beq.n	800df74 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df56:	3310      	adds	r3, #16
 800df58:	4618      	mov	r0, r3
 800df5a:	f000 fe8f 	bl	800ec7c <xTaskRemoveFromEventList>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d007      	beq.n	800df74 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df64:	4b55      	ldr	r3, [pc, #340]	@ (800e0bc <xQueueSemaphoreTake+0x22c>)
 800df66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df74:	f001 fbd0 	bl	800f718 <vPortExitCritical>
				return pdPASS;
 800df78:	2301      	movs	r3, #1
 800df7a:	e09a      	b.n	800e0b2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d114      	bne.n	800dfac <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800df82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00d      	beq.n	800dfa4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800df88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df8c:	b672      	cpsid	i
 800df8e:	f383 8811 	msr	BASEPRI, r3
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	b662      	cpsie	i
 800df9c:	617b      	str	r3, [r7, #20]
}
 800df9e:	bf00      	nop
 800dfa0:	bf00      	nop
 800dfa2:	e7fd      	b.n	800dfa0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dfa4:	f001 fbb8 	bl	800f718 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	e082      	b.n	800e0b2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfb2:	f107 030c 	add.w	r3, r7, #12
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f000 fec6 	bl	800ed48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfc0:	f001 fbaa 	bl	800f718 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfc4:	f000 fc6a 	bl	800e89c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfc8:	f001 fb70 	bl	800f6ac <vPortEnterCritical>
 800dfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dfd2:	b25b      	sxtb	r3, r3
 800dfd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfd8:	d103      	bne.n	800dfe2 <xQueueSemaphoreTake+0x152>
 800dfda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dfe8:	b25b      	sxtb	r3, r3
 800dfea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfee:	d103      	bne.n	800dff8 <xQueueSemaphoreTake+0x168>
 800dff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dff8:	f001 fb8e 	bl	800f718 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dffc:	463a      	mov	r2, r7
 800dffe:	f107 030c 	add.w	r3, r7, #12
 800e002:	4611      	mov	r1, r2
 800e004:	4618      	mov	r0, r3
 800e006:	f000 feb5 	bl	800ed74 <xTaskCheckForTimeOut>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d132      	bne.n	800e076 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e010:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e012:	f000 f9d7 	bl	800e3c4 <prvIsQueueEmpty>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d026      	beq.n	800e06a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d109      	bne.n	800e038 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e024:	f001 fb42 	bl	800f6ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f001 f80b 	bl	800f048 <xTaskPriorityInherit>
 800e032:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e034:	f001 fb70 	bl	800f718 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03a:	3324      	adds	r3, #36	@ 0x24
 800e03c:	683a      	ldr	r2, [r7, #0]
 800e03e:	4611      	mov	r1, r2
 800e040:	4618      	mov	r0, r3
 800e042:	f000 fdf3 	bl	800ec2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e046:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e048:	f000 f96a 	bl	800e320 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e04c:	f000 fc34 	bl	800e8b8 <xTaskResumeAll>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	f47f af65 	bne.w	800df22 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e058:	4b18      	ldr	r3, [pc, #96]	@ (800e0bc <xQueueSemaphoreTake+0x22c>)
 800e05a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e05e:	601a      	str	r2, [r3, #0]
 800e060:	f3bf 8f4f 	dsb	sy
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	e75b      	b.n	800df22 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e06a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e06c:	f000 f958 	bl	800e320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e070:	f000 fc22 	bl	800e8b8 <xTaskResumeAll>
 800e074:	e755      	b.n	800df22 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e076:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e078:	f000 f952 	bl	800e320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e07c:	f000 fc1c 	bl	800e8b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e082:	f000 f99f 	bl	800e3c4 <prvIsQueueEmpty>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f43f af4a 	beq.w	800df22 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00d      	beq.n	800e0b0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e094:	f001 fb0a 	bl	800f6ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e098:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e09a:	f000 f899 	bl	800e1d0 <prvGetDisinheritPriorityAfterTimeout>
 800e09e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f001 f8da 	bl	800f260 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e0ac:	f001 fb34 	bl	800f718 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e0b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3738      	adds	r7, #56	@ 0x38
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	e000ed04 	.word	0xe000ed04

0800e0c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b08e      	sub	sp, #56	@ 0x38
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d10d      	bne.n	800e0f2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0da:	b672      	cpsid	i
 800e0dc:	f383 8811 	msr	BASEPRI, r3
 800e0e0:	f3bf 8f6f 	isb	sy
 800e0e4:	f3bf 8f4f 	dsb	sy
 800e0e8:	b662      	cpsie	i
 800e0ea:	623b      	str	r3, [r7, #32]
}
 800e0ec:	bf00      	nop
 800e0ee:	bf00      	nop
 800e0f0:	e7fd      	b.n	800e0ee <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d103      	bne.n	800e100 <xQueueReceiveFromISR+0x40>
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <xQueueReceiveFromISR+0x44>
 800e100:	2301      	movs	r3, #1
 800e102:	e000      	b.n	800e106 <xQueueReceiveFromISR+0x46>
 800e104:	2300      	movs	r3, #0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10d      	bne.n	800e126 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10e:	b672      	cpsid	i
 800e110:	f383 8811 	msr	BASEPRI, r3
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	b662      	cpsie	i
 800e11e:	61fb      	str	r3, [r7, #28]
}
 800e120:	bf00      	nop
 800e122:	bf00      	nop
 800e124:	e7fd      	b.n	800e122 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e126:	f001 fba9 	bl	800f87c <vPortValidateInterruptPriority>
	__asm volatile
 800e12a:	f3ef 8211 	mrs	r2, BASEPRI
 800e12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e132:	b672      	cpsid	i
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	b662      	cpsie	i
 800e142:	61ba      	str	r2, [r7, #24]
 800e144:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e146:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e148:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e14e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e152:	2b00      	cmp	r3, #0
 800e154:	d02f      	beq.n	800e1b6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e15c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e160:	68b9      	ldr	r1, [r7, #8]
 800e162:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e164:	f000 f8b6 	bl	800e2d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e16a:	1e5a      	subs	r2, r3, #1
 800e16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e16e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e170:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e178:	d112      	bne.n	800e1a0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17c:	691b      	ldr	r3, [r3, #16]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d016      	beq.n	800e1b0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e184:	3310      	adds	r3, #16
 800e186:	4618      	mov	r0, r3
 800e188:	f000 fd78 	bl	800ec7c <xTaskRemoveFromEventList>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00e      	beq.n	800e1b0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00b      	beq.n	800e1b0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	601a      	str	r2, [r3, #0]
 800e19e:	e007      	b.n	800e1b0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	b25a      	sxtb	r2, r3
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1b4:	e001      	b.n	800e1ba <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	f383 8811 	msr	BASEPRI, r3
}
 800e1c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3738      	adds	r7, #56	@ 0x38
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d006      	beq.n	800e1ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f1c3 0307 	rsb	r3, r3, #7
 800e1ea:	60fb      	str	r3, [r7, #12]
 800e1ec:	e001      	b.n	800e1f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
	}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3714      	adds	r7, #20
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e20c:	2300      	movs	r3, #0
 800e20e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e214:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10d      	bne.n	800e23a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d14d      	bne.n	800e2c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 ff8c 	bl	800f148 <xTaskPriorityDisinherit>
 800e230:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2200      	movs	r2, #0
 800e236:	609a      	str	r2, [r3, #8]
 800e238:	e043      	b.n	800e2c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d119      	bne.n	800e274 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6858      	ldr	r0, [r3, #4]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e248:	461a      	mov	r2, r3
 800e24a:	68b9      	ldr	r1, [r7, #8]
 800e24c:	f001 fd9a 	bl	800fd84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	685a      	ldr	r2, [r3, #4]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e258:	441a      	add	r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	429a      	cmp	r2, r3
 800e268:	d32b      	bcc.n	800e2c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	605a      	str	r2, [r3, #4]
 800e272:	e026      	b.n	800e2c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	68d8      	ldr	r0, [r3, #12]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e27c:	461a      	mov	r2, r3
 800e27e:	68b9      	ldr	r1, [r7, #8]
 800e280:	f001 fd80 	bl	800fd84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68da      	ldr	r2, [r3, #12]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e28c:	425b      	negs	r3, r3
 800e28e:	441a      	add	r2, r3
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	68da      	ldr	r2, [r3, #12]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d207      	bcs.n	800e2b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	689a      	ldr	r2, [r3, #8]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2a8:	425b      	negs	r3, r3
 800e2aa:	441a      	add	r2, r3
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d105      	bne.n	800e2c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	1c5a      	adds	r2, r3, #1
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e2ca:	697b      	ldr	r3, [r7, #20]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d018      	beq.n	800e318 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68da      	ldr	r2, [r3, #12]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ee:	441a      	add	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	68da      	ldr	r2, [r3, #12]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d303      	bcc.n	800e308 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	68d9      	ldr	r1, [r3, #12]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e310:	461a      	mov	r2, r3
 800e312:	6838      	ldr	r0, [r7, #0]
 800e314:	f001 fd36 	bl	800fd84 <memcpy>
	}
}
 800e318:	bf00      	nop
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e328:	f001 f9c0 	bl	800f6ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e332:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e334:	e011      	b.n	800e35a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d012      	beq.n	800e364 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	3324      	adds	r3, #36	@ 0x24
 800e342:	4618      	mov	r0, r3
 800e344:	f000 fc9a 	bl	800ec7c <xTaskRemoveFromEventList>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d001      	beq.n	800e352 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e34e:	f000 fd79 	bl	800ee44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e352:	7bfb      	ldrb	r3, [r7, #15]
 800e354:	3b01      	subs	r3, #1
 800e356:	b2db      	uxtb	r3, r3
 800e358:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	dce9      	bgt.n	800e336 <prvUnlockQueue+0x16>
 800e362:	e000      	b.n	800e366 <prvUnlockQueue+0x46>
					break;
 800e364:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	22ff      	movs	r2, #255	@ 0xff
 800e36a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e36e:	f001 f9d3 	bl	800f718 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e372:	f001 f99b 	bl	800f6ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e37c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e37e:	e011      	b.n	800e3a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d012      	beq.n	800e3ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3310      	adds	r3, #16
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 fc75 	bl	800ec7c <xTaskRemoveFromEventList>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e398:	f000 fd54 	bl	800ee44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e39c:	7bbb      	ldrb	r3, [r7, #14]
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	dce9      	bgt.n	800e380 <prvUnlockQueue+0x60>
 800e3ac:	e000      	b.n	800e3b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e3ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	22ff      	movs	r2, #255	@ 0xff
 800e3b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e3b8:	f001 f9ae 	bl	800f718 <vPortExitCritical>
}
 800e3bc:	bf00      	nop
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e3cc:	f001 f96e 	bl	800f6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d102      	bne.n	800e3de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	60fb      	str	r3, [r7, #12]
 800e3dc:	e001      	b.n	800e3e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e3e2:	f001 f999 	bl	800f718 <vPortExitCritical>

	return xReturn;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e3f8:	f001 f958 	bl	800f6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e404:	429a      	cmp	r2, r3
 800e406:	d102      	bne.n	800e40e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e408:	2301      	movs	r3, #1
 800e40a:	60fb      	str	r3, [r7, #12]
 800e40c:	e001      	b.n	800e412 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e40e:	2300      	movs	r3, #0
 800e410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e412:	f001 f981 	bl	800f718 <vPortExitCritical>

	return xReturn;
 800e416:	68fb      	ldr	r3, [r7, #12]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e420:	b580      	push	{r7, lr}
 800e422:	b08e      	sub	sp, #56	@ 0x38
 800e424:	af04      	add	r7, sp, #16
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
 800e42c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10d      	bne.n	800e450 <xTaskCreateStatic+0x30>
	__asm volatile
 800e434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e438:	b672      	cpsid	i
 800e43a:	f383 8811 	msr	BASEPRI, r3
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	b662      	cpsie	i
 800e448:	623b      	str	r3, [r7, #32]
}
 800e44a:	bf00      	nop
 800e44c:	bf00      	nop
 800e44e:	e7fd      	b.n	800e44c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800e450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10d      	bne.n	800e472 <xTaskCreateStatic+0x52>
	__asm volatile
 800e456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e45a:	b672      	cpsid	i
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	b662      	cpsie	i
 800e46a:	61fb      	str	r3, [r7, #28]
}
 800e46c:	bf00      	nop
 800e46e:	bf00      	nop
 800e470:	e7fd      	b.n	800e46e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e472:	2354      	movs	r3, #84	@ 0x54
 800e474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	2b54      	cmp	r3, #84	@ 0x54
 800e47a:	d00d      	beq.n	800e498 <xTaskCreateStatic+0x78>
	__asm volatile
 800e47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e480:	b672      	cpsid	i
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	b662      	cpsie	i
 800e490:	61bb      	str	r3, [r7, #24]
}
 800e492:	bf00      	nop
 800e494:	bf00      	nop
 800e496:	e7fd      	b.n	800e494 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e498:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d01e      	beq.n	800e4de <xTaskCreateStatic+0xbe>
 800e4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d01b      	beq.n	800e4de <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	9303      	str	r3, [sp, #12]
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4be:	9302      	str	r3, [sp, #8]
 800e4c0:	f107 0314 	add.w	r3, r7, #20
 800e4c4:	9301      	str	r3, [sp, #4]
 800e4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	68b9      	ldr	r1, [r7, #8]
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	f000 f850 	bl	800e576 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e4d8:	f000 f8d8 	bl	800e68c <prvAddNewTaskToReadyList>
 800e4dc:	e001      	b.n	800e4e2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e4e2:	697b      	ldr	r3, [r7, #20]
	}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3728      	adds	r7, #40	@ 0x28
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b08c      	sub	sp, #48	@ 0x30
 800e4f0:	af04      	add	r7, sp, #16
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	603b      	str	r3, [r7, #0]
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4fc:	88fb      	ldrh	r3, [r7, #6]
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4618      	mov	r0, r3
 800e502:	f001 fa01 	bl	800f908 <pvPortMalloc>
 800e506:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00e      	beq.n	800e52c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e50e:	2054      	movs	r0, #84	@ 0x54
 800e510:	f001 f9fa 	bl	800f908 <pvPortMalloc>
 800e514:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d003      	beq.n	800e524 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	631a      	str	r2, [r3, #48]	@ 0x30
 800e522:	e005      	b.n	800e530 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e524:	6978      	ldr	r0, [r7, #20]
 800e526:	f001 fabd 	bl	800faa4 <vPortFree>
 800e52a:	e001      	b.n	800e530 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e52c:	2300      	movs	r3, #0
 800e52e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d017      	beq.n	800e566 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	2200      	movs	r2, #0
 800e53a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e53e:	88fa      	ldrh	r2, [r7, #6]
 800e540:	2300      	movs	r3, #0
 800e542:	9303      	str	r3, [sp, #12]
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	9302      	str	r3, [sp, #8]
 800e548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54a:	9301      	str	r3, [sp, #4]
 800e54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	68b9      	ldr	r1, [r7, #8]
 800e554:	68f8      	ldr	r0, [r7, #12]
 800e556:	f000 f80e 	bl	800e576 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e55a:	69f8      	ldr	r0, [r7, #28]
 800e55c:	f000 f896 	bl	800e68c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e560:	2301      	movs	r3, #1
 800e562:	61bb      	str	r3, [r7, #24]
 800e564:	e002      	b.n	800e56c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e56a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e56c:	69bb      	ldr	r3, [r7, #24]
	}
 800e56e:	4618      	mov	r0, r3
 800e570:	3720      	adds	r7, #32
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}

0800e576 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b088      	sub	sp, #32
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	60f8      	str	r0, [r7, #12]
 800e57e:	60b9      	str	r1, [r7, #8]
 800e580:	607a      	str	r2, [r7, #4]
 800e582:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e588:	6879      	ldr	r1, [r7, #4]
 800e58a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e58e:	440b      	add	r3, r1
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	4413      	add	r3, r2
 800e594:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	f023 0307 	bic.w	r3, r3, #7
 800e59c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	f003 0307 	and.w	r3, r3, #7
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d00d      	beq.n	800e5c4 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ac:	b672      	cpsid	i
 800e5ae:	f383 8811 	msr	BASEPRI, r3
 800e5b2:	f3bf 8f6f 	isb	sy
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	b662      	cpsie	i
 800e5bc:	617b      	str	r3, [r7, #20]
}
 800e5be:	bf00      	nop
 800e5c0:	bf00      	nop
 800e5c2:	e7fd      	b.n	800e5c0 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d01f      	beq.n	800e60a <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	61fb      	str	r3, [r7, #28]
 800e5ce:	e012      	b.n	800e5f6 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	7819      	ldrb	r1, [r3, #0]
 800e5d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	4413      	add	r3, r2
 800e5de:	3334      	adds	r3, #52	@ 0x34
 800e5e0:	460a      	mov	r2, r1
 800e5e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d006      	beq.n	800e5fe <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	61fb      	str	r3, [r7, #28]
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	2b0f      	cmp	r3, #15
 800e5fa:	d9e9      	bls.n	800e5d0 <prvInitialiseNewTask+0x5a>
 800e5fc:	e000      	b.n	800e600 <prvInitialiseNewTask+0x8a>
			{
				break;
 800e5fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e602:	2200      	movs	r2, #0
 800e604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e608:	e003      	b.n	800e612 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e614:	2b06      	cmp	r3, #6
 800e616:	d901      	bls.n	800e61c <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e618:	2306      	movs	r3, #6
 800e61a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e61e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e620:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e626:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62a:	2200      	movs	r2, #0
 800e62c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e630:	3304      	adds	r3, #4
 800e632:	4618      	mov	r0, r3
 800e634:	f7ff f854 	bl	800d6e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63a:	3318      	adds	r3, #24
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7ff f84f 	bl	800d6e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e646:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e64a:	f1c3 0207 	rsb	r2, r3, #7
 800e64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e650:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e656:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65a:	2200      	movs	r2, #0
 800e65c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e660:	2200      	movs	r2, #0
 800e662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e666:	683a      	ldr	r2, [r7, #0]
 800e668:	68f9      	ldr	r1, [r7, #12]
 800e66a:	69b8      	ldr	r0, [r7, #24]
 800e66c:	f000 ff12 	bl	800f494 <pxPortInitialiseStack>
 800e670:	4602      	mov	r2, r0
 800e672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e674:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e67e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e682:	bf00      	nop
 800e684:	3720      	adds	r7, #32
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
	...

0800e68c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e694:	f001 f80a 	bl	800f6ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e698:	4b2a      	ldr	r3, [pc, #168]	@ (800e744 <prvAddNewTaskToReadyList+0xb8>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3301      	adds	r3, #1
 800e69e:	4a29      	ldr	r2, [pc, #164]	@ (800e744 <prvAddNewTaskToReadyList+0xb8>)
 800e6a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e6a2:	4b29      	ldr	r3, [pc, #164]	@ (800e748 <prvAddNewTaskToReadyList+0xbc>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d109      	bne.n	800e6be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e6aa:	4a27      	ldr	r2, [pc, #156]	@ (800e748 <prvAddNewTaskToReadyList+0xbc>)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6b0:	4b24      	ldr	r3, [pc, #144]	@ (800e744 <prvAddNewTaskToReadyList+0xb8>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d110      	bne.n	800e6da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6b8:	f000 fbe8 	bl	800ee8c <prvInitialiseTaskLists>
 800e6bc:	e00d      	b.n	800e6da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6be:	4b23      	ldr	r3, [pc, #140]	@ (800e74c <prvAddNewTaskToReadyList+0xc0>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d109      	bne.n	800e6da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6c6:	4b20      	ldr	r3, [pc, #128]	@ (800e748 <prvAddNewTaskToReadyList+0xbc>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d802      	bhi.n	800e6da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6d4:	4a1c      	ldr	r2, [pc, #112]	@ (800e748 <prvAddNewTaskToReadyList+0xbc>)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6da:	4b1d      	ldr	r3, [pc, #116]	@ (800e750 <prvAddNewTaskToReadyList+0xc4>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	4a1b      	ldr	r2, [pc, #108]	@ (800e750 <prvAddNewTaskToReadyList+0xc4>)
 800e6e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	409a      	lsls	r2, r3
 800e6ec:	4b19      	ldr	r3, [pc, #100]	@ (800e754 <prvAddNewTaskToReadyList+0xc8>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	4a18      	ldr	r2, [pc, #96]	@ (800e754 <prvAddNewTaskToReadyList+0xc8>)
 800e6f4:	6013      	str	r3, [r2, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	4a15      	ldr	r2, [pc, #84]	@ (800e758 <prvAddNewTaskToReadyList+0xcc>)
 800e704:	441a      	add	r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	3304      	adds	r3, #4
 800e70a:	4619      	mov	r1, r3
 800e70c:	4610      	mov	r0, r2
 800e70e:	f7fe fff4 	bl	800d6fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e712:	f001 f801 	bl	800f718 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e716:	4b0d      	ldr	r3, [pc, #52]	@ (800e74c <prvAddNewTaskToReadyList+0xc0>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00e      	beq.n	800e73c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e71e:	4b0a      	ldr	r3, [pc, #40]	@ (800e748 <prvAddNewTaskToReadyList+0xbc>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e728:	429a      	cmp	r2, r3
 800e72a:	d207      	bcs.n	800e73c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e72c:	4b0b      	ldr	r3, [pc, #44]	@ (800e75c <prvAddNewTaskToReadyList+0xd0>)
 800e72e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	f3bf 8f4f 	dsb	sy
 800e738:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e73c:	bf00      	nop
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	20001a98 	.word	0x20001a98
 800e748:	20001998 	.word	0x20001998
 800e74c:	20001aa4 	.word	0x20001aa4
 800e750:	20001ab4 	.word	0x20001ab4
 800e754:	20001aa0 	.word	0x20001aa0
 800e758:	2000199c 	.word	0x2000199c
 800e75c:	e000ed04 	.word	0xe000ed04

0800e760 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e768:	2300      	movs	r3, #0
 800e76a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d01a      	beq.n	800e7a8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e772:	4b15      	ldr	r3, [pc, #84]	@ (800e7c8 <vTaskDelay+0x68>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d00d      	beq.n	800e796 <vTaskDelay+0x36>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77e:	b672      	cpsid	i
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	b662      	cpsie	i
 800e78e:	60bb      	str	r3, [r7, #8]
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	e7fd      	b.n	800e792 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e796:	f000 f881 	bl	800e89c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e79a:	2100      	movs	r1, #0
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fe13 	bl	800f3c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e7a2:	f000 f889 	bl	800e8b8 <xTaskResumeAll>
 800e7a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d107      	bne.n	800e7be <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800e7ae:	4b07      	ldr	r3, [pc, #28]	@ (800e7cc <vTaskDelay+0x6c>)
 800e7b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7b4:	601a      	str	r2, [r3, #0]
 800e7b6:	f3bf 8f4f 	dsb	sy
 800e7ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7be:	bf00      	nop
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20001ac0 	.word	0x20001ac0
 800e7cc:	e000ed04 	.word	0xe000ed04

0800e7d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08a      	sub	sp, #40	@ 0x28
 800e7d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e7de:	463a      	mov	r2, r7
 800e7e0:	1d39      	adds	r1, r7, #4
 800e7e2:	f107 0308 	add.w	r3, r7, #8
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7f2 fe84 	bl	80014f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e7ec:	6839      	ldr	r1, [r7, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68ba      	ldr	r2, [r7, #8]
 800e7f2:	9202      	str	r2, [sp, #8]
 800e7f4:	9301      	str	r3, [sp, #4]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	460a      	mov	r2, r1
 800e7fe:	4921      	ldr	r1, [pc, #132]	@ (800e884 <vTaskStartScheduler+0xb4>)
 800e800:	4821      	ldr	r0, [pc, #132]	@ (800e888 <vTaskStartScheduler+0xb8>)
 800e802:	f7ff fe0d 	bl	800e420 <xTaskCreateStatic>
 800e806:	4603      	mov	r3, r0
 800e808:	4a20      	ldr	r2, [pc, #128]	@ (800e88c <vTaskStartScheduler+0xbc>)
 800e80a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e80c:	4b1f      	ldr	r3, [pc, #124]	@ (800e88c <vTaskStartScheduler+0xbc>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e814:	2301      	movs	r3, #1
 800e816:	617b      	str	r3, [r7, #20]
 800e818:	e001      	b.n	800e81e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e81a:	2300      	movs	r3, #0
 800e81c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	2b01      	cmp	r3, #1
 800e822:	d118      	bne.n	800e856 <vTaskStartScheduler+0x86>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e828:	b672      	cpsid	i
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	b662      	cpsie	i
 800e838:	613b      	str	r3, [r7, #16]
}
 800e83a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e83c:	4b14      	ldr	r3, [pc, #80]	@ (800e890 <vTaskStartScheduler+0xc0>)
 800e83e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e842:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e844:	4b13      	ldr	r3, [pc, #76]	@ (800e894 <vTaskStartScheduler+0xc4>)
 800e846:	2201      	movs	r2, #1
 800e848:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e84a:	4b13      	ldr	r3, [pc, #76]	@ (800e898 <vTaskStartScheduler+0xc8>)
 800e84c:	2200      	movs	r2, #0
 800e84e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e850:	f000 feae 	bl	800f5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e854:	e011      	b.n	800e87a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e85c:	d10d      	bne.n	800e87a <vTaskStartScheduler+0xaa>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e862:	b672      	cpsid	i
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	b662      	cpsie	i
 800e872:	60fb      	str	r3, [r7, #12]
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop
 800e878:	e7fd      	b.n	800e876 <vTaskStartScheduler+0xa6>
}
 800e87a:	bf00      	nop
 800e87c:	3718      	adds	r7, #24
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	08011ca4 	.word	0x08011ca4
 800e888:	0800ee5d 	.word	0x0800ee5d
 800e88c:	20001abc 	.word	0x20001abc
 800e890:	20001ab8 	.word	0x20001ab8
 800e894:	20001aa4 	.word	0x20001aa4
 800e898:	20001a9c 	.word	0x20001a9c

0800e89c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e89c:	b480      	push	{r7}
 800e89e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e8a0:	4b04      	ldr	r3, [pc, #16]	@ (800e8b4 <vTaskSuspendAll+0x18>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	4a03      	ldr	r2, [pc, #12]	@ (800e8b4 <vTaskSuspendAll+0x18>)
 800e8a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e8aa:	bf00      	nop
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr
 800e8b4:	20001ac0 	.word	0x20001ac0

0800e8b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e8c6:	4b43      	ldr	r3, [pc, #268]	@ (800e9d4 <xTaskResumeAll+0x11c>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10d      	bne.n	800e8ea <xTaskResumeAll+0x32>
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d2:	b672      	cpsid	i
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	b662      	cpsie	i
 800e8e2:	603b      	str	r3, [r7, #0]
}
 800e8e4:	bf00      	nop
 800e8e6:	bf00      	nop
 800e8e8:	e7fd      	b.n	800e8e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e8ea:	f000 fedf 	bl	800f6ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e8ee:	4b39      	ldr	r3, [pc, #228]	@ (800e9d4 <xTaskResumeAll+0x11c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	3b01      	subs	r3, #1
 800e8f4:	4a37      	ldr	r2, [pc, #220]	@ (800e9d4 <xTaskResumeAll+0x11c>)
 800e8f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8f8:	4b36      	ldr	r3, [pc, #216]	@ (800e9d4 <xTaskResumeAll+0x11c>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d161      	bne.n	800e9c4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e900:	4b35      	ldr	r3, [pc, #212]	@ (800e9d8 <xTaskResumeAll+0x120>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d05d      	beq.n	800e9c4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e908:	e02e      	b.n	800e968 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e90a:	4b34      	ldr	r3, [pc, #208]	@ (800e9dc <xTaskResumeAll+0x124>)
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	3318      	adds	r3, #24
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe ff4c 	bl	800d7b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	3304      	adds	r3, #4
 800e920:	4618      	mov	r0, r3
 800e922:	f7fe ff47 	bl	800d7b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e92a:	2201      	movs	r2, #1
 800e92c:	409a      	lsls	r2, r3
 800e92e:	4b2c      	ldr	r3, [pc, #176]	@ (800e9e0 <xTaskResumeAll+0x128>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4313      	orrs	r3, r2
 800e934:	4a2a      	ldr	r2, [pc, #168]	@ (800e9e0 <xTaskResumeAll+0x128>)
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e93c:	4613      	mov	r3, r2
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	4413      	add	r3, r2
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	4a27      	ldr	r2, [pc, #156]	@ (800e9e4 <xTaskResumeAll+0x12c>)
 800e946:	441a      	add	r2, r3
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	3304      	adds	r3, #4
 800e94c:	4619      	mov	r1, r3
 800e94e:	4610      	mov	r0, r2
 800e950:	f7fe fed3 	bl	800d6fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e958:	4b23      	ldr	r3, [pc, #140]	@ (800e9e8 <xTaskResumeAll+0x130>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e95e:	429a      	cmp	r2, r3
 800e960:	d302      	bcc.n	800e968 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800e962:	4b22      	ldr	r3, [pc, #136]	@ (800e9ec <xTaskResumeAll+0x134>)
 800e964:	2201      	movs	r2, #1
 800e966:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e968:	4b1c      	ldr	r3, [pc, #112]	@ (800e9dc <xTaskResumeAll+0x124>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d1cc      	bne.n	800e90a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d001      	beq.n	800e97a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e976:	f000 fb29 	bl	800efcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e97a:	4b1d      	ldr	r3, [pc, #116]	@ (800e9f0 <xTaskResumeAll+0x138>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d010      	beq.n	800e9a8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e986:	f000 f837 	bl	800e9f8 <xTaskIncrementTick>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d002      	beq.n	800e996 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800e990:	4b16      	ldr	r3, [pc, #88]	@ (800e9ec <xTaskResumeAll+0x134>)
 800e992:	2201      	movs	r2, #1
 800e994:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3b01      	subs	r3, #1
 800e99a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1f1      	bne.n	800e986 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800e9a2:	4b13      	ldr	r3, [pc, #76]	@ (800e9f0 <xTaskResumeAll+0x138>)
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e9a8:	4b10      	ldr	r3, [pc, #64]	@ (800e9ec <xTaskResumeAll+0x134>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d009      	beq.n	800e9c4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e9b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e9f4 <xTaskResumeAll+0x13c>)
 800e9b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9ba:	601a      	str	r2, [r3, #0]
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e9c4:	f000 fea8 	bl	800f718 <vPortExitCritical>

	return xAlreadyYielded;
 800e9c8:	68bb      	ldr	r3, [r7, #8]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20001ac0 	.word	0x20001ac0
 800e9d8:	20001a98 	.word	0x20001a98
 800e9dc:	20001a58 	.word	0x20001a58
 800e9e0:	20001aa0 	.word	0x20001aa0
 800e9e4:	2000199c 	.word	0x2000199c
 800e9e8:	20001998 	.word	0x20001998
 800e9ec:	20001aac 	.word	0x20001aac
 800e9f0:	20001aa8 	.word	0x20001aa8
 800e9f4:	e000ed04 	.word	0xe000ed04

0800e9f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea02:	4b50      	ldr	r3, [pc, #320]	@ (800eb44 <xTaskIncrementTick+0x14c>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	f040 808b 	bne.w	800eb22 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ea0c:	4b4e      	ldr	r3, [pc, #312]	@ (800eb48 <xTaskIncrementTick+0x150>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	3301      	adds	r3, #1
 800ea12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ea14:	4a4c      	ldr	r2, [pc, #304]	@ (800eb48 <xTaskIncrementTick+0x150>)
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d123      	bne.n	800ea68 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ea20:	4b4a      	ldr	r3, [pc, #296]	@ (800eb4c <xTaskIncrementTick+0x154>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00d      	beq.n	800ea46 <xTaskIncrementTick+0x4e>
	__asm volatile
 800ea2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea2e:	b672      	cpsid	i
 800ea30:	f383 8811 	msr	BASEPRI, r3
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	f3bf 8f4f 	dsb	sy
 800ea3c:	b662      	cpsie	i
 800ea3e:	603b      	str	r3, [r7, #0]
}
 800ea40:	bf00      	nop
 800ea42:	bf00      	nop
 800ea44:	e7fd      	b.n	800ea42 <xTaskIncrementTick+0x4a>
 800ea46:	4b41      	ldr	r3, [pc, #260]	@ (800eb4c <xTaskIncrementTick+0x154>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	60fb      	str	r3, [r7, #12]
 800ea4c:	4b40      	ldr	r3, [pc, #256]	@ (800eb50 <xTaskIncrementTick+0x158>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a3e      	ldr	r2, [pc, #248]	@ (800eb4c <xTaskIncrementTick+0x154>)
 800ea52:	6013      	str	r3, [r2, #0]
 800ea54:	4a3e      	ldr	r2, [pc, #248]	@ (800eb50 <xTaskIncrementTick+0x158>)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6013      	str	r3, [r2, #0]
 800ea5a:	4b3e      	ldr	r3, [pc, #248]	@ (800eb54 <xTaskIncrementTick+0x15c>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	4a3c      	ldr	r2, [pc, #240]	@ (800eb54 <xTaskIncrementTick+0x15c>)
 800ea62:	6013      	str	r3, [r2, #0]
 800ea64:	f000 fab2 	bl	800efcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea68:	4b3b      	ldr	r3, [pc, #236]	@ (800eb58 <xTaskIncrementTick+0x160>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d348      	bcc.n	800eb04 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea72:	4b36      	ldr	r3, [pc, #216]	@ (800eb4c <xTaskIncrementTick+0x154>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d104      	bne.n	800ea86 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea7c:	4b36      	ldr	r3, [pc, #216]	@ (800eb58 <xTaskIncrementTick+0x160>)
 800ea7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea82:	601a      	str	r2, [r3, #0]
					break;
 800ea84:	e03e      	b.n	800eb04 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea86:	4b31      	ldr	r3, [pc, #196]	@ (800eb4c <xTaskIncrementTick+0x154>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea96:	693a      	ldr	r2, [r7, #16]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d203      	bcs.n	800eaa6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ea9e:	4a2e      	ldr	r2, [pc, #184]	@ (800eb58 <xTaskIncrementTick+0x160>)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eaa4:	e02e      	b.n	800eb04 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fe fe82 	bl	800d7b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d004      	beq.n	800eac2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	3318      	adds	r3, #24
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fe fe79 	bl	800d7b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eac6:	2201      	movs	r2, #1
 800eac8:	409a      	lsls	r2, r3
 800eaca:	4b24      	ldr	r3, [pc, #144]	@ (800eb5c <xTaskIncrementTick+0x164>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4313      	orrs	r3, r2
 800ead0:	4a22      	ldr	r2, [pc, #136]	@ (800eb5c <xTaskIncrementTick+0x164>)
 800ead2:	6013      	str	r3, [r2, #0]
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ead8:	4613      	mov	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	4a1f      	ldr	r2, [pc, #124]	@ (800eb60 <xTaskIncrementTick+0x168>)
 800eae2:	441a      	add	r2, r3
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	3304      	adds	r3, #4
 800eae8:	4619      	mov	r1, r3
 800eaea:	4610      	mov	r0, r2
 800eaec:	f7fe fe05 	bl	800d6fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaf4:	4b1b      	ldr	r3, [pc, #108]	@ (800eb64 <xTaskIncrementTick+0x16c>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d3b9      	bcc.n	800ea72 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800eafe:	2301      	movs	r3, #1
 800eb00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb02:	e7b6      	b.n	800ea72 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eb04:	4b17      	ldr	r3, [pc, #92]	@ (800eb64 <xTaskIncrementTick+0x16c>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb0a:	4915      	ldr	r1, [pc, #84]	@ (800eb60 <xTaskIncrementTick+0x168>)
 800eb0c:	4613      	mov	r3, r2
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	4413      	add	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	440b      	add	r3, r1
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d907      	bls.n	800eb2c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	617b      	str	r3, [r7, #20]
 800eb20:	e004      	b.n	800eb2c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800eb22:	4b11      	ldr	r3, [pc, #68]	@ (800eb68 <xTaskIncrementTick+0x170>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3301      	adds	r3, #1
 800eb28:	4a0f      	ldr	r2, [pc, #60]	@ (800eb68 <xTaskIncrementTick+0x170>)
 800eb2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800eb2c:	4b0f      	ldr	r3, [pc, #60]	@ (800eb6c <xTaskIncrementTick+0x174>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d001      	beq.n	800eb38 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800eb34:	2301      	movs	r3, #1
 800eb36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800eb38:	697b      	ldr	r3, [r7, #20]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3718      	adds	r7, #24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20001ac0 	.word	0x20001ac0
 800eb48:	20001a9c 	.word	0x20001a9c
 800eb4c:	20001a50 	.word	0x20001a50
 800eb50:	20001a54 	.word	0x20001a54
 800eb54:	20001ab0 	.word	0x20001ab0
 800eb58:	20001ab8 	.word	0x20001ab8
 800eb5c:	20001aa0 	.word	0x20001aa0
 800eb60:	2000199c 	.word	0x2000199c
 800eb64:	20001998 	.word	0x20001998
 800eb68:	20001aa8 	.word	0x20001aa8
 800eb6c:	20001aac 	.word	0x20001aac

0800eb70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb70:	b480      	push	{r7}
 800eb72:	b087      	sub	sp, #28
 800eb74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb76:	4b28      	ldr	r3, [pc, #160]	@ (800ec18 <vTaskSwitchContext+0xa8>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb7e:	4b27      	ldr	r3, [pc, #156]	@ (800ec1c <vTaskSwitchContext+0xac>)
 800eb80:	2201      	movs	r2, #1
 800eb82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb84:	e042      	b.n	800ec0c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800eb86:	4b25      	ldr	r3, [pc, #148]	@ (800ec1c <vTaskSwitchContext+0xac>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb8c:	4b24      	ldr	r3, [pc, #144]	@ (800ec20 <vTaskSwitchContext+0xb0>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	fab3 f383 	clz	r3, r3
 800eb98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800eb9a:	7afb      	ldrb	r3, [r7, #11]
 800eb9c:	f1c3 031f 	rsb	r3, r3, #31
 800eba0:	617b      	str	r3, [r7, #20]
 800eba2:	4920      	ldr	r1, [pc, #128]	@ (800ec24 <vTaskSwitchContext+0xb4>)
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	4613      	mov	r3, r2
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	4413      	add	r3, r2
 800ebac:	009b      	lsls	r3, r3, #2
 800ebae:	440b      	add	r3, r1
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d10d      	bne.n	800ebd2 <vTaskSwitchContext+0x62>
	__asm volatile
 800ebb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebba:	b672      	cpsid	i
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	b662      	cpsie	i
 800ebca:	607b      	str	r3, [r7, #4]
}
 800ebcc:	bf00      	nop
 800ebce:	bf00      	nop
 800ebd0:	e7fd      	b.n	800ebce <vTaskSwitchContext+0x5e>
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	009b      	lsls	r3, r3, #2
 800ebd8:	4413      	add	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4a11      	ldr	r2, [pc, #68]	@ (800ec24 <vTaskSwitchContext+0xb4>)
 800ebde:	4413      	add	r3, r2
 800ebe0:	613b      	str	r3, [r7, #16]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	605a      	str	r2, [r3, #4]
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	685a      	ldr	r2, [r3, #4]
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	3308      	adds	r3, #8
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d104      	bne.n	800ec02 <vTaskSwitchContext+0x92>
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	685a      	ldr	r2, [r3, #4]
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	605a      	str	r2, [r3, #4]
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	4a07      	ldr	r2, [pc, #28]	@ (800ec28 <vTaskSwitchContext+0xb8>)
 800ec0a:	6013      	str	r3, [r2, #0]
}
 800ec0c:	bf00      	nop
 800ec0e:	371c      	adds	r7, #28
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	20001ac0 	.word	0x20001ac0
 800ec1c:	20001aac 	.word	0x20001aac
 800ec20:	20001aa0 	.word	0x20001aa0
 800ec24:	2000199c 	.word	0x2000199c
 800ec28:	20001998 	.word	0x20001998

0800ec2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10d      	bne.n	800ec58 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800ec3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec40:	b672      	cpsid	i
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	b662      	cpsie	i
 800ec50:	60fb      	str	r3, [r7, #12]
}
 800ec52:	bf00      	nop
 800ec54:	bf00      	nop
 800ec56:	e7fd      	b.n	800ec54 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec58:	4b07      	ldr	r3, [pc, #28]	@ (800ec78 <vTaskPlaceOnEventList+0x4c>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	3318      	adds	r3, #24
 800ec5e:	4619      	mov	r1, r3
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7fe fd6e 	bl	800d742 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec66:	2101      	movs	r1, #1
 800ec68:	6838      	ldr	r0, [r7, #0]
 800ec6a:	f000 fbad 	bl	800f3c8 <prvAddCurrentTaskToDelayedList>
}
 800ec6e:	bf00      	nop
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20001998 	.word	0x20001998

0800ec7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b086      	sub	sp, #24
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d10d      	bne.n	800ecae <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800ec92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec96:	b672      	cpsid	i
 800ec98:	f383 8811 	msr	BASEPRI, r3
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	b662      	cpsie	i
 800eca6:	60fb      	str	r3, [r7, #12]
}
 800eca8:	bf00      	nop
 800ecaa:	bf00      	nop
 800ecac:	e7fd      	b.n	800ecaa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	3318      	adds	r3, #24
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe fd7e 	bl	800d7b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ed30 <xTaskRemoveFromEventList+0xb4>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d11c      	bne.n	800ecfa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fe fd75 	bl	800d7b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecce:	2201      	movs	r2, #1
 800ecd0:	409a      	lsls	r2, r3
 800ecd2:	4b18      	ldr	r3, [pc, #96]	@ (800ed34 <xTaskRemoveFromEventList+0xb8>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	4a16      	ldr	r2, [pc, #88]	@ (800ed34 <xTaskRemoveFromEventList+0xb8>)
 800ecda:	6013      	str	r3, [r2, #0]
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ece0:	4613      	mov	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	4413      	add	r3, r2
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	4a13      	ldr	r2, [pc, #76]	@ (800ed38 <xTaskRemoveFromEventList+0xbc>)
 800ecea:	441a      	add	r2, r3
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	4610      	mov	r0, r2
 800ecf4:	f7fe fd01 	bl	800d6fa <vListInsertEnd>
 800ecf8:	e005      	b.n	800ed06 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	3318      	adds	r3, #24
 800ecfe:	4619      	mov	r1, r3
 800ed00:	480e      	ldr	r0, [pc, #56]	@ (800ed3c <xTaskRemoveFromEventList+0xc0>)
 800ed02:	f7fe fcfa 	bl	800d6fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed40 <xTaskRemoveFromEventList+0xc4>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d905      	bls.n	800ed20 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed14:	2301      	movs	r3, #1
 800ed16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed18:	4b0a      	ldr	r3, [pc, #40]	@ (800ed44 <xTaskRemoveFromEventList+0xc8>)
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	e001      	b.n	800ed24 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ed20:	2300      	movs	r3, #0
 800ed22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed24:	697b      	ldr	r3, [r7, #20]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3718      	adds	r7, #24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20001ac0 	.word	0x20001ac0
 800ed34:	20001aa0 	.word	0x20001aa0
 800ed38:	2000199c 	.word	0x2000199c
 800ed3c:	20001a58 	.word	0x20001a58
 800ed40:	20001998 	.word	0x20001998
 800ed44:	20001aac 	.word	0x20001aac

0800ed48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed50:	4b06      	ldr	r3, [pc, #24]	@ (800ed6c <vTaskInternalSetTimeOutState+0x24>)
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed58:	4b05      	ldr	r3, [pc, #20]	@ (800ed70 <vTaskInternalSetTimeOutState+0x28>)
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	605a      	str	r2, [r3, #4]
}
 800ed60:	bf00      	nop
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	20001ab0 	.word	0x20001ab0
 800ed70:	20001a9c 	.word	0x20001a9c

0800ed74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b088      	sub	sp, #32
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10d      	bne.n	800eda0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800ed84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed88:	b672      	cpsid	i
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	b662      	cpsie	i
 800ed98:	613b      	str	r3, [r7, #16]
}
 800ed9a:	bf00      	nop
 800ed9c:	bf00      	nop
 800ed9e:	e7fd      	b.n	800ed9c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d10d      	bne.n	800edc2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800eda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edaa:	b672      	cpsid	i
 800edac:	f383 8811 	msr	BASEPRI, r3
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	b662      	cpsie	i
 800edba:	60fb      	str	r3, [r7, #12]
}
 800edbc:	bf00      	nop
 800edbe:	bf00      	nop
 800edc0:	e7fd      	b.n	800edbe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800edc2:	f000 fc73 	bl	800f6ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800edc6:	4b1d      	ldr	r3, [pc, #116]	@ (800ee3c <xTaskCheckForTimeOut+0xc8>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	69ba      	ldr	r2, [r7, #24]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800edde:	d102      	bne.n	800ede6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ede0:	2300      	movs	r3, #0
 800ede2:	61fb      	str	r3, [r7, #28]
 800ede4:	e023      	b.n	800ee2e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	4b15      	ldr	r3, [pc, #84]	@ (800ee40 <xTaskCheckForTimeOut+0xcc>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d007      	beq.n	800ee02 <xTaskCheckForTimeOut+0x8e>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	69ba      	ldr	r2, [r7, #24]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d302      	bcc.n	800ee02 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800edfc:	2301      	movs	r3, #1
 800edfe:	61fb      	str	r3, [r7, #28]
 800ee00:	e015      	b.n	800ee2e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	697a      	ldr	r2, [r7, #20]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d20b      	bcs.n	800ee24 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	1ad2      	subs	r2, r2, r3
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7ff ff95 	bl	800ed48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	61fb      	str	r3, [r7, #28]
 800ee22:	e004      	b.n	800ee2e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	2200      	movs	r2, #0
 800ee28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee2e:	f000 fc73 	bl	800f718 <vPortExitCritical>

	return xReturn;
 800ee32:	69fb      	ldr	r3, [r7, #28]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3720      	adds	r7, #32
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	20001a9c 	.word	0x20001a9c
 800ee40:	20001ab0 	.word	0x20001ab0

0800ee44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee44:	b480      	push	{r7}
 800ee46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ee48:	4b03      	ldr	r3, [pc, #12]	@ (800ee58 <vTaskMissedYield+0x14>)
 800ee4a:	2201      	movs	r2, #1
 800ee4c:	601a      	str	r2, [r3, #0]
}
 800ee4e:	bf00      	nop
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	20001aac 	.word	0x20001aac

0800ee5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee64:	f000 f852 	bl	800ef0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee68:	4b06      	ldr	r3, [pc, #24]	@ (800ee84 <prvIdleTask+0x28>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d9f9      	bls.n	800ee64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee70:	4b05      	ldr	r3, [pc, #20]	@ (800ee88 <prvIdleTask+0x2c>)
 800ee72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee76:	601a      	str	r2, [r3, #0]
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee80:	e7f0      	b.n	800ee64 <prvIdleTask+0x8>
 800ee82:	bf00      	nop
 800ee84:	2000199c 	.word	0x2000199c
 800ee88:	e000ed04 	.word	0xe000ed04

0800ee8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee92:	2300      	movs	r3, #0
 800ee94:	607b      	str	r3, [r7, #4]
 800ee96:	e00c      	b.n	800eeb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4413      	add	r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	4a12      	ldr	r2, [pc, #72]	@ (800eeec <prvInitialiseTaskLists+0x60>)
 800eea4:	4413      	add	r3, r2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe fbfa 	bl	800d6a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	607b      	str	r3, [r7, #4]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b06      	cmp	r3, #6
 800eeb6:	d9ef      	bls.n	800ee98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eeb8:	480d      	ldr	r0, [pc, #52]	@ (800eef0 <prvInitialiseTaskLists+0x64>)
 800eeba:	f7fe fbf1 	bl	800d6a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eebe:	480d      	ldr	r0, [pc, #52]	@ (800eef4 <prvInitialiseTaskLists+0x68>)
 800eec0:	f7fe fbee 	bl	800d6a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eec4:	480c      	ldr	r0, [pc, #48]	@ (800eef8 <prvInitialiseTaskLists+0x6c>)
 800eec6:	f7fe fbeb 	bl	800d6a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eeca:	480c      	ldr	r0, [pc, #48]	@ (800eefc <prvInitialiseTaskLists+0x70>)
 800eecc:	f7fe fbe8 	bl	800d6a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eed0:	480b      	ldr	r0, [pc, #44]	@ (800ef00 <prvInitialiseTaskLists+0x74>)
 800eed2:	f7fe fbe5 	bl	800d6a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eed6:	4b0b      	ldr	r3, [pc, #44]	@ (800ef04 <prvInitialiseTaskLists+0x78>)
 800eed8:	4a05      	ldr	r2, [pc, #20]	@ (800eef0 <prvInitialiseTaskLists+0x64>)
 800eeda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eedc:	4b0a      	ldr	r3, [pc, #40]	@ (800ef08 <prvInitialiseTaskLists+0x7c>)
 800eede:	4a05      	ldr	r2, [pc, #20]	@ (800eef4 <prvInitialiseTaskLists+0x68>)
 800eee0:	601a      	str	r2, [r3, #0]
}
 800eee2:	bf00      	nop
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	2000199c 	.word	0x2000199c
 800eef0:	20001a28 	.word	0x20001a28
 800eef4:	20001a3c 	.word	0x20001a3c
 800eef8:	20001a58 	.word	0x20001a58
 800eefc:	20001a6c 	.word	0x20001a6c
 800ef00:	20001a84 	.word	0x20001a84
 800ef04:	20001a50 	.word	0x20001a50
 800ef08:	20001a54 	.word	0x20001a54

0800ef0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef12:	e019      	b.n	800ef48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef14:	f000 fbca 	bl	800f6ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef18:	4b10      	ldr	r3, [pc, #64]	@ (800ef5c <prvCheckTasksWaitingTermination+0x50>)
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	3304      	adds	r3, #4
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fe fc45 	bl	800d7b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef60 <prvCheckTasksWaitingTermination+0x54>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	3b01      	subs	r3, #1
 800ef30:	4a0b      	ldr	r2, [pc, #44]	@ (800ef60 <prvCheckTasksWaitingTermination+0x54>)
 800ef32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef34:	4b0b      	ldr	r3, [pc, #44]	@ (800ef64 <prvCheckTasksWaitingTermination+0x58>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	3b01      	subs	r3, #1
 800ef3a:	4a0a      	ldr	r2, [pc, #40]	@ (800ef64 <prvCheckTasksWaitingTermination+0x58>)
 800ef3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef3e:	f000 fbeb 	bl	800f718 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f810 	bl	800ef68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef48:	4b06      	ldr	r3, [pc, #24]	@ (800ef64 <prvCheckTasksWaitingTermination+0x58>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1e1      	bne.n	800ef14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ef50:	bf00      	nop
 800ef52:	bf00      	nop
 800ef54:	3708      	adds	r7, #8
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	20001a6c 	.word	0x20001a6c
 800ef60:	20001a98 	.word	0x20001a98
 800ef64:	20001a80 	.word	0x20001a80

0800ef68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d108      	bne.n	800ef8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f000 fd90 	bl	800faa4 <vPortFree>
				vPortFree( pxTCB );
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fd8d 	bl	800faa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ef8a:	e01b      	b.n	800efc4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d103      	bne.n	800ef9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 fd84 	bl	800faa4 <vPortFree>
	}
 800ef9c:	e012      	b.n	800efc4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800efa4:	2b02      	cmp	r3, #2
 800efa6:	d00d      	beq.n	800efc4 <prvDeleteTCB+0x5c>
	__asm volatile
 800efa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efac:	b672      	cpsid	i
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	b662      	cpsie	i
 800efbc:	60fb      	str	r3, [r7, #12]
}
 800efbe:	bf00      	nop
 800efc0:	bf00      	nop
 800efc2:	e7fd      	b.n	800efc0 <prvDeleteTCB+0x58>
	}
 800efc4:	bf00      	nop
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efd2:	4b0c      	ldr	r3, [pc, #48]	@ (800f004 <prvResetNextTaskUnblockTime+0x38>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d104      	bne.n	800efe6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800efdc:	4b0a      	ldr	r3, [pc, #40]	@ (800f008 <prvResetNextTaskUnblockTime+0x3c>)
 800efde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800efe2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800efe4:	e008      	b.n	800eff8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efe6:	4b07      	ldr	r3, [pc, #28]	@ (800f004 <prvResetNextTaskUnblockTime+0x38>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	4a04      	ldr	r2, [pc, #16]	@ (800f008 <prvResetNextTaskUnblockTime+0x3c>)
 800eff6:	6013      	str	r3, [r2, #0]
}
 800eff8:	bf00      	nop
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr
 800f004:	20001a50 	.word	0x20001a50
 800f008:	20001ab8 	.word	0x20001ab8

0800f00c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f012:	4b0b      	ldr	r3, [pc, #44]	@ (800f040 <xTaskGetSchedulerState+0x34>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d102      	bne.n	800f020 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f01a:	2301      	movs	r3, #1
 800f01c:	607b      	str	r3, [r7, #4]
 800f01e:	e008      	b.n	800f032 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f020:	4b08      	ldr	r3, [pc, #32]	@ (800f044 <xTaskGetSchedulerState+0x38>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d102      	bne.n	800f02e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f028:	2302      	movs	r3, #2
 800f02a:	607b      	str	r3, [r7, #4]
 800f02c:	e001      	b.n	800f032 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f02e:	2300      	movs	r3, #0
 800f030:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f032:	687b      	ldr	r3, [r7, #4]
	}
 800f034:	4618      	mov	r0, r3
 800f036:	370c      	adds	r7, #12
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr
 800f040:	20001aa4 	.word	0x20001aa4
 800f044:	20001ac0 	.word	0x20001ac0

0800f048 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f054:	2300      	movs	r3, #0
 800f056:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d069      	beq.n	800f132 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f062:	4b36      	ldr	r3, [pc, #216]	@ (800f13c <xTaskPriorityInherit+0xf4>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f068:	429a      	cmp	r2, r3
 800f06a:	d259      	bcs.n	800f120 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	699b      	ldr	r3, [r3, #24]
 800f070:	2b00      	cmp	r3, #0
 800f072:	db06      	blt.n	800f082 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f074:	4b31      	ldr	r3, [pc, #196]	@ (800f13c <xTaskPriorityInherit+0xf4>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f07a:	f1c3 0207 	rsb	r2, r3, #7
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	6959      	ldr	r1, [r3, #20]
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f08a:	4613      	mov	r3, r2
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4413      	add	r3, r2
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	4a2b      	ldr	r2, [pc, #172]	@ (800f140 <xTaskPriorityInherit+0xf8>)
 800f094:	4413      	add	r3, r2
 800f096:	4299      	cmp	r1, r3
 800f098:	d13a      	bne.n	800f110 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	3304      	adds	r3, #4
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe fb88 	bl	800d7b4 <uxListRemove>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d115      	bne.n	800f0d6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0ae:	4924      	ldr	r1, [pc, #144]	@ (800f140 <xTaskPriorityInherit+0xf8>)
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	009b      	lsls	r3, r3, #2
 800f0b8:	440b      	add	r3, r1
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d10a      	bne.n	800f0d6 <xTaskPriorityInherit+0x8e>
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ca:	43da      	mvns	r2, r3
 800f0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800f144 <xTaskPriorityInherit+0xfc>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	4a1c      	ldr	r2, [pc, #112]	@ (800f144 <xTaskPriorityInherit+0xfc>)
 800f0d4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0d6:	4b19      	ldr	r3, [pc, #100]	@ (800f13c <xTaskPriorityInherit+0xf4>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	409a      	lsls	r2, r3
 800f0e8:	4b16      	ldr	r3, [pc, #88]	@ (800f144 <xTaskPriorityInherit+0xfc>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	4a15      	ldr	r2, [pc, #84]	@ (800f144 <xTaskPriorityInherit+0xfc>)
 800f0f0:	6013      	str	r3, [r2, #0]
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	009b      	lsls	r3, r3, #2
 800f0fa:	4413      	add	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	4a10      	ldr	r2, [pc, #64]	@ (800f140 <xTaskPriorityInherit+0xf8>)
 800f100:	441a      	add	r2, r3
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	3304      	adds	r3, #4
 800f106:	4619      	mov	r1, r3
 800f108:	4610      	mov	r0, r2
 800f10a:	f7fe faf6 	bl	800d6fa <vListInsertEnd>
 800f10e:	e004      	b.n	800f11a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f110:	4b0a      	ldr	r3, [pc, #40]	@ (800f13c <xTaskPriorityInherit+0xf4>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f11a:	2301      	movs	r3, #1
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	e008      	b.n	800f132 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f124:	4b05      	ldr	r3, [pc, #20]	@ (800f13c <xTaskPriorityInherit+0xf4>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d201      	bcs.n	800f132 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f12e:	2301      	movs	r3, #1
 800f130:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f132:	68fb      	ldr	r3, [r7, #12]
	}
 800f134:	4618      	mov	r0, r3
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	20001998 	.word	0x20001998
 800f140:	2000199c 	.word	0x2000199c
 800f144:	20001aa0 	.word	0x20001aa0

0800f148 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f154:	2300      	movs	r3, #0
 800f156:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d074      	beq.n	800f248 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f15e:	4b3d      	ldr	r3, [pc, #244]	@ (800f254 <xTaskPriorityDisinherit+0x10c>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	693a      	ldr	r2, [r7, #16]
 800f164:	429a      	cmp	r2, r3
 800f166:	d00d      	beq.n	800f184 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800f168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f16c:	b672      	cpsid	i
 800f16e:	f383 8811 	msr	BASEPRI, r3
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	f3bf 8f4f 	dsb	sy
 800f17a:	b662      	cpsie	i
 800f17c:	60fb      	str	r3, [r7, #12]
}
 800f17e:	bf00      	nop
 800f180:	bf00      	nop
 800f182:	e7fd      	b.n	800f180 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10d      	bne.n	800f1a8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800f18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f190:	b672      	cpsid	i
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	b662      	cpsie	i
 800f1a0:	60bb      	str	r3, [r7, #8]
}
 800f1a2:	bf00      	nop
 800f1a4:	bf00      	nop
 800f1a6:	e7fd      	b.n	800f1a4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1ac:	1e5a      	subs	r2, r3, #1
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d044      	beq.n	800f248 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d140      	bne.n	800f248 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fe faf2 	bl	800d7b4 <uxListRemove>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d115      	bne.n	800f202 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1da:	491f      	ldr	r1, [pc, #124]	@ (800f258 <xTaskPriorityDisinherit+0x110>)
 800f1dc:	4613      	mov	r3, r2
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	4413      	add	r3, r2
 800f1e2:	009b      	lsls	r3, r3, #2
 800f1e4:	440b      	add	r3, r1
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d10a      	bne.n	800f202 <xTaskPriorityDisinherit+0xba>
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f1f6:	43da      	mvns	r2, r3
 800f1f8:	4b18      	ldr	r3, [pc, #96]	@ (800f25c <xTaskPriorityDisinherit+0x114>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4013      	ands	r3, r2
 800f1fe:	4a17      	ldr	r2, [pc, #92]	@ (800f25c <xTaskPriorityDisinherit+0x114>)
 800f200:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f20e:	f1c3 0207 	rsb	r2, r3, #7
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f21a:	2201      	movs	r2, #1
 800f21c:	409a      	lsls	r2, r3
 800f21e:	4b0f      	ldr	r3, [pc, #60]	@ (800f25c <xTaskPriorityDisinherit+0x114>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4313      	orrs	r3, r2
 800f224:	4a0d      	ldr	r2, [pc, #52]	@ (800f25c <xTaskPriorityDisinherit+0x114>)
 800f226:	6013      	str	r3, [r2, #0]
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f22c:	4613      	mov	r3, r2
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	4413      	add	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	4a08      	ldr	r2, [pc, #32]	@ (800f258 <xTaskPriorityDisinherit+0x110>)
 800f236:	441a      	add	r2, r3
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	3304      	adds	r3, #4
 800f23c:	4619      	mov	r1, r3
 800f23e:	4610      	mov	r0, r2
 800f240:	f7fe fa5b 	bl	800d6fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f244:	2301      	movs	r3, #1
 800f246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f248:	697b      	ldr	r3, [r7, #20]
	}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	20001998 	.word	0x20001998
 800f258:	2000199c 	.word	0x2000199c
 800f25c:	20001aa0 	.word	0x20001aa0

0800f260 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f260:	b580      	push	{r7, lr}
 800f262:	b088      	sub	sp, #32
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f26e:	2301      	movs	r3, #1
 800f270:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	f000 8089 	beq.w	800f38c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d10d      	bne.n	800f29e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800f282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f286:	b672      	cpsid	i
 800f288:	f383 8811 	msr	BASEPRI, r3
 800f28c:	f3bf 8f6f 	isb	sy
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	b662      	cpsie	i
 800f296:	60fb      	str	r3, [r7, #12]
}
 800f298:	bf00      	nop
 800f29a:	bf00      	nop
 800f29c:	e7fd      	b.n	800f29a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d902      	bls.n	800f2ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	61fb      	str	r3, [r7, #28]
 800f2ac:	e002      	b.n	800f2b4 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b8:	69fa      	ldr	r2, [r7, #28]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d066      	beq.n	800f38c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d161      	bne.n	800f38c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f2c8:	4b32      	ldr	r3, [pc, #200]	@ (800f394 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	69ba      	ldr	r2, [r7, #24]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d10d      	bne.n	800f2ee <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800f2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2d6:	b672      	cpsid	i
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	b662      	cpsie	i
 800f2e6:	60bb      	str	r3, [r7, #8]
}
 800f2e8:	bf00      	nop
 800f2ea:	bf00      	nop
 800f2ec:	e7fd      	b.n	800f2ea <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2f2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	69fa      	ldr	r2, [r7, #28]
 800f2f8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	699b      	ldr	r3, [r3, #24]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	db04      	blt.n	800f30c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	f1c3 0207 	rsb	r2, r3, #7
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	6959      	ldr	r1, [r3, #20]
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	4613      	mov	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	4a1f      	ldr	r2, [pc, #124]	@ (800f398 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f31c:	4413      	add	r3, r2
 800f31e:	4299      	cmp	r1, r3
 800f320:	d134      	bne.n	800f38c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	3304      	adds	r3, #4
 800f326:	4618      	mov	r0, r3
 800f328:	f7fe fa44 	bl	800d7b4 <uxListRemove>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d115      	bne.n	800f35e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f336:	4918      	ldr	r1, [pc, #96]	@ (800f398 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f338:	4613      	mov	r3, r2
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	4413      	add	r3, r2
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	440b      	add	r3, r1
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d10a      	bne.n	800f35e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f34c:	2201      	movs	r2, #1
 800f34e:	fa02 f303 	lsl.w	r3, r2, r3
 800f352:	43da      	mvns	r2, r3
 800f354:	4b11      	ldr	r3, [pc, #68]	@ (800f39c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4013      	ands	r3, r2
 800f35a:	4a10      	ldr	r2, [pc, #64]	@ (800f39c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f35c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f362:	2201      	movs	r2, #1
 800f364:	409a      	lsls	r2, r3
 800f366:	4b0d      	ldr	r3, [pc, #52]	@ (800f39c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4313      	orrs	r3, r2
 800f36c:	4a0b      	ldr	r2, [pc, #44]	@ (800f39c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f36e:	6013      	str	r3, [r2, #0]
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f374:	4613      	mov	r3, r2
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	4413      	add	r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4a06      	ldr	r2, [pc, #24]	@ (800f398 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f37e:	441a      	add	r2, r3
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	3304      	adds	r3, #4
 800f384:	4619      	mov	r1, r3
 800f386:	4610      	mov	r0, r2
 800f388:	f7fe f9b7 	bl	800d6fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f38c:	bf00      	nop
 800f38e:	3720      	adds	r7, #32
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	20001998 	.word	0x20001998
 800f398:	2000199c 	.word	0x2000199c
 800f39c:	20001aa0 	.word	0x20001aa0

0800f3a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f3a0:	b480      	push	{r7}
 800f3a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f3a4:	4b07      	ldr	r3, [pc, #28]	@ (800f3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d004      	beq.n	800f3b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f3ac:	4b05      	ldr	r3, [pc, #20]	@ (800f3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f3b2:	3201      	adds	r2, #1
 800f3b4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f3b6:	4b03      	ldr	r3, [pc, #12]	@ (800f3c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
	}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr
 800f3c4:	20001998 	.word	0x20001998

0800f3c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f3d2:	4b29      	ldr	r3, [pc, #164]	@ (800f478 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3d8:	4b28      	ldr	r3, [pc, #160]	@ (800f47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	3304      	adds	r3, #4
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fe f9e8 	bl	800d7b4 <uxListRemove>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d10b      	bne.n	800f402 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f3ea:	4b24      	ldr	r3, [pc, #144]	@ (800f47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f3f6:	43da      	mvns	r2, r3
 800f3f8:	4b21      	ldr	r3, [pc, #132]	@ (800f480 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	4a20      	ldr	r2, [pc, #128]	@ (800f480 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f400:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f408:	d10a      	bne.n	800f420 <prvAddCurrentTaskToDelayedList+0x58>
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d007      	beq.n	800f420 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f410:	4b1a      	ldr	r3, [pc, #104]	@ (800f47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3304      	adds	r3, #4
 800f416:	4619      	mov	r1, r3
 800f418:	481a      	ldr	r0, [pc, #104]	@ (800f484 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f41a:	f7fe f96e 	bl	800d6fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f41e:	e026      	b.n	800f46e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4413      	add	r3, r2
 800f426:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f428:	4b14      	ldr	r3, [pc, #80]	@ (800f47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	68ba      	ldr	r2, [r7, #8]
 800f42e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	429a      	cmp	r2, r3
 800f436:	d209      	bcs.n	800f44c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f438:	4b13      	ldr	r3, [pc, #76]	@ (800f488 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	4b0f      	ldr	r3, [pc, #60]	@ (800f47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	3304      	adds	r3, #4
 800f442:	4619      	mov	r1, r3
 800f444:	4610      	mov	r0, r2
 800f446:	f7fe f97c 	bl	800d742 <vListInsert>
}
 800f44a:	e010      	b.n	800f46e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f44c:	4b0f      	ldr	r3, [pc, #60]	@ (800f48c <prvAddCurrentTaskToDelayedList+0xc4>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	4b0a      	ldr	r3, [pc, #40]	@ (800f47c <prvAddCurrentTaskToDelayedList+0xb4>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	3304      	adds	r3, #4
 800f456:	4619      	mov	r1, r3
 800f458:	4610      	mov	r0, r2
 800f45a:	f7fe f972 	bl	800d742 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f45e:	4b0c      	ldr	r3, [pc, #48]	@ (800f490 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	68ba      	ldr	r2, [r7, #8]
 800f464:	429a      	cmp	r2, r3
 800f466:	d202      	bcs.n	800f46e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f468:	4a09      	ldr	r2, [pc, #36]	@ (800f490 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	6013      	str	r3, [r2, #0]
}
 800f46e:	bf00      	nop
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	20001a9c 	.word	0x20001a9c
 800f47c:	20001998 	.word	0x20001998
 800f480:	20001aa0 	.word	0x20001aa0
 800f484:	20001a84 	.word	0x20001a84
 800f488:	20001a54 	.word	0x20001a54
 800f48c:	20001a50 	.word	0x20001a50
 800f490:	20001ab8 	.word	0x20001ab8

0800f494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f494:	b480      	push	{r7}
 800f496:	b085      	sub	sp, #20
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	3b04      	subs	r3, #4
 800f4a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	3b04      	subs	r3, #4
 800f4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	f023 0201 	bic.w	r2, r3, #1
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3b04      	subs	r3, #4
 800f4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4c4:	4a0c      	ldr	r2, [pc, #48]	@ (800f4f8 <pxPortInitialiseStack+0x64>)
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	3b14      	subs	r3, #20
 800f4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	3b04      	subs	r3, #4
 800f4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f06f 0202 	mvn.w	r2, #2
 800f4e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	3b20      	subs	r3, #32
 800f4e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3714      	adds	r7, #20
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr
 800f4f8:	0800f4fd 	.word	0x0800f4fd

0800f4fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f506:	4b15      	ldr	r3, [pc, #84]	@ (800f55c <prvTaskExitError+0x60>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f50e:	d00d      	beq.n	800f52c <prvTaskExitError+0x30>
	__asm volatile
 800f510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f514:	b672      	cpsid	i
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	b662      	cpsie	i
 800f524:	60fb      	str	r3, [r7, #12]
}
 800f526:	bf00      	nop
 800f528:	bf00      	nop
 800f52a:	e7fd      	b.n	800f528 <prvTaskExitError+0x2c>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f530:	b672      	cpsid	i
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	b662      	cpsie	i
 800f540:	60bb      	str	r3, [r7, #8]
}
 800f542:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f544:	bf00      	nop
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d0fc      	beq.n	800f546 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f54c:	bf00      	nop
 800f54e:	bf00      	nop
 800f550:	3714      	adds	r7, #20
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	20000084 	.word	0x20000084

0800f560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f560:	4b07      	ldr	r3, [pc, #28]	@ (800f580 <pxCurrentTCBConst2>)
 800f562:	6819      	ldr	r1, [r3, #0]
 800f564:	6808      	ldr	r0, [r1, #0]
 800f566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56a:	f380 8809 	msr	PSP, r0
 800f56e:	f3bf 8f6f 	isb	sy
 800f572:	f04f 0000 	mov.w	r0, #0
 800f576:	f380 8811 	msr	BASEPRI, r0
 800f57a:	4770      	bx	lr
 800f57c:	f3af 8000 	nop.w

0800f580 <pxCurrentTCBConst2>:
 800f580:	20001998 	.word	0x20001998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f584:	bf00      	nop
 800f586:	bf00      	nop

0800f588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f588:	4808      	ldr	r0, [pc, #32]	@ (800f5ac <prvPortStartFirstTask+0x24>)
 800f58a:	6800      	ldr	r0, [r0, #0]
 800f58c:	6800      	ldr	r0, [r0, #0]
 800f58e:	f380 8808 	msr	MSP, r0
 800f592:	f04f 0000 	mov.w	r0, #0
 800f596:	f380 8814 	msr	CONTROL, r0
 800f59a:	b662      	cpsie	i
 800f59c:	b661      	cpsie	f
 800f59e:	f3bf 8f4f 	dsb	sy
 800f5a2:	f3bf 8f6f 	isb	sy
 800f5a6:	df00      	svc	0
 800f5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5aa:	bf00      	nop
 800f5ac:	e000ed08 	.word	0xe000ed08

0800f5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f5b6:	4b37      	ldr	r3, [pc, #220]	@ (800f694 <xPortStartScheduler+0xe4>)
 800f5b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	22ff      	movs	r2, #255	@ 0xff
 800f5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f5d0:	78fb      	ldrb	r3, [r7, #3]
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	4b2f      	ldr	r3, [pc, #188]	@ (800f698 <xPortStartScheduler+0xe8>)
 800f5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f5de:	4b2f      	ldr	r3, [pc, #188]	@ (800f69c <xPortStartScheduler+0xec>)
 800f5e0:	2207      	movs	r2, #7
 800f5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5e4:	e009      	b.n	800f5fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f5e6:	4b2d      	ldr	r3, [pc, #180]	@ (800f69c <xPortStartScheduler+0xec>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	3b01      	subs	r3, #1
 800f5ec:	4a2b      	ldr	r2, [pc, #172]	@ (800f69c <xPortStartScheduler+0xec>)
 800f5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f5f0:	78fb      	ldrb	r3, [r7, #3]
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	b2db      	uxtb	r3, r3
 800f5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5fa:	78fb      	ldrb	r3, [r7, #3]
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f602:	2b80      	cmp	r3, #128	@ 0x80
 800f604:	d0ef      	beq.n	800f5e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f606:	4b25      	ldr	r3, [pc, #148]	@ (800f69c <xPortStartScheduler+0xec>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f1c3 0307 	rsb	r3, r3, #7
 800f60e:	2b04      	cmp	r3, #4
 800f610:	d00d      	beq.n	800f62e <xPortStartScheduler+0x7e>
	__asm volatile
 800f612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f616:	b672      	cpsid	i
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	b662      	cpsie	i
 800f626:	60bb      	str	r3, [r7, #8]
}
 800f628:	bf00      	nop
 800f62a:	bf00      	nop
 800f62c:	e7fd      	b.n	800f62a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f62e:	4b1b      	ldr	r3, [pc, #108]	@ (800f69c <xPortStartScheduler+0xec>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	021b      	lsls	r3, r3, #8
 800f634:	4a19      	ldr	r2, [pc, #100]	@ (800f69c <xPortStartScheduler+0xec>)
 800f636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f638:	4b18      	ldr	r3, [pc, #96]	@ (800f69c <xPortStartScheduler+0xec>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f640:	4a16      	ldr	r2, [pc, #88]	@ (800f69c <xPortStartScheduler+0xec>)
 800f642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	b2da      	uxtb	r2, r3
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f64c:	4b14      	ldr	r3, [pc, #80]	@ (800f6a0 <xPortStartScheduler+0xf0>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4a13      	ldr	r2, [pc, #76]	@ (800f6a0 <xPortStartScheduler+0xf0>)
 800f652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f658:	4b11      	ldr	r3, [pc, #68]	@ (800f6a0 <xPortStartScheduler+0xf0>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a10      	ldr	r2, [pc, #64]	@ (800f6a0 <xPortStartScheduler+0xf0>)
 800f65e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f664:	f000 f8dc 	bl	800f820 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f668:	4b0e      	ldr	r3, [pc, #56]	@ (800f6a4 <xPortStartScheduler+0xf4>)
 800f66a:	2200      	movs	r2, #0
 800f66c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f66e:	f000 f8fb 	bl	800f868 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f672:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a8 <xPortStartScheduler+0xf8>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a0c      	ldr	r2, [pc, #48]	@ (800f6a8 <xPortStartScheduler+0xf8>)
 800f678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f67c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f67e:	f7ff ff83 	bl	800f588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f682:	f7ff fa75 	bl	800eb70 <vTaskSwitchContext>
	prvTaskExitError();
 800f686:	f7ff ff39 	bl	800f4fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3710      	adds	r7, #16
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	e000e400 	.word	0xe000e400
 800f698:	20001ac4 	.word	0x20001ac4
 800f69c:	20001ac8 	.word	0x20001ac8
 800f6a0:	e000ed20 	.word	0xe000ed20
 800f6a4:	20000084 	.word	0x20000084
 800f6a8:	e000ef34 	.word	0xe000ef34

0800f6ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
	__asm volatile
 800f6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b6:	b672      	cpsid	i
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	b662      	cpsie	i
 800f6c6:	607b      	str	r3, [r7, #4]
}
 800f6c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f6ca:	4b11      	ldr	r3, [pc, #68]	@ (800f710 <vPortEnterCritical+0x64>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	4a0f      	ldr	r2, [pc, #60]	@ (800f710 <vPortEnterCritical+0x64>)
 800f6d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f6d4:	4b0e      	ldr	r3, [pc, #56]	@ (800f710 <vPortEnterCritical+0x64>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d112      	bne.n	800f702 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800f714 <vPortEnterCritical+0x68>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00d      	beq.n	800f702 <vPortEnterCritical+0x56>
	__asm volatile
 800f6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ea:	b672      	cpsid	i
 800f6ec:	f383 8811 	msr	BASEPRI, r3
 800f6f0:	f3bf 8f6f 	isb	sy
 800f6f4:	f3bf 8f4f 	dsb	sy
 800f6f8:	b662      	cpsie	i
 800f6fa:	603b      	str	r3, [r7, #0]
}
 800f6fc:	bf00      	nop
 800f6fe:	bf00      	nop
 800f700:	e7fd      	b.n	800f6fe <vPortEnterCritical+0x52>
	}
}
 800f702:	bf00      	nop
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	20000084 	.word	0x20000084
 800f714:	e000ed04 	.word	0xe000ed04

0800f718 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f718:	b480      	push	{r7}
 800f71a:	b083      	sub	sp, #12
 800f71c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f71e:	4b13      	ldr	r3, [pc, #76]	@ (800f76c <vPortExitCritical+0x54>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10d      	bne.n	800f742 <vPortExitCritical+0x2a>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f72a:	b672      	cpsid	i
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	b662      	cpsie	i
 800f73a:	607b      	str	r3, [r7, #4]
}
 800f73c:	bf00      	nop
 800f73e:	bf00      	nop
 800f740:	e7fd      	b.n	800f73e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f742:	4b0a      	ldr	r3, [pc, #40]	@ (800f76c <vPortExitCritical+0x54>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	3b01      	subs	r3, #1
 800f748:	4a08      	ldr	r2, [pc, #32]	@ (800f76c <vPortExitCritical+0x54>)
 800f74a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f74c:	4b07      	ldr	r3, [pc, #28]	@ (800f76c <vPortExitCritical+0x54>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d105      	bne.n	800f760 <vPortExitCritical+0x48>
 800f754:	2300      	movs	r3, #0
 800f756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	f383 8811 	msr	BASEPRI, r3
}
 800f75e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr
 800f76c:	20000084 	.word	0x20000084

0800f770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f770:	f3ef 8009 	mrs	r0, PSP
 800f774:	f3bf 8f6f 	isb	sy
 800f778:	4b15      	ldr	r3, [pc, #84]	@ (800f7d0 <pxCurrentTCBConst>)
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	f01e 0f10 	tst.w	lr, #16
 800f780:	bf08      	it	eq
 800f782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78a:	6010      	str	r0, [r2, #0]
 800f78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f794:	b672      	cpsid	i
 800f796:	f380 8811 	msr	BASEPRI, r0
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	f3bf 8f6f 	isb	sy
 800f7a2:	b662      	cpsie	i
 800f7a4:	f7ff f9e4 	bl	800eb70 <vTaskSwitchContext>
 800f7a8:	f04f 0000 	mov.w	r0, #0
 800f7ac:	f380 8811 	msr	BASEPRI, r0
 800f7b0:	bc09      	pop	{r0, r3}
 800f7b2:	6819      	ldr	r1, [r3, #0]
 800f7b4:	6808      	ldr	r0, [r1, #0]
 800f7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ba:	f01e 0f10 	tst.w	lr, #16
 800f7be:	bf08      	it	eq
 800f7c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7c4:	f380 8809 	msr	PSP, r0
 800f7c8:	f3bf 8f6f 	isb	sy
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop

0800f7d0 <pxCurrentTCBConst>:
 800f7d0:	20001998 	.word	0x20001998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f7d4:	bf00      	nop
 800f7d6:	bf00      	nop

0800f7d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7e2:	b672      	cpsid	i
 800f7e4:	f383 8811 	msr	BASEPRI, r3
 800f7e8:	f3bf 8f6f 	isb	sy
 800f7ec:	f3bf 8f4f 	dsb	sy
 800f7f0:	b662      	cpsie	i
 800f7f2:	607b      	str	r3, [r7, #4]
}
 800f7f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f7f6:	f7ff f8ff 	bl	800e9f8 <xTaskIncrementTick>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d003      	beq.n	800f808 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f800:	4b06      	ldr	r3, [pc, #24]	@ (800f81c <SysTick_Handler+0x44>)
 800f802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f806:	601a      	str	r2, [r3, #0]
 800f808:	2300      	movs	r3, #0
 800f80a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	f383 8811 	msr	BASEPRI, r3
}
 800f812:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f814:	bf00      	nop
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	e000ed04 	.word	0xe000ed04

0800f820 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f820:	b480      	push	{r7}
 800f822:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f824:	4b0b      	ldr	r3, [pc, #44]	@ (800f854 <vPortSetupTimerInterrupt+0x34>)
 800f826:	2200      	movs	r2, #0
 800f828:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f82a:	4b0b      	ldr	r3, [pc, #44]	@ (800f858 <vPortSetupTimerInterrupt+0x38>)
 800f82c:	2200      	movs	r2, #0
 800f82e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f830:	4b0a      	ldr	r3, [pc, #40]	@ (800f85c <vPortSetupTimerInterrupt+0x3c>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4a0a      	ldr	r2, [pc, #40]	@ (800f860 <vPortSetupTimerInterrupt+0x40>)
 800f836:	fba2 2303 	umull	r2, r3, r2, r3
 800f83a:	099b      	lsrs	r3, r3, #6
 800f83c:	4a09      	ldr	r2, [pc, #36]	@ (800f864 <vPortSetupTimerInterrupt+0x44>)
 800f83e:	3b01      	subs	r3, #1
 800f840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f842:	4b04      	ldr	r3, [pc, #16]	@ (800f854 <vPortSetupTimerInterrupt+0x34>)
 800f844:	2207      	movs	r2, #7
 800f846:	601a      	str	r2, [r3, #0]
}
 800f848:	bf00      	nop
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	e000e010 	.word	0xe000e010
 800f858:	e000e018 	.word	0xe000e018
 800f85c:	20000078 	.word	0x20000078
 800f860:	10624dd3 	.word	0x10624dd3
 800f864:	e000e014 	.word	0xe000e014

0800f868 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f868:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f878 <vPortEnableVFP+0x10>
 800f86c:	6801      	ldr	r1, [r0, #0]
 800f86e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f872:	6001      	str	r1, [r0, #0]
 800f874:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f876:	bf00      	nop
 800f878:	e000ed88 	.word	0xe000ed88

0800f87c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f882:	f3ef 8305 	mrs	r3, IPSR
 800f886:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b0f      	cmp	r3, #15
 800f88c:	d917      	bls.n	800f8be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f88e:	4a1a      	ldr	r2, [pc, #104]	@ (800f8f8 <vPortValidateInterruptPriority+0x7c>)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	4413      	add	r3, r2
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f898:	4b18      	ldr	r3, [pc, #96]	@ (800f8fc <vPortValidateInterruptPriority+0x80>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	7afa      	ldrb	r2, [r7, #11]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d20d      	bcs.n	800f8be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a6:	b672      	cpsid	i
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	b662      	cpsie	i
 800f8b6:	607b      	str	r3, [r7, #4]
}
 800f8b8:	bf00      	nop
 800f8ba:	bf00      	nop
 800f8bc:	e7fd      	b.n	800f8ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8be:	4b10      	ldr	r3, [pc, #64]	@ (800f900 <vPortValidateInterruptPriority+0x84>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f904 <vPortValidateInterruptPriority+0x88>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d90d      	bls.n	800f8ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d2:	b672      	cpsid	i
 800f8d4:	f383 8811 	msr	BASEPRI, r3
 800f8d8:	f3bf 8f6f 	isb	sy
 800f8dc:	f3bf 8f4f 	dsb	sy
 800f8e0:	b662      	cpsie	i
 800f8e2:	603b      	str	r3, [r7, #0]
}
 800f8e4:	bf00      	nop
 800f8e6:	bf00      	nop
 800f8e8:	e7fd      	b.n	800f8e6 <vPortValidateInterruptPriority+0x6a>
	}
 800f8ea:	bf00      	nop
 800f8ec:	3714      	adds	r7, #20
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	e000e3f0 	.word	0xe000e3f0
 800f8fc:	20001ac4 	.word	0x20001ac4
 800f900:	e000ed0c 	.word	0xe000ed0c
 800f904:	20001ac8 	.word	0x20001ac8

0800f908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b08a      	sub	sp, #40	@ 0x28
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f910:	2300      	movs	r3, #0
 800f912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f914:	f7fe ffc2 	bl	800e89c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f918:	4b5d      	ldr	r3, [pc, #372]	@ (800fa90 <pvPortMalloc+0x188>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d101      	bne.n	800f924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f920:	f000 f920 	bl	800fb64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f924:	4b5b      	ldr	r3, [pc, #364]	@ (800fa94 <pvPortMalloc+0x18c>)
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4013      	ands	r3, r2
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f040 8094 	bne.w	800fa5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d020      	beq.n	800f97a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800f938:	2208      	movs	r2, #8
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4413      	add	r3, r2
 800f93e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f003 0307 	and.w	r3, r3, #7
 800f946:	2b00      	cmp	r3, #0
 800f948:	d017      	beq.n	800f97a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f023 0307 	bic.w	r3, r3, #7
 800f950:	3308      	adds	r3, #8
 800f952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f003 0307 	and.w	r3, r3, #7
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00d      	beq.n	800f97a <pvPortMalloc+0x72>
	__asm volatile
 800f95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f962:	b672      	cpsid	i
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	b662      	cpsie	i
 800f972:	617b      	str	r3, [r7, #20]
}
 800f974:	bf00      	nop
 800f976:	bf00      	nop
 800f978:	e7fd      	b.n	800f976 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d06c      	beq.n	800fa5a <pvPortMalloc+0x152>
 800f980:	4b45      	ldr	r3, [pc, #276]	@ (800fa98 <pvPortMalloc+0x190>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	429a      	cmp	r2, r3
 800f988:	d867      	bhi.n	800fa5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f98a:	4b44      	ldr	r3, [pc, #272]	@ (800fa9c <pvPortMalloc+0x194>)
 800f98c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f98e:	4b43      	ldr	r3, [pc, #268]	@ (800fa9c <pvPortMalloc+0x194>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f994:	e004      	b.n	800f9a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800f996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d903      	bls.n	800f9b2 <pvPortMalloc+0xaa>
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d1f1      	bne.n	800f996 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f9b2:	4b37      	ldr	r3, [pc, #220]	@ (800fa90 <pvPortMalloc+0x188>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d04e      	beq.n	800fa5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9bc:	6a3b      	ldr	r3, [r7, #32]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2208      	movs	r2, #8
 800f9c2:	4413      	add	r3, r2
 800f9c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	6a3b      	ldr	r3, [r7, #32]
 800f9cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	1ad2      	subs	r2, r2, r3
 800f9d6:	2308      	movs	r3, #8
 800f9d8:	005b      	lsls	r3, r3, #1
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d922      	bls.n	800fa24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4413      	add	r3, r2
 800f9e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	f003 0307 	and.w	r3, r3, #7
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00d      	beq.n	800fa0c <pvPortMalloc+0x104>
	__asm volatile
 800f9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f4:	b672      	cpsid	i
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	b662      	cpsie	i
 800fa04:	613b      	str	r3, [r7, #16]
}
 800fa06:	bf00      	nop
 800fa08:	bf00      	nop
 800fa0a:	e7fd      	b.n	800fa08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa0e:	685a      	ldr	r2, [r3, #4]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	1ad2      	subs	r2, r2, r3
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa1e:	69b8      	ldr	r0, [r7, #24]
 800fa20:	f000 f902 	bl	800fc28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa24:	4b1c      	ldr	r3, [pc, #112]	@ (800fa98 <pvPortMalloc+0x190>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	4a1a      	ldr	r2, [pc, #104]	@ (800fa98 <pvPortMalloc+0x190>)
 800fa30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa32:	4b19      	ldr	r3, [pc, #100]	@ (800fa98 <pvPortMalloc+0x190>)
 800fa34:	681a      	ldr	r2, [r3, #0]
 800fa36:	4b1a      	ldr	r3, [pc, #104]	@ (800faa0 <pvPortMalloc+0x198>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d203      	bcs.n	800fa46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa3e:	4b16      	ldr	r3, [pc, #88]	@ (800fa98 <pvPortMalloc+0x190>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a17      	ldr	r2, [pc, #92]	@ (800faa0 <pvPortMalloc+0x198>)
 800fa44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	4b12      	ldr	r3, [pc, #72]	@ (800fa94 <pvPortMalloc+0x18c>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	431a      	orrs	r2, r3
 800fa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa56:	2200      	movs	r2, #0
 800fa58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa5a:	f7fe ff2d 	bl	800e8b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	f003 0307 	and.w	r3, r3, #7
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d00d      	beq.n	800fa84 <pvPortMalloc+0x17c>
	__asm volatile
 800fa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa6c:	b672      	cpsid	i
 800fa6e:	f383 8811 	msr	BASEPRI, r3
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	b662      	cpsie	i
 800fa7c:	60fb      	str	r3, [r7, #12]
}
 800fa7e:	bf00      	nop
 800fa80:	bf00      	nop
 800fa82:	e7fd      	b.n	800fa80 <pvPortMalloc+0x178>
	return pvReturn;
 800fa84:	69fb      	ldr	r3, [r7, #28]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3728      	adds	r7, #40	@ 0x28
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	200056d4 	.word	0x200056d4
 800fa94:	200056e0 	.word	0x200056e0
 800fa98:	200056d8 	.word	0x200056d8
 800fa9c:	200056cc 	.word	0x200056cc
 800faa0:	200056dc 	.word	0x200056dc

0800faa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b086      	sub	sp, #24
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d04e      	beq.n	800fb54 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fab6:	2308      	movs	r3, #8
 800fab8:	425b      	negs	r3, r3
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	4413      	add	r3, r2
 800fabe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	685a      	ldr	r2, [r3, #4]
 800fac8:	4b24      	ldr	r3, [pc, #144]	@ (800fb5c <vPortFree+0xb8>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4013      	ands	r3, r2
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10d      	bne.n	800faee <vPortFree+0x4a>
	__asm volatile
 800fad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad6:	b672      	cpsid	i
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	b662      	cpsie	i
 800fae6:	60fb      	str	r3, [r7, #12]
}
 800fae8:	bf00      	nop
 800faea:	bf00      	nop
 800faec:	e7fd      	b.n	800faea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00d      	beq.n	800fb12 <vPortFree+0x6e>
	__asm volatile
 800faf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fafa:	b672      	cpsid	i
 800fafc:	f383 8811 	msr	BASEPRI, r3
 800fb00:	f3bf 8f6f 	isb	sy
 800fb04:	f3bf 8f4f 	dsb	sy
 800fb08:	b662      	cpsie	i
 800fb0a:	60bb      	str	r3, [r7, #8]
}
 800fb0c:	bf00      	nop
 800fb0e:	bf00      	nop
 800fb10:	e7fd      	b.n	800fb0e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	685a      	ldr	r2, [r3, #4]
 800fb16:	4b11      	ldr	r3, [pc, #68]	@ (800fb5c <vPortFree+0xb8>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4013      	ands	r3, r2
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d019      	beq.n	800fb54 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d115      	bne.n	800fb54 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	685a      	ldr	r2, [r3, #4]
 800fb2c:	4b0b      	ldr	r3, [pc, #44]	@ (800fb5c <vPortFree+0xb8>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	43db      	mvns	r3, r3
 800fb32:	401a      	ands	r2, r3
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb38:	f7fe feb0 	bl	800e89c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	685a      	ldr	r2, [r3, #4]
 800fb40:	4b07      	ldr	r3, [pc, #28]	@ (800fb60 <vPortFree+0xbc>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4413      	add	r3, r2
 800fb46:	4a06      	ldr	r2, [pc, #24]	@ (800fb60 <vPortFree+0xbc>)
 800fb48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb4a:	6938      	ldr	r0, [r7, #16]
 800fb4c:	f000 f86c 	bl	800fc28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fb50:	f7fe feb2 	bl	800e8b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb54:	bf00      	nop
 800fb56:	3718      	adds	r7, #24
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	200056e0 	.word	0x200056e0
 800fb60:	200056d8 	.word	0x200056d8

0800fb64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb64:	b480      	push	{r7}
 800fb66:	b085      	sub	sp, #20
 800fb68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fb6a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fb6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb70:	4b27      	ldr	r3, [pc, #156]	@ (800fc10 <prvHeapInit+0xac>)
 800fb72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f003 0307 	and.w	r3, r3, #7
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00c      	beq.n	800fb98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	3307      	adds	r3, #7
 800fb82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f023 0307 	bic.w	r3, r3, #7
 800fb8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	4a1f      	ldr	r2, [pc, #124]	@ (800fc10 <prvHeapInit+0xac>)
 800fb94:	4413      	add	r3, r2
 800fb96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb9c:	4a1d      	ldr	r2, [pc, #116]	@ (800fc14 <prvHeapInit+0xb0>)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fba2:	4b1c      	ldr	r3, [pc, #112]	@ (800fc14 <prvHeapInit+0xb0>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	68ba      	ldr	r2, [r7, #8]
 800fbac:	4413      	add	r3, r2
 800fbae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fbb0:	2208      	movs	r2, #8
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	1a9b      	subs	r3, r3, r2
 800fbb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f023 0307 	bic.w	r3, r3, #7
 800fbbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	4a15      	ldr	r2, [pc, #84]	@ (800fc18 <prvHeapInit+0xb4>)
 800fbc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fbc6:	4b14      	ldr	r3, [pc, #80]	@ (800fc18 <prvHeapInit+0xb4>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fbce:	4b12      	ldr	r3, [pc, #72]	@ (800fc18 <prvHeapInit+0xb4>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	1ad2      	subs	r2, r2, r3
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fbe4:	4b0c      	ldr	r3, [pc, #48]	@ (800fc18 <prvHeapInit+0xb4>)
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	4a0a      	ldr	r2, [pc, #40]	@ (800fc1c <prvHeapInit+0xb8>)
 800fbf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	4a09      	ldr	r2, [pc, #36]	@ (800fc20 <prvHeapInit+0xbc>)
 800fbfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fbfc:	4b09      	ldr	r3, [pc, #36]	@ (800fc24 <prvHeapInit+0xc0>)
 800fbfe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fc02:	601a      	str	r2, [r3, #0]
}
 800fc04:	bf00      	nop
 800fc06:	3714      	adds	r7, #20
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr
 800fc10:	20001acc 	.word	0x20001acc
 800fc14:	200056cc 	.word	0x200056cc
 800fc18:	200056d4 	.word	0x200056d4
 800fc1c:	200056dc 	.word	0x200056dc
 800fc20:	200056d8 	.word	0x200056d8
 800fc24:	200056e0 	.word	0x200056e0

0800fc28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc30:	4b28      	ldr	r3, [pc, #160]	@ (800fcd4 <prvInsertBlockIntoFreeList+0xac>)
 800fc32:	60fb      	str	r3, [r7, #12]
 800fc34:	e002      	b.n	800fc3c <prvInsertBlockIntoFreeList+0x14>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	60fb      	str	r3, [r7, #12]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d8f7      	bhi.n	800fc36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	68ba      	ldr	r2, [r7, #8]
 800fc50:	4413      	add	r3, r2
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d108      	bne.n	800fc6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	685a      	ldr	r2, [r3, #4]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	441a      	add	r2, r3
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	68ba      	ldr	r2, [r7, #8]
 800fc74:	441a      	add	r2, r3
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d118      	bne.n	800fcb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	4b15      	ldr	r3, [pc, #84]	@ (800fcd8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d00d      	beq.n	800fca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	685a      	ldr	r2, [r3, #4]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	441a      	add	r2, r3
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	e008      	b.n	800fcb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fca6:	4b0c      	ldr	r3, [pc, #48]	@ (800fcd8 <prvInsertBlockIntoFreeList+0xb0>)
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	601a      	str	r2, [r3, #0]
 800fcae:	e003      	b.n	800fcb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681a      	ldr	r2, [r3, #0]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d002      	beq.n	800fcc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcc6:	bf00      	nop
 800fcc8:	3714      	adds	r7, #20
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop
 800fcd4:	200056cc 	.word	0x200056cc
 800fcd8:	200056d4 	.word	0x200056d4

0800fcdc <siprintf>:
 800fcdc:	b40e      	push	{r1, r2, r3}
 800fcde:	b500      	push	{lr}
 800fce0:	b09c      	sub	sp, #112	@ 0x70
 800fce2:	ab1d      	add	r3, sp, #116	@ 0x74
 800fce4:	9002      	str	r0, [sp, #8]
 800fce6:	9006      	str	r0, [sp, #24]
 800fce8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fcec:	4809      	ldr	r0, [pc, #36]	@ (800fd14 <siprintf+0x38>)
 800fcee:	9107      	str	r1, [sp, #28]
 800fcf0:	9104      	str	r1, [sp, #16]
 800fcf2:	4909      	ldr	r1, [pc, #36]	@ (800fd18 <siprintf+0x3c>)
 800fcf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcf8:	9105      	str	r1, [sp, #20]
 800fcfa:	6800      	ldr	r0, [r0, #0]
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	a902      	add	r1, sp, #8
 800fd00:	f000 f8aa 	bl	800fe58 <_svfiprintf_r>
 800fd04:	9b02      	ldr	r3, [sp, #8]
 800fd06:	2200      	movs	r2, #0
 800fd08:	701a      	strb	r2, [r3, #0]
 800fd0a:	b01c      	add	sp, #112	@ 0x70
 800fd0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd10:	b003      	add	sp, #12
 800fd12:	4770      	bx	lr
 800fd14:	20000088 	.word	0x20000088
 800fd18:	ffff0208 	.word	0xffff0208

0800fd1c <memset>:
 800fd1c:	4402      	add	r2, r0
 800fd1e:	4603      	mov	r3, r0
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d100      	bne.n	800fd26 <memset+0xa>
 800fd24:	4770      	bx	lr
 800fd26:	f803 1b01 	strb.w	r1, [r3], #1
 800fd2a:	e7f9      	b.n	800fd20 <memset+0x4>

0800fd2c <__errno>:
 800fd2c:	4b01      	ldr	r3, [pc, #4]	@ (800fd34 <__errno+0x8>)
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	20000088 	.word	0x20000088

0800fd38 <__libc_init_array>:
 800fd38:	b570      	push	{r4, r5, r6, lr}
 800fd3a:	4d0d      	ldr	r5, [pc, #52]	@ (800fd70 <__libc_init_array+0x38>)
 800fd3c:	4c0d      	ldr	r4, [pc, #52]	@ (800fd74 <__libc_init_array+0x3c>)
 800fd3e:	1b64      	subs	r4, r4, r5
 800fd40:	10a4      	asrs	r4, r4, #2
 800fd42:	2600      	movs	r6, #0
 800fd44:	42a6      	cmp	r6, r4
 800fd46:	d109      	bne.n	800fd5c <__libc_init_array+0x24>
 800fd48:	4d0b      	ldr	r5, [pc, #44]	@ (800fd78 <__libc_init_array+0x40>)
 800fd4a:	4c0c      	ldr	r4, [pc, #48]	@ (800fd7c <__libc_init_array+0x44>)
 800fd4c:	f001 fdf4 	bl	8011938 <_init>
 800fd50:	1b64      	subs	r4, r4, r5
 800fd52:	10a4      	asrs	r4, r4, #2
 800fd54:	2600      	movs	r6, #0
 800fd56:	42a6      	cmp	r6, r4
 800fd58:	d105      	bne.n	800fd66 <__libc_init_array+0x2e>
 800fd5a:	bd70      	pop	{r4, r5, r6, pc}
 800fd5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd60:	4798      	blx	r3
 800fd62:	3601      	adds	r6, #1
 800fd64:	e7ee      	b.n	800fd44 <__libc_init_array+0xc>
 800fd66:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd6a:	4798      	blx	r3
 800fd6c:	3601      	adds	r6, #1
 800fd6e:	e7f2      	b.n	800fd56 <__libc_init_array+0x1e>
 800fd70:	080149f0 	.word	0x080149f0
 800fd74:	080149f0 	.word	0x080149f0
 800fd78:	080149f0 	.word	0x080149f0
 800fd7c:	080149f4 	.word	0x080149f4

0800fd80 <__retarget_lock_acquire_recursive>:
 800fd80:	4770      	bx	lr

0800fd82 <__retarget_lock_release_recursive>:
 800fd82:	4770      	bx	lr

0800fd84 <memcpy>:
 800fd84:	440a      	add	r2, r1
 800fd86:	4291      	cmp	r1, r2
 800fd88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fd8c:	d100      	bne.n	800fd90 <memcpy+0xc>
 800fd8e:	4770      	bx	lr
 800fd90:	b510      	push	{r4, lr}
 800fd92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd9a:	4291      	cmp	r1, r2
 800fd9c:	d1f9      	bne.n	800fd92 <memcpy+0xe>
 800fd9e:	bd10      	pop	{r4, pc}

0800fda0 <__ssputs_r>:
 800fda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fda4:	688e      	ldr	r6, [r1, #8]
 800fda6:	461f      	mov	r7, r3
 800fda8:	42be      	cmp	r6, r7
 800fdaa:	680b      	ldr	r3, [r1, #0]
 800fdac:	4682      	mov	sl, r0
 800fdae:	460c      	mov	r4, r1
 800fdb0:	4690      	mov	r8, r2
 800fdb2:	d82d      	bhi.n	800fe10 <__ssputs_r+0x70>
 800fdb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fdb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fdbc:	d026      	beq.n	800fe0c <__ssputs_r+0x6c>
 800fdbe:	6965      	ldr	r5, [r4, #20]
 800fdc0:	6909      	ldr	r1, [r1, #16]
 800fdc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdc6:	eba3 0901 	sub.w	r9, r3, r1
 800fdca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdce:	1c7b      	adds	r3, r7, #1
 800fdd0:	444b      	add	r3, r9
 800fdd2:	106d      	asrs	r5, r5, #1
 800fdd4:	429d      	cmp	r5, r3
 800fdd6:	bf38      	it	cc
 800fdd8:	461d      	movcc	r5, r3
 800fdda:	0553      	lsls	r3, r2, #21
 800fddc:	d527      	bpl.n	800fe2e <__ssputs_r+0x8e>
 800fdde:	4629      	mov	r1, r5
 800fde0:	f000 f958 	bl	8010094 <_malloc_r>
 800fde4:	4606      	mov	r6, r0
 800fde6:	b360      	cbz	r0, 800fe42 <__ssputs_r+0xa2>
 800fde8:	6921      	ldr	r1, [r4, #16]
 800fdea:	464a      	mov	r2, r9
 800fdec:	f7ff ffca 	bl	800fd84 <memcpy>
 800fdf0:	89a3      	ldrh	r3, [r4, #12]
 800fdf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fdf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdfa:	81a3      	strh	r3, [r4, #12]
 800fdfc:	6126      	str	r6, [r4, #16]
 800fdfe:	6165      	str	r5, [r4, #20]
 800fe00:	444e      	add	r6, r9
 800fe02:	eba5 0509 	sub.w	r5, r5, r9
 800fe06:	6026      	str	r6, [r4, #0]
 800fe08:	60a5      	str	r5, [r4, #8]
 800fe0a:	463e      	mov	r6, r7
 800fe0c:	42be      	cmp	r6, r7
 800fe0e:	d900      	bls.n	800fe12 <__ssputs_r+0x72>
 800fe10:	463e      	mov	r6, r7
 800fe12:	6820      	ldr	r0, [r4, #0]
 800fe14:	4632      	mov	r2, r6
 800fe16:	4641      	mov	r1, r8
 800fe18:	f000 fb84 	bl	8010524 <memmove>
 800fe1c:	68a3      	ldr	r3, [r4, #8]
 800fe1e:	1b9b      	subs	r3, r3, r6
 800fe20:	60a3      	str	r3, [r4, #8]
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	4433      	add	r3, r6
 800fe26:	6023      	str	r3, [r4, #0]
 800fe28:	2000      	movs	r0, #0
 800fe2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe2e:	462a      	mov	r2, r5
 800fe30:	f000 fb4a 	bl	80104c8 <_realloc_r>
 800fe34:	4606      	mov	r6, r0
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d1e0      	bne.n	800fdfc <__ssputs_r+0x5c>
 800fe3a:	6921      	ldr	r1, [r4, #16]
 800fe3c:	4650      	mov	r0, sl
 800fe3e:	f000 fb9b 	bl	8010578 <_free_r>
 800fe42:	230c      	movs	r3, #12
 800fe44:	f8ca 3000 	str.w	r3, [sl]
 800fe48:	89a3      	ldrh	r3, [r4, #12]
 800fe4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe4e:	81a3      	strh	r3, [r4, #12]
 800fe50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe54:	e7e9      	b.n	800fe2a <__ssputs_r+0x8a>
	...

0800fe58 <_svfiprintf_r>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	4698      	mov	r8, r3
 800fe5e:	898b      	ldrh	r3, [r1, #12]
 800fe60:	061b      	lsls	r3, r3, #24
 800fe62:	b09d      	sub	sp, #116	@ 0x74
 800fe64:	4607      	mov	r7, r0
 800fe66:	460d      	mov	r5, r1
 800fe68:	4614      	mov	r4, r2
 800fe6a:	d510      	bpl.n	800fe8e <_svfiprintf_r+0x36>
 800fe6c:	690b      	ldr	r3, [r1, #16]
 800fe6e:	b973      	cbnz	r3, 800fe8e <_svfiprintf_r+0x36>
 800fe70:	2140      	movs	r1, #64	@ 0x40
 800fe72:	f000 f90f 	bl	8010094 <_malloc_r>
 800fe76:	6028      	str	r0, [r5, #0]
 800fe78:	6128      	str	r0, [r5, #16]
 800fe7a:	b930      	cbnz	r0, 800fe8a <_svfiprintf_r+0x32>
 800fe7c:	230c      	movs	r3, #12
 800fe7e:	603b      	str	r3, [r7, #0]
 800fe80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe84:	b01d      	add	sp, #116	@ 0x74
 800fe86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8a:	2340      	movs	r3, #64	@ 0x40
 800fe8c:	616b      	str	r3, [r5, #20]
 800fe8e:	2300      	movs	r3, #0
 800fe90:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe92:	2320      	movs	r3, #32
 800fe94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe98:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe9c:	2330      	movs	r3, #48	@ 0x30
 800fe9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801003c <_svfiprintf_r+0x1e4>
 800fea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fea6:	f04f 0901 	mov.w	r9, #1
 800feaa:	4623      	mov	r3, r4
 800feac:	469a      	mov	sl, r3
 800feae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800feb2:	b10a      	cbz	r2, 800feb8 <_svfiprintf_r+0x60>
 800feb4:	2a25      	cmp	r2, #37	@ 0x25
 800feb6:	d1f9      	bne.n	800feac <_svfiprintf_r+0x54>
 800feb8:	ebba 0b04 	subs.w	fp, sl, r4
 800febc:	d00b      	beq.n	800fed6 <_svfiprintf_r+0x7e>
 800febe:	465b      	mov	r3, fp
 800fec0:	4622      	mov	r2, r4
 800fec2:	4629      	mov	r1, r5
 800fec4:	4638      	mov	r0, r7
 800fec6:	f7ff ff6b 	bl	800fda0 <__ssputs_r>
 800feca:	3001      	adds	r0, #1
 800fecc:	f000 80a7 	beq.w	801001e <_svfiprintf_r+0x1c6>
 800fed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fed2:	445a      	add	r2, fp
 800fed4:	9209      	str	r2, [sp, #36]	@ 0x24
 800fed6:	f89a 3000 	ldrb.w	r3, [sl]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f000 809f 	beq.w	801001e <_svfiprintf_r+0x1c6>
 800fee0:	2300      	movs	r3, #0
 800fee2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800feea:	f10a 0a01 	add.w	sl, sl, #1
 800feee:	9304      	str	r3, [sp, #16]
 800fef0:	9307      	str	r3, [sp, #28]
 800fef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fef6:	931a      	str	r3, [sp, #104]	@ 0x68
 800fef8:	4654      	mov	r4, sl
 800fefa:	2205      	movs	r2, #5
 800fefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff00:	484e      	ldr	r0, [pc, #312]	@ (801003c <_svfiprintf_r+0x1e4>)
 800ff02:	f7f0 f985 	bl	8000210 <memchr>
 800ff06:	9a04      	ldr	r2, [sp, #16]
 800ff08:	b9d8      	cbnz	r0, 800ff42 <_svfiprintf_r+0xea>
 800ff0a:	06d0      	lsls	r0, r2, #27
 800ff0c:	bf44      	itt	mi
 800ff0e:	2320      	movmi	r3, #32
 800ff10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff14:	0711      	lsls	r1, r2, #28
 800ff16:	bf44      	itt	mi
 800ff18:	232b      	movmi	r3, #43	@ 0x2b
 800ff1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ff22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff24:	d015      	beq.n	800ff52 <_svfiprintf_r+0xfa>
 800ff26:	9a07      	ldr	r2, [sp, #28]
 800ff28:	4654      	mov	r4, sl
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	f04f 0c0a 	mov.w	ip, #10
 800ff30:	4621      	mov	r1, r4
 800ff32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff36:	3b30      	subs	r3, #48	@ 0x30
 800ff38:	2b09      	cmp	r3, #9
 800ff3a:	d94b      	bls.n	800ffd4 <_svfiprintf_r+0x17c>
 800ff3c:	b1b0      	cbz	r0, 800ff6c <_svfiprintf_r+0x114>
 800ff3e:	9207      	str	r2, [sp, #28]
 800ff40:	e014      	b.n	800ff6c <_svfiprintf_r+0x114>
 800ff42:	eba0 0308 	sub.w	r3, r0, r8
 800ff46:	fa09 f303 	lsl.w	r3, r9, r3
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	9304      	str	r3, [sp, #16]
 800ff4e:	46a2      	mov	sl, r4
 800ff50:	e7d2      	b.n	800fef8 <_svfiprintf_r+0xa0>
 800ff52:	9b03      	ldr	r3, [sp, #12]
 800ff54:	1d19      	adds	r1, r3, #4
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	9103      	str	r1, [sp, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	bfbb      	ittet	lt
 800ff5e:	425b      	neglt	r3, r3
 800ff60:	f042 0202 	orrlt.w	r2, r2, #2
 800ff64:	9307      	strge	r3, [sp, #28]
 800ff66:	9307      	strlt	r3, [sp, #28]
 800ff68:	bfb8      	it	lt
 800ff6a:	9204      	strlt	r2, [sp, #16]
 800ff6c:	7823      	ldrb	r3, [r4, #0]
 800ff6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff70:	d10a      	bne.n	800ff88 <_svfiprintf_r+0x130>
 800ff72:	7863      	ldrb	r3, [r4, #1]
 800ff74:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff76:	d132      	bne.n	800ffde <_svfiprintf_r+0x186>
 800ff78:	9b03      	ldr	r3, [sp, #12]
 800ff7a:	1d1a      	adds	r2, r3, #4
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	9203      	str	r2, [sp, #12]
 800ff80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff84:	3402      	adds	r4, #2
 800ff86:	9305      	str	r3, [sp, #20]
 800ff88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801004c <_svfiprintf_r+0x1f4>
 800ff8c:	7821      	ldrb	r1, [r4, #0]
 800ff8e:	2203      	movs	r2, #3
 800ff90:	4650      	mov	r0, sl
 800ff92:	f7f0 f93d 	bl	8000210 <memchr>
 800ff96:	b138      	cbz	r0, 800ffa8 <_svfiprintf_r+0x150>
 800ff98:	9b04      	ldr	r3, [sp, #16]
 800ff9a:	eba0 000a 	sub.w	r0, r0, sl
 800ff9e:	2240      	movs	r2, #64	@ 0x40
 800ffa0:	4082      	lsls	r2, r0
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	3401      	adds	r4, #1
 800ffa6:	9304      	str	r3, [sp, #16]
 800ffa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffac:	4824      	ldr	r0, [pc, #144]	@ (8010040 <_svfiprintf_r+0x1e8>)
 800ffae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ffb2:	2206      	movs	r2, #6
 800ffb4:	f7f0 f92c 	bl	8000210 <memchr>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	d036      	beq.n	801002a <_svfiprintf_r+0x1d2>
 800ffbc:	4b21      	ldr	r3, [pc, #132]	@ (8010044 <_svfiprintf_r+0x1ec>)
 800ffbe:	bb1b      	cbnz	r3, 8010008 <_svfiprintf_r+0x1b0>
 800ffc0:	9b03      	ldr	r3, [sp, #12]
 800ffc2:	3307      	adds	r3, #7
 800ffc4:	f023 0307 	bic.w	r3, r3, #7
 800ffc8:	3308      	adds	r3, #8
 800ffca:	9303      	str	r3, [sp, #12]
 800ffcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffce:	4433      	add	r3, r6
 800ffd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffd2:	e76a      	b.n	800feaa <_svfiprintf_r+0x52>
 800ffd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffd8:	460c      	mov	r4, r1
 800ffda:	2001      	movs	r0, #1
 800ffdc:	e7a8      	b.n	800ff30 <_svfiprintf_r+0xd8>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	3401      	adds	r4, #1
 800ffe2:	9305      	str	r3, [sp, #20]
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	f04f 0c0a 	mov.w	ip, #10
 800ffea:	4620      	mov	r0, r4
 800ffec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fff0:	3a30      	subs	r2, #48	@ 0x30
 800fff2:	2a09      	cmp	r2, #9
 800fff4:	d903      	bls.n	800fffe <_svfiprintf_r+0x1a6>
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d0c6      	beq.n	800ff88 <_svfiprintf_r+0x130>
 800fffa:	9105      	str	r1, [sp, #20]
 800fffc:	e7c4      	b.n	800ff88 <_svfiprintf_r+0x130>
 800fffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010002:	4604      	mov	r4, r0
 8010004:	2301      	movs	r3, #1
 8010006:	e7f0      	b.n	800ffea <_svfiprintf_r+0x192>
 8010008:	ab03      	add	r3, sp, #12
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	462a      	mov	r2, r5
 801000e:	4b0e      	ldr	r3, [pc, #56]	@ (8010048 <_svfiprintf_r+0x1f0>)
 8010010:	a904      	add	r1, sp, #16
 8010012:	4638      	mov	r0, r7
 8010014:	f3af 8000 	nop.w
 8010018:	1c42      	adds	r2, r0, #1
 801001a:	4606      	mov	r6, r0
 801001c:	d1d6      	bne.n	800ffcc <_svfiprintf_r+0x174>
 801001e:	89ab      	ldrh	r3, [r5, #12]
 8010020:	065b      	lsls	r3, r3, #25
 8010022:	f53f af2d 	bmi.w	800fe80 <_svfiprintf_r+0x28>
 8010026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010028:	e72c      	b.n	800fe84 <_svfiprintf_r+0x2c>
 801002a:	ab03      	add	r3, sp, #12
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	462a      	mov	r2, r5
 8010030:	4b05      	ldr	r3, [pc, #20]	@ (8010048 <_svfiprintf_r+0x1f0>)
 8010032:	a904      	add	r1, sp, #16
 8010034:	4638      	mov	r0, r7
 8010036:	f000 f91b 	bl	8010270 <_printf_i>
 801003a:	e7ed      	b.n	8010018 <_svfiprintf_r+0x1c0>
 801003c:	080147d8 	.word	0x080147d8
 8010040:	080147e2 	.word	0x080147e2
 8010044:	00000000 	.word	0x00000000
 8010048:	0800fda1 	.word	0x0800fda1
 801004c:	080147de 	.word	0x080147de

08010050 <sbrk_aligned>:
 8010050:	b570      	push	{r4, r5, r6, lr}
 8010052:	4e0f      	ldr	r6, [pc, #60]	@ (8010090 <sbrk_aligned+0x40>)
 8010054:	460c      	mov	r4, r1
 8010056:	6831      	ldr	r1, [r6, #0]
 8010058:	4605      	mov	r5, r0
 801005a:	b911      	cbnz	r1, 8010062 <sbrk_aligned+0x12>
 801005c:	f000 fa7c 	bl	8010558 <_sbrk_r>
 8010060:	6030      	str	r0, [r6, #0]
 8010062:	4621      	mov	r1, r4
 8010064:	4628      	mov	r0, r5
 8010066:	f000 fa77 	bl	8010558 <_sbrk_r>
 801006a:	1c43      	adds	r3, r0, #1
 801006c:	d103      	bne.n	8010076 <sbrk_aligned+0x26>
 801006e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010072:	4620      	mov	r0, r4
 8010074:	bd70      	pop	{r4, r5, r6, pc}
 8010076:	1cc4      	adds	r4, r0, #3
 8010078:	f024 0403 	bic.w	r4, r4, #3
 801007c:	42a0      	cmp	r0, r4
 801007e:	d0f8      	beq.n	8010072 <sbrk_aligned+0x22>
 8010080:	1a21      	subs	r1, r4, r0
 8010082:	4628      	mov	r0, r5
 8010084:	f000 fa68 	bl	8010558 <_sbrk_r>
 8010088:	3001      	adds	r0, #1
 801008a:	d1f2      	bne.n	8010072 <sbrk_aligned+0x22>
 801008c:	e7ef      	b.n	801006e <sbrk_aligned+0x1e>
 801008e:	bf00      	nop
 8010090:	20005820 	.word	0x20005820

08010094 <_malloc_r>:
 8010094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010098:	1ccd      	adds	r5, r1, #3
 801009a:	f025 0503 	bic.w	r5, r5, #3
 801009e:	3508      	adds	r5, #8
 80100a0:	2d0c      	cmp	r5, #12
 80100a2:	bf38      	it	cc
 80100a4:	250c      	movcc	r5, #12
 80100a6:	2d00      	cmp	r5, #0
 80100a8:	4606      	mov	r6, r0
 80100aa:	db01      	blt.n	80100b0 <_malloc_r+0x1c>
 80100ac:	42a9      	cmp	r1, r5
 80100ae:	d904      	bls.n	80100ba <_malloc_r+0x26>
 80100b0:	230c      	movs	r3, #12
 80100b2:	6033      	str	r3, [r6, #0]
 80100b4:	2000      	movs	r0, #0
 80100b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010190 <_malloc_r+0xfc>
 80100be:	f000 f9f7 	bl	80104b0 <__malloc_lock>
 80100c2:	f8d8 3000 	ldr.w	r3, [r8]
 80100c6:	461c      	mov	r4, r3
 80100c8:	bb44      	cbnz	r4, 801011c <_malloc_r+0x88>
 80100ca:	4629      	mov	r1, r5
 80100cc:	4630      	mov	r0, r6
 80100ce:	f7ff ffbf 	bl	8010050 <sbrk_aligned>
 80100d2:	1c43      	adds	r3, r0, #1
 80100d4:	4604      	mov	r4, r0
 80100d6:	d158      	bne.n	801018a <_malloc_r+0xf6>
 80100d8:	f8d8 4000 	ldr.w	r4, [r8]
 80100dc:	4627      	mov	r7, r4
 80100de:	2f00      	cmp	r7, #0
 80100e0:	d143      	bne.n	801016a <_malloc_r+0xd6>
 80100e2:	2c00      	cmp	r4, #0
 80100e4:	d04b      	beq.n	801017e <_malloc_r+0xea>
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	4639      	mov	r1, r7
 80100ea:	4630      	mov	r0, r6
 80100ec:	eb04 0903 	add.w	r9, r4, r3
 80100f0:	f000 fa32 	bl	8010558 <_sbrk_r>
 80100f4:	4581      	cmp	r9, r0
 80100f6:	d142      	bne.n	801017e <_malloc_r+0xea>
 80100f8:	6821      	ldr	r1, [r4, #0]
 80100fa:	1a6d      	subs	r5, r5, r1
 80100fc:	4629      	mov	r1, r5
 80100fe:	4630      	mov	r0, r6
 8010100:	f7ff ffa6 	bl	8010050 <sbrk_aligned>
 8010104:	3001      	adds	r0, #1
 8010106:	d03a      	beq.n	801017e <_malloc_r+0xea>
 8010108:	6823      	ldr	r3, [r4, #0]
 801010a:	442b      	add	r3, r5
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	f8d8 3000 	ldr.w	r3, [r8]
 8010112:	685a      	ldr	r2, [r3, #4]
 8010114:	bb62      	cbnz	r2, 8010170 <_malloc_r+0xdc>
 8010116:	f8c8 7000 	str.w	r7, [r8]
 801011a:	e00f      	b.n	801013c <_malloc_r+0xa8>
 801011c:	6822      	ldr	r2, [r4, #0]
 801011e:	1b52      	subs	r2, r2, r5
 8010120:	d420      	bmi.n	8010164 <_malloc_r+0xd0>
 8010122:	2a0b      	cmp	r2, #11
 8010124:	d917      	bls.n	8010156 <_malloc_r+0xc2>
 8010126:	1961      	adds	r1, r4, r5
 8010128:	42a3      	cmp	r3, r4
 801012a:	6025      	str	r5, [r4, #0]
 801012c:	bf18      	it	ne
 801012e:	6059      	strne	r1, [r3, #4]
 8010130:	6863      	ldr	r3, [r4, #4]
 8010132:	bf08      	it	eq
 8010134:	f8c8 1000 	streq.w	r1, [r8]
 8010138:	5162      	str	r2, [r4, r5]
 801013a:	604b      	str	r3, [r1, #4]
 801013c:	4630      	mov	r0, r6
 801013e:	f000 f9bd 	bl	80104bc <__malloc_unlock>
 8010142:	f104 000b 	add.w	r0, r4, #11
 8010146:	1d23      	adds	r3, r4, #4
 8010148:	f020 0007 	bic.w	r0, r0, #7
 801014c:	1ac2      	subs	r2, r0, r3
 801014e:	bf1c      	itt	ne
 8010150:	1a1b      	subne	r3, r3, r0
 8010152:	50a3      	strne	r3, [r4, r2]
 8010154:	e7af      	b.n	80100b6 <_malloc_r+0x22>
 8010156:	6862      	ldr	r2, [r4, #4]
 8010158:	42a3      	cmp	r3, r4
 801015a:	bf0c      	ite	eq
 801015c:	f8c8 2000 	streq.w	r2, [r8]
 8010160:	605a      	strne	r2, [r3, #4]
 8010162:	e7eb      	b.n	801013c <_malloc_r+0xa8>
 8010164:	4623      	mov	r3, r4
 8010166:	6864      	ldr	r4, [r4, #4]
 8010168:	e7ae      	b.n	80100c8 <_malloc_r+0x34>
 801016a:	463c      	mov	r4, r7
 801016c:	687f      	ldr	r7, [r7, #4]
 801016e:	e7b6      	b.n	80100de <_malloc_r+0x4a>
 8010170:	461a      	mov	r2, r3
 8010172:	685b      	ldr	r3, [r3, #4]
 8010174:	42a3      	cmp	r3, r4
 8010176:	d1fb      	bne.n	8010170 <_malloc_r+0xdc>
 8010178:	2300      	movs	r3, #0
 801017a:	6053      	str	r3, [r2, #4]
 801017c:	e7de      	b.n	801013c <_malloc_r+0xa8>
 801017e:	230c      	movs	r3, #12
 8010180:	6033      	str	r3, [r6, #0]
 8010182:	4630      	mov	r0, r6
 8010184:	f000 f99a 	bl	80104bc <__malloc_unlock>
 8010188:	e794      	b.n	80100b4 <_malloc_r+0x20>
 801018a:	6005      	str	r5, [r0, #0]
 801018c:	e7d6      	b.n	801013c <_malloc_r+0xa8>
 801018e:	bf00      	nop
 8010190:	20005824 	.word	0x20005824

08010194 <_printf_common>:
 8010194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010198:	4616      	mov	r6, r2
 801019a:	4698      	mov	r8, r3
 801019c:	688a      	ldr	r2, [r1, #8]
 801019e:	690b      	ldr	r3, [r1, #16]
 80101a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80101a4:	4293      	cmp	r3, r2
 80101a6:	bfb8      	it	lt
 80101a8:	4613      	movlt	r3, r2
 80101aa:	6033      	str	r3, [r6, #0]
 80101ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80101b0:	4607      	mov	r7, r0
 80101b2:	460c      	mov	r4, r1
 80101b4:	b10a      	cbz	r2, 80101ba <_printf_common+0x26>
 80101b6:	3301      	adds	r3, #1
 80101b8:	6033      	str	r3, [r6, #0]
 80101ba:	6823      	ldr	r3, [r4, #0]
 80101bc:	0699      	lsls	r1, r3, #26
 80101be:	bf42      	ittt	mi
 80101c0:	6833      	ldrmi	r3, [r6, #0]
 80101c2:	3302      	addmi	r3, #2
 80101c4:	6033      	strmi	r3, [r6, #0]
 80101c6:	6825      	ldr	r5, [r4, #0]
 80101c8:	f015 0506 	ands.w	r5, r5, #6
 80101cc:	d106      	bne.n	80101dc <_printf_common+0x48>
 80101ce:	f104 0a19 	add.w	sl, r4, #25
 80101d2:	68e3      	ldr	r3, [r4, #12]
 80101d4:	6832      	ldr	r2, [r6, #0]
 80101d6:	1a9b      	subs	r3, r3, r2
 80101d8:	42ab      	cmp	r3, r5
 80101da:	dc26      	bgt.n	801022a <_printf_common+0x96>
 80101dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80101e0:	6822      	ldr	r2, [r4, #0]
 80101e2:	3b00      	subs	r3, #0
 80101e4:	bf18      	it	ne
 80101e6:	2301      	movne	r3, #1
 80101e8:	0692      	lsls	r2, r2, #26
 80101ea:	d42b      	bmi.n	8010244 <_printf_common+0xb0>
 80101ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80101f0:	4641      	mov	r1, r8
 80101f2:	4638      	mov	r0, r7
 80101f4:	47c8      	blx	r9
 80101f6:	3001      	adds	r0, #1
 80101f8:	d01e      	beq.n	8010238 <_printf_common+0xa4>
 80101fa:	6823      	ldr	r3, [r4, #0]
 80101fc:	6922      	ldr	r2, [r4, #16]
 80101fe:	f003 0306 	and.w	r3, r3, #6
 8010202:	2b04      	cmp	r3, #4
 8010204:	bf02      	ittt	eq
 8010206:	68e5      	ldreq	r5, [r4, #12]
 8010208:	6833      	ldreq	r3, [r6, #0]
 801020a:	1aed      	subeq	r5, r5, r3
 801020c:	68a3      	ldr	r3, [r4, #8]
 801020e:	bf0c      	ite	eq
 8010210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010214:	2500      	movne	r5, #0
 8010216:	4293      	cmp	r3, r2
 8010218:	bfc4      	itt	gt
 801021a:	1a9b      	subgt	r3, r3, r2
 801021c:	18ed      	addgt	r5, r5, r3
 801021e:	2600      	movs	r6, #0
 8010220:	341a      	adds	r4, #26
 8010222:	42b5      	cmp	r5, r6
 8010224:	d11a      	bne.n	801025c <_printf_common+0xc8>
 8010226:	2000      	movs	r0, #0
 8010228:	e008      	b.n	801023c <_printf_common+0xa8>
 801022a:	2301      	movs	r3, #1
 801022c:	4652      	mov	r2, sl
 801022e:	4641      	mov	r1, r8
 8010230:	4638      	mov	r0, r7
 8010232:	47c8      	blx	r9
 8010234:	3001      	adds	r0, #1
 8010236:	d103      	bne.n	8010240 <_printf_common+0xac>
 8010238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010240:	3501      	adds	r5, #1
 8010242:	e7c6      	b.n	80101d2 <_printf_common+0x3e>
 8010244:	18e1      	adds	r1, r4, r3
 8010246:	1c5a      	adds	r2, r3, #1
 8010248:	2030      	movs	r0, #48	@ 0x30
 801024a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801024e:	4422      	add	r2, r4
 8010250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010258:	3302      	adds	r3, #2
 801025a:	e7c7      	b.n	80101ec <_printf_common+0x58>
 801025c:	2301      	movs	r3, #1
 801025e:	4622      	mov	r2, r4
 8010260:	4641      	mov	r1, r8
 8010262:	4638      	mov	r0, r7
 8010264:	47c8      	blx	r9
 8010266:	3001      	adds	r0, #1
 8010268:	d0e6      	beq.n	8010238 <_printf_common+0xa4>
 801026a:	3601      	adds	r6, #1
 801026c:	e7d9      	b.n	8010222 <_printf_common+0x8e>
	...

08010270 <_printf_i>:
 8010270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010274:	7e0f      	ldrb	r7, [r1, #24]
 8010276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010278:	2f78      	cmp	r7, #120	@ 0x78
 801027a:	4691      	mov	r9, r2
 801027c:	4680      	mov	r8, r0
 801027e:	460c      	mov	r4, r1
 8010280:	469a      	mov	sl, r3
 8010282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010286:	d807      	bhi.n	8010298 <_printf_i+0x28>
 8010288:	2f62      	cmp	r7, #98	@ 0x62
 801028a:	d80a      	bhi.n	80102a2 <_printf_i+0x32>
 801028c:	2f00      	cmp	r7, #0
 801028e:	f000 80d2 	beq.w	8010436 <_printf_i+0x1c6>
 8010292:	2f58      	cmp	r7, #88	@ 0x58
 8010294:	f000 80b9 	beq.w	801040a <_printf_i+0x19a>
 8010298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801029c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80102a0:	e03a      	b.n	8010318 <_printf_i+0xa8>
 80102a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80102a6:	2b15      	cmp	r3, #21
 80102a8:	d8f6      	bhi.n	8010298 <_printf_i+0x28>
 80102aa:	a101      	add	r1, pc, #4	@ (adr r1, 80102b0 <_printf_i+0x40>)
 80102ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102b0:	08010309 	.word	0x08010309
 80102b4:	0801031d 	.word	0x0801031d
 80102b8:	08010299 	.word	0x08010299
 80102bc:	08010299 	.word	0x08010299
 80102c0:	08010299 	.word	0x08010299
 80102c4:	08010299 	.word	0x08010299
 80102c8:	0801031d 	.word	0x0801031d
 80102cc:	08010299 	.word	0x08010299
 80102d0:	08010299 	.word	0x08010299
 80102d4:	08010299 	.word	0x08010299
 80102d8:	08010299 	.word	0x08010299
 80102dc:	0801041d 	.word	0x0801041d
 80102e0:	08010347 	.word	0x08010347
 80102e4:	080103d7 	.word	0x080103d7
 80102e8:	08010299 	.word	0x08010299
 80102ec:	08010299 	.word	0x08010299
 80102f0:	0801043f 	.word	0x0801043f
 80102f4:	08010299 	.word	0x08010299
 80102f8:	08010347 	.word	0x08010347
 80102fc:	08010299 	.word	0x08010299
 8010300:	08010299 	.word	0x08010299
 8010304:	080103df 	.word	0x080103df
 8010308:	6833      	ldr	r3, [r6, #0]
 801030a:	1d1a      	adds	r2, r3, #4
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	6032      	str	r2, [r6, #0]
 8010310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010318:	2301      	movs	r3, #1
 801031a:	e09d      	b.n	8010458 <_printf_i+0x1e8>
 801031c:	6833      	ldr	r3, [r6, #0]
 801031e:	6820      	ldr	r0, [r4, #0]
 8010320:	1d19      	adds	r1, r3, #4
 8010322:	6031      	str	r1, [r6, #0]
 8010324:	0606      	lsls	r6, r0, #24
 8010326:	d501      	bpl.n	801032c <_printf_i+0xbc>
 8010328:	681d      	ldr	r5, [r3, #0]
 801032a:	e003      	b.n	8010334 <_printf_i+0xc4>
 801032c:	0645      	lsls	r5, r0, #25
 801032e:	d5fb      	bpl.n	8010328 <_printf_i+0xb8>
 8010330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010334:	2d00      	cmp	r5, #0
 8010336:	da03      	bge.n	8010340 <_printf_i+0xd0>
 8010338:	232d      	movs	r3, #45	@ 0x2d
 801033a:	426d      	negs	r5, r5
 801033c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010340:	4859      	ldr	r0, [pc, #356]	@ (80104a8 <_printf_i+0x238>)
 8010342:	230a      	movs	r3, #10
 8010344:	e011      	b.n	801036a <_printf_i+0xfa>
 8010346:	6821      	ldr	r1, [r4, #0]
 8010348:	6833      	ldr	r3, [r6, #0]
 801034a:	0608      	lsls	r0, r1, #24
 801034c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010350:	d402      	bmi.n	8010358 <_printf_i+0xe8>
 8010352:	0649      	lsls	r1, r1, #25
 8010354:	bf48      	it	mi
 8010356:	b2ad      	uxthmi	r5, r5
 8010358:	2f6f      	cmp	r7, #111	@ 0x6f
 801035a:	4853      	ldr	r0, [pc, #332]	@ (80104a8 <_printf_i+0x238>)
 801035c:	6033      	str	r3, [r6, #0]
 801035e:	bf14      	ite	ne
 8010360:	230a      	movne	r3, #10
 8010362:	2308      	moveq	r3, #8
 8010364:	2100      	movs	r1, #0
 8010366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801036a:	6866      	ldr	r6, [r4, #4]
 801036c:	60a6      	str	r6, [r4, #8]
 801036e:	2e00      	cmp	r6, #0
 8010370:	bfa2      	ittt	ge
 8010372:	6821      	ldrge	r1, [r4, #0]
 8010374:	f021 0104 	bicge.w	r1, r1, #4
 8010378:	6021      	strge	r1, [r4, #0]
 801037a:	b90d      	cbnz	r5, 8010380 <_printf_i+0x110>
 801037c:	2e00      	cmp	r6, #0
 801037e:	d04b      	beq.n	8010418 <_printf_i+0x1a8>
 8010380:	4616      	mov	r6, r2
 8010382:	fbb5 f1f3 	udiv	r1, r5, r3
 8010386:	fb03 5711 	mls	r7, r3, r1, r5
 801038a:	5dc7      	ldrb	r7, [r0, r7]
 801038c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010390:	462f      	mov	r7, r5
 8010392:	42bb      	cmp	r3, r7
 8010394:	460d      	mov	r5, r1
 8010396:	d9f4      	bls.n	8010382 <_printf_i+0x112>
 8010398:	2b08      	cmp	r3, #8
 801039a:	d10b      	bne.n	80103b4 <_printf_i+0x144>
 801039c:	6823      	ldr	r3, [r4, #0]
 801039e:	07df      	lsls	r7, r3, #31
 80103a0:	d508      	bpl.n	80103b4 <_printf_i+0x144>
 80103a2:	6923      	ldr	r3, [r4, #16]
 80103a4:	6861      	ldr	r1, [r4, #4]
 80103a6:	4299      	cmp	r1, r3
 80103a8:	bfde      	ittt	le
 80103aa:	2330      	movle	r3, #48	@ 0x30
 80103ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80103b4:	1b92      	subs	r2, r2, r6
 80103b6:	6122      	str	r2, [r4, #16]
 80103b8:	f8cd a000 	str.w	sl, [sp]
 80103bc:	464b      	mov	r3, r9
 80103be:	aa03      	add	r2, sp, #12
 80103c0:	4621      	mov	r1, r4
 80103c2:	4640      	mov	r0, r8
 80103c4:	f7ff fee6 	bl	8010194 <_printf_common>
 80103c8:	3001      	adds	r0, #1
 80103ca:	d14a      	bne.n	8010462 <_printf_i+0x1f2>
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80103d0:	b004      	add	sp, #16
 80103d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	f043 0320 	orr.w	r3, r3, #32
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	4833      	ldr	r0, [pc, #204]	@ (80104ac <_printf_i+0x23c>)
 80103e0:	2778      	movs	r7, #120	@ 0x78
 80103e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80103e6:	6823      	ldr	r3, [r4, #0]
 80103e8:	6831      	ldr	r1, [r6, #0]
 80103ea:	061f      	lsls	r7, r3, #24
 80103ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80103f0:	d402      	bmi.n	80103f8 <_printf_i+0x188>
 80103f2:	065f      	lsls	r7, r3, #25
 80103f4:	bf48      	it	mi
 80103f6:	b2ad      	uxthmi	r5, r5
 80103f8:	6031      	str	r1, [r6, #0]
 80103fa:	07d9      	lsls	r1, r3, #31
 80103fc:	bf44      	itt	mi
 80103fe:	f043 0320 	orrmi.w	r3, r3, #32
 8010402:	6023      	strmi	r3, [r4, #0]
 8010404:	b11d      	cbz	r5, 801040e <_printf_i+0x19e>
 8010406:	2310      	movs	r3, #16
 8010408:	e7ac      	b.n	8010364 <_printf_i+0xf4>
 801040a:	4827      	ldr	r0, [pc, #156]	@ (80104a8 <_printf_i+0x238>)
 801040c:	e7e9      	b.n	80103e2 <_printf_i+0x172>
 801040e:	6823      	ldr	r3, [r4, #0]
 8010410:	f023 0320 	bic.w	r3, r3, #32
 8010414:	6023      	str	r3, [r4, #0]
 8010416:	e7f6      	b.n	8010406 <_printf_i+0x196>
 8010418:	4616      	mov	r6, r2
 801041a:	e7bd      	b.n	8010398 <_printf_i+0x128>
 801041c:	6833      	ldr	r3, [r6, #0]
 801041e:	6825      	ldr	r5, [r4, #0]
 8010420:	6961      	ldr	r1, [r4, #20]
 8010422:	1d18      	adds	r0, r3, #4
 8010424:	6030      	str	r0, [r6, #0]
 8010426:	062e      	lsls	r6, r5, #24
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	d501      	bpl.n	8010430 <_printf_i+0x1c0>
 801042c:	6019      	str	r1, [r3, #0]
 801042e:	e002      	b.n	8010436 <_printf_i+0x1c6>
 8010430:	0668      	lsls	r0, r5, #25
 8010432:	d5fb      	bpl.n	801042c <_printf_i+0x1bc>
 8010434:	8019      	strh	r1, [r3, #0]
 8010436:	2300      	movs	r3, #0
 8010438:	6123      	str	r3, [r4, #16]
 801043a:	4616      	mov	r6, r2
 801043c:	e7bc      	b.n	80103b8 <_printf_i+0x148>
 801043e:	6833      	ldr	r3, [r6, #0]
 8010440:	1d1a      	adds	r2, r3, #4
 8010442:	6032      	str	r2, [r6, #0]
 8010444:	681e      	ldr	r6, [r3, #0]
 8010446:	6862      	ldr	r2, [r4, #4]
 8010448:	2100      	movs	r1, #0
 801044a:	4630      	mov	r0, r6
 801044c:	f7ef fee0 	bl	8000210 <memchr>
 8010450:	b108      	cbz	r0, 8010456 <_printf_i+0x1e6>
 8010452:	1b80      	subs	r0, r0, r6
 8010454:	6060      	str	r0, [r4, #4]
 8010456:	6863      	ldr	r3, [r4, #4]
 8010458:	6123      	str	r3, [r4, #16]
 801045a:	2300      	movs	r3, #0
 801045c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010460:	e7aa      	b.n	80103b8 <_printf_i+0x148>
 8010462:	6923      	ldr	r3, [r4, #16]
 8010464:	4632      	mov	r2, r6
 8010466:	4649      	mov	r1, r9
 8010468:	4640      	mov	r0, r8
 801046a:	47d0      	blx	sl
 801046c:	3001      	adds	r0, #1
 801046e:	d0ad      	beq.n	80103cc <_printf_i+0x15c>
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	079b      	lsls	r3, r3, #30
 8010474:	d413      	bmi.n	801049e <_printf_i+0x22e>
 8010476:	68e0      	ldr	r0, [r4, #12]
 8010478:	9b03      	ldr	r3, [sp, #12]
 801047a:	4298      	cmp	r0, r3
 801047c:	bfb8      	it	lt
 801047e:	4618      	movlt	r0, r3
 8010480:	e7a6      	b.n	80103d0 <_printf_i+0x160>
 8010482:	2301      	movs	r3, #1
 8010484:	4632      	mov	r2, r6
 8010486:	4649      	mov	r1, r9
 8010488:	4640      	mov	r0, r8
 801048a:	47d0      	blx	sl
 801048c:	3001      	adds	r0, #1
 801048e:	d09d      	beq.n	80103cc <_printf_i+0x15c>
 8010490:	3501      	adds	r5, #1
 8010492:	68e3      	ldr	r3, [r4, #12]
 8010494:	9903      	ldr	r1, [sp, #12]
 8010496:	1a5b      	subs	r3, r3, r1
 8010498:	42ab      	cmp	r3, r5
 801049a:	dcf2      	bgt.n	8010482 <_printf_i+0x212>
 801049c:	e7eb      	b.n	8010476 <_printf_i+0x206>
 801049e:	2500      	movs	r5, #0
 80104a0:	f104 0619 	add.w	r6, r4, #25
 80104a4:	e7f5      	b.n	8010492 <_printf_i+0x222>
 80104a6:	bf00      	nop
 80104a8:	080147e9 	.word	0x080147e9
 80104ac:	080147fa 	.word	0x080147fa

080104b0 <__malloc_lock>:
 80104b0:	4801      	ldr	r0, [pc, #4]	@ (80104b8 <__malloc_lock+0x8>)
 80104b2:	f7ff bc65 	b.w	800fd80 <__retarget_lock_acquire_recursive>
 80104b6:	bf00      	nop
 80104b8:	2000581c 	.word	0x2000581c

080104bc <__malloc_unlock>:
 80104bc:	4801      	ldr	r0, [pc, #4]	@ (80104c4 <__malloc_unlock+0x8>)
 80104be:	f7ff bc60 	b.w	800fd82 <__retarget_lock_release_recursive>
 80104c2:	bf00      	nop
 80104c4:	2000581c 	.word	0x2000581c

080104c8 <_realloc_r>:
 80104c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104cc:	4680      	mov	r8, r0
 80104ce:	4615      	mov	r5, r2
 80104d0:	460c      	mov	r4, r1
 80104d2:	b921      	cbnz	r1, 80104de <_realloc_r+0x16>
 80104d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104d8:	4611      	mov	r1, r2
 80104da:	f7ff bddb 	b.w	8010094 <_malloc_r>
 80104de:	b92a      	cbnz	r2, 80104ec <_realloc_r+0x24>
 80104e0:	f000 f84a 	bl	8010578 <_free_r>
 80104e4:	2400      	movs	r4, #0
 80104e6:	4620      	mov	r0, r4
 80104e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ec:	f000 f88e 	bl	801060c <_malloc_usable_size_r>
 80104f0:	4285      	cmp	r5, r0
 80104f2:	4606      	mov	r6, r0
 80104f4:	d802      	bhi.n	80104fc <_realloc_r+0x34>
 80104f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80104fa:	d8f4      	bhi.n	80104e6 <_realloc_r+0x1e>
 80104fc:	4629      	mov	r1, r5
 80104fe:	4640      	mov	r0, r8
 8010500:	f7ff fdc8 	bl	8010094 <_malloc_r>
 8010504:	4607      	mov	r7, r0
 8010506:	2800      	cmp	r0, #0
 8010508:	d0ec      	beq.n	80104e4 <_realloc_r+0x1c>
 801050a:	42b5      	cmp	r5, r6
 801050c:	462a      	mov	r2, r5
 801050e:	4621      	mov	r1, r4
 8010510:	bf28      	it	cs
 8010512:	4632      	movcs	r2, r6
 8010514:	f7ff fc36 	bl	800fd84 <memcpy>
 8010518:	4621      	mov	r1, r4
 801051a:	4640      	mov	r0, r8
 801051c:	f000 f82c 	bl	8010578 <_free_r>
 8010520:	463c      	mov	r4, r7
 8010522:	e7e0      	b.n	80104e6 <_realloc_r+0x1e>

08010524 <memmove>:
 8010524:	4288      	cmp	r0, r1
 8010526:	b510      	push	{r4, lr}
 8010528:	eb01 0402 	add.w	r4, r1, r2
 801052c:	d902      	bls.n	8010534 <memmove+0x10>
 801052e:	4284      	cmp	r4, r0
 8010530:	4623      	mov	r3, r4
 8010532:	d807      	bhi.n	8010544 <memmove+0x20>
 8010534:	1e43      	subs	r3, r0, #1
 8010536:	42a1      	cmp	r1, r4
 8010538:	d008      	beq.n	801054c <memmove+0x28>
 801053a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801053e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010542:	e7f8      	b.n	8010536 <memmove+0x12>
 8010544:	4402      	add	r2, r0
 8010546:	4601      	mov	r1, r0
 8010548:	428a      	cmp	r2, r1
 801054a:	d100      	bne.n	801054e <memmove+0x2a>
 801054c:	bd10      	pop	{r4, pc}
 801054e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010556:	e7f7      	b.n	8010548 <memmove+0x24>

08010558 <_sbrk_r>:
 8010558:	b538      	push	{r3, r4, r5, lr}
 801055a:	4d06      	ldr	r5, [pc, #24]	@ (8010574 <_sbrk_r+0x1c>)
 801055c:	2300      	movs	r3, #0
 801055e:	4604      	mov	r4, r0
 8010560:	4608      	mov	r0, r1
 8010562:	602b      	str	r3, [r5, #0]
 8010564:	f7f6 fab4 	bl	8006ad0 <_sbrk>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	d102      	bne.n	8010572 <_sbrk_r+0x1a>
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	b103      	cbz	r3, 8010572 <_sbrk_r+0x1a>
 8010570:	6023      	str	r3, [r4, #0]
 8010572:	bd38      	pop	{r3, r4, r5, pc}
 8010574:	20005828 	.word	0x20005828

08010578 <_free_r>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4605      	mov	r5, r0
 801057c:	2900      	cmp	r1, #0
 801057e:	d041      	beq.n	8010604 <_free_r+0x8c>
 8010580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010584:	1f0c      	subs	r4, r1, #4
 8010586:	2b00      	cmp	r3, #0
 8010588:	bfb8      	it	lt
 801058a:	18e4      	addlt	r4, r4, r3
 801058c:	f7ff ff90 	bl	80104b0 <__malloc_lock>
 8010590:	4a1d      	ldr	r2, [pc, #116]	@ (8010608 <_free_r+0x90>)
 8010592:	6813      	ldr	r3, [r2, #0]
 8010594:	b933      	cbnz	r3, 80105a4 <_free_r+0x2c>
 8010596:	6063      	str	r3, [r4, #4]
 8010598:	6014      	str	r4, [r2, #0]
 801059a:	4628      	mov	r0, r5
 801059c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105a0:	f7ff bf8c 	b.w	80104bc <__malloc_unlock>
 80105a4:	42a3      	cmp	r3, r4
 80105a6:	d908      	bls.n	80105ba <_free_r+0x42>
 80105a8:	6820      	ldr	r0, [r4, #0]
 80105aa:	1821      	adds	r1, r4, r0
 80105ac:	428b      	cmp	r3, r1
 80105ae:	bf01      	itttt	eq
 80105b0:	6819      	ldreq	r1, [r3, #0]
 80105b2:	685b      	ldreq	r3, [r3, #4]
 80105b4:	1809      	addeq	r1, r1, r0
 80105b6:	6021      	streq	r1, [r4, #0]
 80105b8:	e7ed      	b.n	8010596 <_free_r+0x1e>
 80105ba:	461a      	mov	r2, r3
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	b10b      	cbz	r3, 80105c4 <_free_r+0x4c>
 80105c0:	42a3      	cmp	r3, r4
 80105c2:	d9fa      	bls.n	80105ba <_free_r+0x42>
 80105c4:	6811      	ldr	r1, [r2, #0]
 80105c6:	1850      	adds	r0, r2, r1
 80105c8:	42a0      	cmp	r0, r4
 80105ca:	d10b      	bne.n	80105e4 <_free_r+0x6c>
 80105cc:	6820      	ldr	r0, [r4, #0]
 80105ce:	4401      	add	r1, r0
 80105d0:	1850      	adds	r0, r2, r1
 80105d2:	4283      	cmp	r3, r0
 80105d4:	6011      	str	r1, [r2, #0]
 80105d6:	d1e0      	bne.n	801059a <_free_r+0x22>
 80105d8:	6818      	ldr	r0, [r3, #0]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	6053      	str	r3, [r2, #4]
 80105de:	4408      	add	r0, r1
 80105e0:	6010      	str	r0, [r2, #0]
 80105e2:	e7da      	b.n	801059a <_free_r+0x22>
 80105e4:	d902      	bls.n	80105ec <_free_r+0x74>
 80105e6:	230c      	movs	r3, #12
 80105e8:	602b      	str	r3, [r5, #0]
 80105ea:	e7d6      	b.n	801059a <_free_r+0x22>
 80105ec:	6820      	ldr	r0, [r4, #0]
 80105ee:	1821      	adds	r1, r4, r0
 80105f0:	428b      	cmp	r3, r1
 80105f2:	bf04      	itt	eq
 80105f4:	6819      	ldreq	r1, [r3, #0]
 80105f6:	685b      	ldreq	r3, [r3, #4]
 80105f8:	6063      	str	r3, [r4, #4]
 80105fa:	bf04      	itt	eq
 80105fc:	1809      	addeq	r1, r1, r0
 80105fe:	6021      	streq	r1, [r4, #0]
 8010600:	6054      	str	r4, [r2, #4]
 8010602:	e7ca      	b.n	801059a <_free_r+0x22>
 8010604:	bd38      	pop	{r3, r4, r5, pc}
 8010606:	bf00      	nop
 8010608:	20005824 	.word	0x20005824

0801060c <_malloc_usable_size_r>:
 801060c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010610:	1f18      	subs	r0, r3, #4
 8010612:	2b00      	cmp	r3, #0
 8010614:	bfbc      	itt	lt
 8010616:	580b      	ldrlt	r3, [r1, r0]
 8010618:	18c0      	addlt	r0, r0, r3
 801061a:	4770      	bx	lr

0801061c <sqrt>:
 801061c:	b538      	push	{r3, r4, r5, lr}
 801061e:	ed2d 8b02 	vpush	{d8}
 8010622:	ec55 4b10 	vmov	r4, r5, d0
 8010626:	f000 f8cf 	bl	80107c8 <__ieee754_sqrt>
 801062a:	4622      	mov	r2, r4
 801062c:	462b      	mov	r3, r5
 801062e:	4620      	mov	r0, r4
 8010630:	4629      	mov	r1, r5
 8010632:	eeb0 8a40 	vmov.f32	s16, s0
 8010636:	eef0 8a60 	vmov.f32	s17, s1
 801063a:	f7f0 fa8f 	bl	8000b5c <__aeabi_dcmpun>
 801063e:	b990      	cbnz	r0, 8010666 <sqrt+0x4a>
 8010640:	2200      	movs	r2, #0
 8010642:	2300      	movs	r3, #0
 8010644:	4620      	mov	r0, r4
 8010646:	4629      	mov	r1, r5
 8010648:	f7f0 fa60 	bl	8000b0c <__aeabi_dcmplt>
 801064c:	b158      	cbz	r0, 8010666 <sqrt+0x4a>
 801064e:	f7ff fb6d 	bl	800fd2c <__errno>
 8010652:	2321      	movs	r3, #33	@ 0x21
 8010654:	6003      	str	r3, [r0, #0]
 8010656:	2200      	movs	r2, #0
 8010658:	2300      	movs	r3, #0
 801065a:	4610      	mov	r0, r2
 801065c:	4619      	mov	r1, r3
 801065e:	f7f0 f90d 	bl	800087c <__aeabi_ddiv>
 8010662:	ec41 0b18 	vmov	d8, r0, r1
 8010666:	eeb0 0a48 	vmov.f32	s0, s16
 801066a:	eef0 0a68 	vmov.f32	s1, s17
 801066e:	ecbd 8b02 	vpop	{d8}
 8010672:	bd38      	pop	{r3, r4, r5, pc}
 8010674:	0000      	movs	r0, r0
	...

08010678 <cos>:
 8010678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801067a:	ec53 2b10 	vmov	r2, r3, d0
 801067e:	4826      	ldr	r0, [pc, #152]	@ (8010718 <cos+0xa0>)
 8010680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010684:	4281      	cmp	r1, r0
 8010686:	d806      	bhi.n	8010696 <cos+0x1e>
 8010688:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010710 <cos+0x98>
 801068c:	b005      	add	sp, #20
 801068e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010692:	f000 bec9 	b.w	8011428 <__kernel_cos>
 8010696:	4821      	ldr	r0, [pc, #132]	@ (801071c <cos+0xa4>)
 8010698:	4281      	cmp	r1, r0
 801069a:	d908      	bls.n	80106ae <cos+0x36>
 801069c:	4610      	mov	r0, r2
 801069e:	4619      	mov	r1, r3
 80106a0:	f7ef fe0a 	bl	80002b8 <__aeabi_dsub>
 80106a4:	ec41 0b10 	vmov	d0, r0, r1
 80106a8:	b005      	add	sp, #20
 80106aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80106ae:	4668      	mov	r0, sp
 80106b0:	f000 f966 	bl	8010980 <__ieee754_rem_pio2>
 80106b4:	f000 0003 	and.w	r0, r0, #3
 80106b8:	2801      	cmp	r0, #1
 80106ba:	d00b      	beq.n	80106d4 <cos+0x5c>
 80106bc:	2802      	cmp	r0, #2
 80106be:	d015      	beq.n	80106ec <cos+0x74>
 80106c0:	b9d8      	cbnz	r0, 80106fa <cos+0x82>
 80106c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106c6:	ed9d 0b00 	vldr	d0, [sp]
 80106ca:	f000 fead 	bl	8011428 <__kernel_cos>
 80106ce:	ec51 0b10 	vmov	r0, r1, d0
 80106d2:	e7e7      	b.n	80106a4 <cos+0x2c>
 80106d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106d8:	ed9d 0b00 	vldr	d0, [sp]
 80106dc:	f000 ff6c 	bl	80115b8 <__kernel_sin>
 80106e0:	ec53 2b10 	vmov	r2, r3, d0
 80106e4:	4610      	mov	r0, r2
 80106e6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80106ea:	e7db      	b.n	80106a4 <cos+0x2c>
 80106ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106f0:	ed9d 0b00 	vldr	d0, [sp]
 80106f4:	f000 fe98 	bl	8011428 <__kernel_cos>
 80106f8:	e7f2      	b.n	80106e0 <cos+0x68>
 80106fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106fe:	ed9d 0b00 	vldr	d0, [sp]
 8010702:	2001      	movs	r0, #1
 8010704:	f000 ff58 	bl	80115b8 <__kernel_sin>
 8010708:	e7e1      	b.n	80106ce <cos+0x56>
 801070a:	bf00      	nop
 801070c:	f3af 8000 	nop.w
	...
 8010718:	3fe921fb 	.word	0x3fe921fb
 801071c:	7fefffff 	.word	0x7fefffff

08010720 <sin>:
 8010720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010722:	ec53 2b10 	vmov	r2, r3, d0
 8010726:	4826      	ldr	r0, [pc, #152]	@ (80107c0 <sin+0xa0>)
 8010728:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801072c:	4281      	cmp	r1, r0
 801072e:	d807      	bhi.n	8010740 <sin+0x20>
 8010730:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80107b8 <sin+0x98>
 8010734:	2000      	movs	r0, #0
 8010736:	b005      	add	sp, #20
 8010738:	f85d eb04 	ldr.w	lr, [sp], #4
 801073c:	f000 bf3c 	b.w	80115b8 <__kernel_sin>
 8010740:	4820      	ldr	r0, [pc, #128]	@ (80107c4 <sin+0xa4>)
 8010742:	4281      	cmp	r1, r0
 8010744:	d908      	bls.n	8010758 <sin+0x38>
 8010746:	4610      	mov	r0, r2
 8010748:	4619      	mov	r1, r3
 801074a:	f7ef fdb5 	bl	80002b8 <__aeabi_dsub>
 801074e:	ec41 0b10 	vmov	d0, r0, r1
 8010752:	b005      	add	sp, #20
 8010754:	f85d fb04 	ldr.w	pc, [sp], #4
 8010758:	4668      	mov	r0, sp
 801075a:	f000 f911 	bl	8010980 <__ieee754_rem_pio2>
 801075e:	f000 0003 	and.w	r0, r0, #3
 8010762:	2801      	cmp	r0, #1
 8010764:	d00c      	beq.n	8010780 <sin+0x60>
 8010766:	2802      	cmp	r0, #2
 8010768:	d011      	beq.n	801078e <sin+0x6e>
 801076a:	b9e8      	cbnz	r0, 80107a8 <sin+0x88>
 801076c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010770:	ed9d 0b00 	vldr	d0, [sp]
 8010774:	2001      	movs	r0, #1
 8010776:	f000 ff1f 	bl	80115b8 <__kernel_sin>
 801077a:	ec51 0b10 	vmov	r0, r1, d0
 801077e:	e7e6      	b.n	801074e <sin+0x2e>
 8010780:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010784:	ed9d 0b00 	vldr	d0, [sp]
 8010788:	f000 fe4e 	bl	8011428 <__kernel_cos>
 801078c:	e7f5      	b.n	801077a <sin+0x5a>
 801078e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010792:	ed9d 0b00 	vldr	d0, [sp]
 8010796:	2001      	movs	r0, #1
 8010798:	f000 ff0e 	bl	80115b8 <__kernel_sin>
 801079c:	ec53 2b10 	vmov	r2, r3, d0
 80107a0:	4610      	mov	r0, r2
 80107a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80107a6:	e7d2      	b.n	801074e <sin+0x2e>
 80107a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80107ac:	ed9d 0b00 	vldr	d0, [sp]
 80107b0:	f000 fe3a 	bl	8011428 <__kernel_cos>
 80107b4:	e7f2      	b.n	801079c <sin+0x7c>
 80107b6:	bf00      	nop
	...
 80107c0:	3fe921fb 	.word	0x3fe921fb
 80107c4:	7fefffff 	.word	0x7fefffff

080107c8 <__ieee754_sqrt>:
 80107c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	4a68      	ldr	r2, [pc, #416]	@ (8010970 <__ieee754_sqrt+0x1a8>)
 80107ce:	ec55 4b10 	vmov	r4, r5, d0
 80107d2:	43aa      	bics	r2, r5
 80107d4:	462b      	mov	r3, r5
 80107d6:	4621      	mov	r1, r4
 80107d8:	d110      	bne.n	80107fc <__ieee754_sqrt+0x34>
 80107da:	4622      	mov	r2, r4
 80107dc:	4620      	mov	r0, r4
 80107de:	4629      	mov	r1, r5
 80107e0:	f7ef ff22 	bl	8000628 <__aeabi_dmul>
 80107e4:	4602      	mov	r2, r0
 80107e6:	460b      	mov	r3, r1
 80107e8:	4620      	mov	r0, r4
 80107ea:	4629      	mov	r1, r5
 80107ec:	f7ef fd66 	bl	80002bc <__adddf3>
 80107f0:	4604      	mov	r4, r0
 80107f2:	460d      	mov	r5, r1
 80107f4:	ec45 4b10 	vmov	d0, r4, r5
 80107f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	dc0e      	bgt.n	801081e <__ieee754_sqrt+0x56>
 8010800:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010804:	4322      	orrs	r2, r4
 8010806:	d0f5      	beq.n	80107f4 <__ieee754_sqrt+0x2c>
 8010808:	b19d      	cbz	r5, 8010832 <__ieee754_sqrt+0x6a>
 801080a:	4622      	mov	r2, r4
 801080c:	4620      	mov	r0, r4
 801080e:	4629      	mov	r1, r5
 8010810:	f7ef fd52 	bl	80002b8 <__aeabi_dsub>
 8010814:	4602      	mov	r2, r0
 8010816:	460b      	mov	r3, r1
 8010818:	f7f0 f830 	bl	800087c <__aeabi_ddiv>
 801081c:	e7e8      	b.n	80107f0 <__ieee754_sqrt+0x28>
 801081e:	152a      	asrs	r2, r5, #20
 8010820:	d115      	bne.n	801084e <__ieee754_sqrt+0x86>
 8010822:	2000      	movs	r0, #0
 8010824:	e009      	b.n	801083a <__ieee754_sqrt+0x72>
 8010826:	0acb      	lsrs	r3, r1, #11
 8010828:	3a15      	subs	r2, #21
 801082a:	0549      	lsls	r1, r1, #21
 801082c:	2b00      	cmp	r3, #0
 801082e:	d0fa      	beq.n	8010826 <__ieee754_sqrt+0x5e>
 8010830:	e7f7      	b.n	8010822 <__ieee754_sqrt+0x5a>
 8010832:	462a      	mov	r2, r5
 8010834:	e7fa      	b.n	801082c <__ieee754_sqrt+0x64>
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	3001      	adds	r0, #1
 801083a:	02dc      	lsls	r4, r3, #11
 801083c:	d5fb      	bpl.n	8010836 <__ieee754_sqrt+0x6e>
 801083e:	1e44      	subs	r4, r0, #1
 8010840:	1b12      	subs	r2, r2, r4
 8010842:	f1c0 0420 	rsb	r4, r0, #32
 8010846:	fa21 f404 	lsr.w	r4, r1, r4
 801084a:	4323      	orrs	r3, r4
 801084c:	4081      	lsls	r1, r0
 801084e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010852:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801085a:	07d2      	lsls	r2, r2, #31
 801085c:	bf5c      	itt	pl
 801085e:	005b      	lslpl	r3, r3, #1
 8010860:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010864:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010868:	bf58      	it	pl
 801086a:	0049      	lslpl	r1, r1, #1
 801086c:	2600      	movs	r6, #0
 801086e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010872:	106d      	asrs	r5, r5, #1
 8010874:	0049      	lsls	r1, r1, #1
 8010876:	2016      	movs	r0, #22
 8010878:	4632      	mov	r2, r6
 801087a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801087e:	1917      	adds	r7, r2, r4
 8010880:	429f      	cmp	r7, r3
 8010882:	bfde      	ittt	le
 8010884:	193a      	addle	r2, r7, r4
 8010886:	1bdb      	suble	r3, r3, r7
 8010888:	1936      	addle	r6, r6, r4
 801088a:	0fcf      	lsrs	r7, r1, #31
 801088c:	3801      	subs	r0, #1
 801088e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010892:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010896:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801089a:	d1f0      	bne.n	801087e <__ieee754_sqrt+0xb6>
 801089c:	4604      	mov	r4, r0
 801089e:	2720      	movs	r7, #32
 80108a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80108a4:	429a      	cmp	r2, r3
 80108a6:	eb00 0e0c 	add.w	lr, r0, ip
 80108aa:	db02      	blt.n	80108b2 <__ieee754_sqrt+0xea>
 80108ac:	d113      	bne.n	80108d6 <__ieee754_sqrt+0x10e>
 80108ae:	458e      	cmp	lr, r1
 80108b0:	d811      	bhi.n	80108d6 <__ieee754_sqrt+0x10e>
 80108b2:	f1be 0f00 	cmp.w	lr, #0
 80108b6:	eb0e 000c 	add.w	r0, lr, ip
 80108ba:	da42      	bge.n	8010942 <__ieee754_sqrt+0x17a>
 80108bc:	2800      	cmp	r0, #0
 80108be:	db40      	blt.n	8010942 <__ieee754_sqrt+0x17a>
 80108c0:	f102 0801 	add.w	r8, r2, #1
 80108c4:	1a9b      	subs	r3, r3, r2
 80108c6:	458e      	cmp	lr, r1
 80108c8:	bf88      	it	hi
 80108ca:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80108ce:	eba1 010e 	sub.w	r1, r1, lr
 80108d2:	4464      	add	r4, ip
 80108d4:	4642      	mov	r2, r8
 80108d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80108da:	3f01      	subs	r7, #1
 80108dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80108e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80108e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80108e8:	d1dc      	bne.n	80108a4 <__ieee754_sqrt+0xdc>
 80108ea:	4319      	orrs	r1, r3
 80108ec:	d01b      	beq.n	8010926 <__ieee754_sqrt+0x15e>
 80108ee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010974 <__ieee754_sqrt+0x1ac>
 80108f2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010978 <__ieee754_sqrt+0x1b0>
 80108f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80108fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80108fe:	f7ef fcdb 	bl	80002b8 <__aeabi_dsub>
 8010902:	e9da 8900 	ldrd	r8, r9, [sl]
 8010906:	4602      	mov	r2, r0
 8010908:	460b      	mov	r3, r1
 801090a:	4640      	mov	r0, r8
 801090c:	4649      	mov	r1, r9
 801090e:	f7f0 f907 	bl	8000b20 <__aeabi_dcmple>
 8010912:	b140      	cbz	r0, 8010926 <__ieee754_sqrt+0x15e>
 8010914:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8010918:	e9da 0100 	ldrd	r0, r1, [sl]
 801091c:	e9db 2300 	ldrd	r2, r3, [fp]
 8010920:	d111      	bne.n	8010946 <__ieee754_sqrt+0x17e>
 8010922:	3601      	adds	r6, #1
 8010924:	463c      	mov	r4, r7
 8010926:	1072      	asrs	r2, r6, #1
 8010928:	0863      	lsrs	r3, r4, #1
 801092a:	07f1      	lsls	r1, r6, #31
 801092c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010930:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010934:	bf48      	it	mi
 8010936:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801093a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801093e:	4618      	mov	r0, r3
 8010940:	e756      	b.n	80107f0 <__ieee754_sqrt+0x28>
 8010942:	4690      	mov	r8, r2
 8010944:	e7be      	b.n	80108c4 <__ieee754_sqrt+0xfc>
 8010946:	f7ef fcb9 	bl	80002bc <__adddf3>
 801094a:	e9da 8900 	ldrd	r8, r9, [sl]
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	4640      	mov	r0, r8
 8010954:	4649      	mov	r1, r9
 8010956:	f7f0 f8d9 	bl	8000b0c <__aeabi_dcmplt>
 801095a:	b120      	cbz	r0, 8010966 <__ieee754_sqrt+0x19e>
 801095c:	1ca0      	adds	r0, r4, #2
 801095e:	bf08      	it	eq
 8010960:	3601      	addeq	r6, #1
 8010962:	3402      	adds	r4, #2
 8010964:	e7df      	b.n	8010926 <__ieee754_sqrt+0x15e>
 8010966:	1c63      	adds	r3, r4, #1
 8010968:	f023 0401 	bic.w	r4, r3, #1
 801096c:	e7db      	b.n	8010926 <__ieee754_sqrt+0x15e>
 801096e:	bf00      	nop
 8010970:	7ff00000 	.word	0x7ff00000
 8010974:	200000e0 	.word	0x200000e0
 8010978:	200000d8 	.word	0x200000d8
 801097c:	00000000 	.word	0x00000000

08010980 <__ieee754_rem_pio2>:
 8010980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	ec57 6b10 	vmov	r6, r7, d0
 8010988:	4bc5      	ldr	r3, [pc, #788]	@ (8010ca0 <__ieee754_rem_pio2+0x320>)
 801098a:	b08d      	sub	sp, #52	@ 0x34
 801098c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010990:	4598      	cmp	r8, r3
 8010992:	4604      	mov	r4, r0
 8010994:	9704      	str	r7, [sp, #16]
 8010996:	d807      	bhi.n	80109a8 <__ieee754_rem_pio2+0x28>
 8010998:	2200      	movs	r2, #0
 801099a:	2300      	movs	r3, #0
 801099c:	ed80 0b00 	vstr	d0, [r0]
 80109a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80109a4:	2500      	movs	r5, #0
 80109a6:	e028      	b.n	80109fa <__ieee754_rem_pio2+0x7a>
 80109a8:	4bbe      	ldr	r3, [pc, #760]	@ (8010ca4 <__ieee754_rem_pio2+0x324>)
 80109aa:	4598      	cmp	r8, r3
 80109ac:	d878      	bhi.n	8010aa0 <__ieee754_rem_pio2+0x120>
 80109ae:	9b04      	ldr	r3, [sp, #16]
 80109b0:	4dbd      	ldr	r5, [pc, #756]	@ (8010ca8 <__ieee754_rem_pio2+0x328>)
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	4630      	mov	r0, r6
 80109b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010c68 <__ieee754_rem_pio2+0x2e8>)
 80109b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109bc:	4639      	mov	r1, r7
 80109be:	dd38      	ble.n	8010a32 <__ieee754_rem_pio2+0xb2>
 80109c0:	f7ef fc7a 	bl	80002b8 <__aeabi_dsub>
 80109c4:	45a8      	cmp	r8, r5
 80109c6:	4606      	mov	r6, r0
 80109c8:	460f      	mov	r7, r1
 80109ca:	d01a      	beq.n	8010a02 <__ieee754_rem_pio2+0x82>
 80109cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010c70 <__ieee754_rem_pio2+0x2f0>)
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	f7ef fc71 	bl	80002b8 <__aeabi_dsub>
 80109d6:	4602      	mov	r2, r0
 80109d8:	460b      	mov	r3, r1
 80109da:	4680      	mov	r8, r0
 80109dc:	4689      	mov	r9, r1
 80109de:	4630      	mov	r0, r6
 80109e0:	4639      	mov	r1, r7
 80109e2:	f7ef fc69 	bl	80002b8 <__aeabi_dsub>
 80109e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010c70 <__ieee754_rem_pio2+0x2f0>)
 80109e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ec:	f7ef fc64 	bl	80002b8 <__aeabi_dsub>
 80109f0:	e9c4 8900 	strd	r8, r9, [r4]
 80109f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80109f8:	2501      	movs	r5, #1
 80109fa:	4628      	mov	r0, r5
 80109fc:	b00d      	add	sp, #52	@ 0x34
 80109fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a02:	a39d      	add	r3, pc, #628	@ (adr r3, 8010c78 <__ieee754_rem_pio2+0x2f8>)
 8010a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a08:	f7ef fc56 	bl	80002b8 <__aeabi_dsub>
 8010a0c:	a39c      	add	r3, pc, #624	@ (adr r3, 8010c80 <__ieee754_rem_pio2+0x300>)
 8010a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a12:	4606      	mov	r6, r0
 8010a14:	460f      	mov	r7, r1
 8010a16:	f7ef fc4f 	bl	80002b8 <__aeabi_dsub>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	4680      	mov	r8, r0
 8010a20:	4689      	mov	r9, r1
 8010a22:	4630      	mov	r0, r6
 8010a24:	4639      	mov	r1, r7
 8010a26:	f7ef fc47 	bl	80002b8 <__aeabi_dsub>
 8010a2a:	a395      	add	r3, pc, #596	@ (adr r3, 8010c80 <__ieee754_rem_pio2+0x300>)
 8010a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a30:	e7dc      	b.n	80109ec <__ieee754_rem_pio2+0x6c>
 8010a32:	f7ef fc43 	bl	80002bc <__adddf3>
 8010a36:	45a8      	cmp	r8, r5
 8010a38:	4606      	mov	r6, r0
 8010a3a:	460f      	mov	r7, r1
 8010a3c:	d018      	beq.n	8010a70 <__ieee754_rem_pio2+0xf0>
 8010a3e:	a38c      	add	r3, pc, #560	@ (adr r3, 8010c70 <__ieee754_rem_pio2+0x2f0>)
 8010a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a44:	f7ef fc3a 	bl	80002bc <__adddf3>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	4680      	mov	r8, r0
 8010a4e:	4689      	mov	r9, r1
 8010a50:	4630      	mov	r0, r6
 8010a52:	4639      	mov	r1, r7
 8010a54:	f7ef fc30 	bl	80002b8 <__aeabi_dsub>
 8010a58:	a385      	add	r3, pc, #532	@ (adr r3, 8010c70 <__ieee754_rem_pio2+0x2f0>)
 8010a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5e:	f7ef fc2d 	bl	80002bc <__adddf3>
 8010a62:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010a66:	e9c4 8900 	strd	r8, r9, [r4]
 8010a6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010a6e:	e7c4      	b.n	80109fa <__ieee754_rem_pio2+0x7a>
 8010a70:	a381      	add	r3, pc, #516	@ (adr r3, 8010c78 <__ieee754_rem_pio2+0x2f8>)
 8010a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a76:	f7ef fc21 	bl	80002bc <__adddf3>
 8010a7a:	a381      	add	r3, pc, #516	@ (adr r3, 8010c80 <__ieee754_rem_pio2+0x300>)
 8010a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a80:	4606      	mov	r6, r0
 8010a82:	460f      	mov	r7, r1
 8010a84:	f7ef fc1a 	bl	80002bc <__adddf3>
 8010a88:	4602      	mov	r2, r0
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	4680      	mov	r8, r0
 8010a8e:	4689      	mov	r9, r1
 8010a90:	4630      	mov	r0, r6
 8010a92:	4639      	mov	r1, r7
 8010a94:	f7ef fc10 	bl	80002b8 <__aeabi_dsub>
 8010a98:	a379      	add	r3, pc, #484	@ (adr r3, 8010c80 <__ieee754_rem_pio2+0x300>)
 8010a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9e:	e7de      	b.n	8010a5e <__ieee754_rem_pio2+0xde>
 8010aa0:	4b82      	ldr	r3, [pc, #520]	@ (8010cac <__ieee754_rem_pio2+0x32c>)
 8010aa2:	4598      	cmp	r8, r3
 8010aa4:	f200 80d1 	bhi.w	8010c4a <__ieee754_rem_pio2+0x2ca>
 8010aa8:	f000 fe40 	bl	801172c <fabs>
 8010aac:	ec57 6b10 	vmov	r6, r7, d0
 8010ab0:	a375      	add	r3, pc, #468	@ (adr r3, 8010c88 <__ieee754_rem_pio2+0x308>)
 8010ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab6:	4630      	mov	r0, r6
 8010ab8:	4639      	mov	r1, r7
 8010aba:	f7ef fdb5 	bl	8000628 <__aeabi_dmul>
 8010abe:	4b7c      	ldr	r3, [pc, #496]	@ (8010cb0 <__ieee754_rem_pio2+0x330>)
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f7ef fbfb 	bl	80002bc <__adddf3>
 8010ac6:	f7f0 f85f 	bl	8000b88 <__aeabi_d2iz>
 8010aca:	4605      	mov	r5, r0
 8010acc:	f7ef fd42 	bl	8000554 <__aeabi_i2d>
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	460b      	mov	r3, r1
 8010ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ad8:	a363      	add	r3, pc, #396	@ (adr r3, 8010c68 <__ieee754_rem_pio2+0x2e8>)
 8010ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ade:	f7ef fda3 	bl	8000628 <__aeabi_dmul>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	4639      	mov	r1, r7
 8010aea:	f7ef fbe5 	bl	80002b8 <__aeabi_dsub>
 8010aee:	a360      	add	r3, pc, #384	@ (adr r3, 8010c70 <__ieee754_rem_pio2+0x2f0>)
 8010af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af4:	4682      	mov	sl, r0
 8010af6:	468b      	mov	fp, r1
 8010af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010afc:	f7ef fd94 	bl	8000628 <__aeabi_dmul>
 8010b00:	2d1f      	cmp	r5, #31
 8010b02:	4606      	mov	r6, r0
 8010b04:	460f      	mov	r7, r1
 8010b06:	dc0c      	bgt.n	8010b22 <__ieee754_rem_pio2+0x1a2>
 8010b08:	4b6a      	ldr	r3, [pc, #424]	@ (8010cb4 <__ieee754_rem_pio2+0x334>)
 8010b0a:	1e6a      	subs	r2, r5, #1
 8010b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b10:	4543      	cmp	r3, r8
 8010b12:	d006      	beq.n	8010b22 <__ieee754_rem_pio2+0x1a2>
 8010b14:	4632      	mov	r2, r6
 8010b16:	463b      	mov	r3, r7
 8010b18:	4650      	mov	r0, sl
 8010b1a:	4659      	mov	r1, fp
 8010b1c:	f7ef fbcc 	bl	80002b8 <__aeabi_dsub>
 8010b20:	e00e      	b.n	8010b40 <__ieee754_rem_pio2+0x1c0>
 8010b22:	463b      	mov	r3, r7
 8010b24:	4632      	mov	r2, r6
 8010b26:	4650      	mov	r0, sl
 8010b28:	4659      	mov	r1, fp
 8010b2a:	f7ef fbc5 	bl	80002b8 <__aeabi_dsub>
 8010b2e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010b32:	9305      	str	r3, [sp, #20]
 8010b34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b38:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010b3c:	2b10      	cmp	r3, #16
 8010b3e:	dc02      	bgt.n	8010b46 <__ieee754_rem_pio2+0x1c6>
 8010b40:	e9c4 0100 	strd	r0, r1, [r4]
 8010b44:	e039      	b.n	8010bba <__ieee754_rem_pio2+0x23a>
 8010b46:	a34c      	add	r3, pc, #304	@ (adr r3, 8010c78 <__ieee754_rem_pio2+0x2f8>)
 8010b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b50:	f7ef fd6a 	bl	8000628 <__aeabi_dmul>
 8010b54:	4606      	mov	r6, r0
 8010b56:	460f      	mov	r7, r1
 8010b58:	4602      	mov	r2, r0
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	4650      	mov	r0, sl
 8010b5e:	4659      	mov	r1, fp
 8010b60:	f7ef fbaa 	bl	80002b8 <__aeabi_dsub>
 8010b64:	4602      	mov	r2, r0
 8010b66:	460b      	mov	r3, r1
 8010b68:	4680      	mov	r8, r0
 8010b6a:	4689      	mov	r9, r1
 8010b6c:	4650      	mov	r0, sl
 8010b6e:	4659      	mov	r1, fp
 8010b70:	f7ef fba2 	bl	80002b8 <__aeabi_dsub>
 8010b74:	4632      	mov	r2, r6
 8010b76:	463b      	mov	r3, r7
 8010b78:	f7ef fb9e 	bl	80002b8 <__aeabi_dsub>
 8010b7c:	a340      	add	r3, pc, #256	@ (adr r3, 8010c80 <__ieee754_rem_pio2+0x300>)
 8010b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b82:	4606      	mov	r6, r0
 8010b84:	460f      	mov	r7, r1
 8010b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b8a:	f7ef fd4d 	bl	8000628 <__aeabi_dmul>
 8010b8e:	4632      	mov	r2, r6
 8010b90:	463b      	mov	r3, r7
 8010b92:	f7ef fb91 	bl	80002b8 <__aeabi_dsub>
 8010b96:	4602      	mov	r2, r0
 8010b98:	460b      	mov	r3, r1
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	460f      	mov	r7, r1
 8010b9e:	4640      	mov	r0, r8
 8010ba0:	4649      	mov	r1, r9
 8010ba2:	f7ef fb89 	bl	80002b8 <__aeabi_dsub>
 8010ba6:	9a05      	ldr	r2, [sp, #20]
 8010ba8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	2b31      	cmp	r3, #49	@ 0x31
 8010bb0:	dc20      	bgt.n	8010bf4 <__ieee754_rem_pio2+0x274>
 8010bb2:	e9c4 0100 	strd	r0, r1, [r4]
 8010bb6:	46c2      	mov	sl, r8
 8010bb8:	46cb      	mov	fp, r9
 8010bba:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010bbe:	4650      	mov	r0, sl
 8010bc0:	4642      	mov	r2, r8
 8010bc2:	464b      	mov	r3, r9
 8010bc4:	4659      	mov	r1, fp
 8010bc6:	f7ef fb77 	bl	80002b8 <__aeabi_dsub>
 8010bca:	463b      	mov	r3, r7
 8010bcc:	4632      	mov	r2, r6
 8010bce:	f7ef fb73 	bl	80002b8 <__aeabi_dsub>
 8010bd2:	9b04      	ldr	r3, [sp, #16]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010bda:	f6bf af0e 	bge.w	80109fa <__ieee754_rem_pio2+0x7a>
 8010bde:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010be2:	6063      	str	r3, [r4, #4]
 8010be4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010be8:	f8c4 8000 	str.w	r8, [r4]
 8010bec:	60a0      	str	r0, [r4, #8]
 8010bee:	60e3      	str	r3, [r4, #12]
 8010bf0:	426d      	negs	r5, r5
 8010bf2:	e702      	b.n	80109fa <__ieee754_rem_pio2+0x7a>
 8010bf4:	a326      	add	r3, pc, #152	@ (adr r3, 8010c90 <__ieee754_rem_pio2+0x310>)
 8010bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bfe:	f7ef fd13 	bl	8000628 <__aeabi_dmul>
 8010c02:	4606      	mov	r6, r0
 8010c04:	460f      	mov	r7, r1
 8010c06:	4602      	mov	r2, r0
 8010c08:	460b      	mov	r3, r1
 8010c0a:	4640      	mov	r0, r8
 8010c0c:	4649      	mov	r1, r9
 8010c0e:	f7ef fb53 	bl	80002b8 <__aeabi_dsub>
 8010c12:	4602      	mov	r2, r0
 8010c14:	460b      	mov	r3, r1
 8010c16:	4682      	mov	sl, r0
 8010c18:	468b      	mov	fp, r1
 8010c1a:	4640      	mov	r0, r8
 8010c1c:	4649      	mov	r1, r9
 8010c1e:	f7ef fb4b 	bl	80002b8 <__aeabi_dsub>
 8010c22:	4632      	mov	r2, r6
 8010c24:	463b      	mov	r3, r7
 8010c26:	f7ef fb47 	bl	80002b8 <__aeabi_dsub>
 8010c2a:	a31b      	add	r3, pc, #108	@ (adr r3, 8010c98 <__ieee754_rem_pio2+0x318>)
 8010c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c30:	4606      	mov	r6, r0
 8010c32:	460f      	mov	r7, r1
 8010c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c38:	f7ef fcf6 	bl	8000628 <__aeabi_dmul>
 8010c3c:	4632      	mov	r2, r6
 8010c3e:	463b      	mov	r3, r7
 8010c40:	f7ef fb3a 	bl	80002b8 <__aeabi_dsub>
 8010c44:	4606      	mov	r6, r0
 8010c46:	460f      	mov	r7, r1
 8010c48:	e764      	b.n	8010b14 <__ieee754_rem_pio2+0x194>
 8010c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8010cb8 <__ieee754_rem_pio2+0x338>)
 8010c4c:	4598      	cmp	r8, r3
 8010c4e:	d935      	bls.n	8010cbc <__ieee754_rem_pio2+0x33c>
 8010c50:	4632      	mov	r2, r6
 8010c52:	463b      	mov	r3, r7
 8010c54:	4630      	mov	r0, r6
 8010c56:	4639      	mov	r1, r7
 8010c58:	f7ef fb2e 	bl	80002b8 <__aeabi_dsub>
 8010c5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c60:	e9c4 0100 	strd	r0, r1, [r4]
 8010c64:	e69e      	b.n	80109a4 <__ieee754_rem_pio2+0x24>
 8010c66:	bf00      	nop
 8010c68:	54400000 	.word	0x54400000
 8010c6c:	3ff921fb 	.word	0x3ff921fb
 8010c70:	1a626331 	.word	0x1a626331
 8010c74:	3dd0b461 	.word	0x3dd0b461
 8010c78:	1a600000 	.word	0x1a600000
 8010c7c:	3dd0b461 	.word	0x3dd0b461
 8010c80:	2e037073 	.word	0x2e037073
 8010c84:	3ba3198a 	.word	0x3ba3198a
 8010c88:	6dc9c883 	.word	0x6dc9c883
 8010c8c:	3fe45f30 	.word	0x3fe45f30
 8010c90:	2e000000 	.word	0x2e000000
 8010c94:	3ba3198a 	.word	0x3ba3198a
 8010c98:	252049c1 	.word	0x252049c1
 8010c9c:	397b839a 	.word	0x397b839a
 8010ca0:	3fe921fb 	.word	0x3fe921fb
 8010ca4:	4002d97b 	.word	0x4002d97b
 8010ca8:	3ff921fb 	.word	0x3ff921fb
 8010cac:	413921fb 	.word	0x413921fb
 8010cb0:	3fe00000 	.word	0x3fe00000
 8010cb4:	0801480c 	.word	0x0801480c
 8010cb8:	7fefffff 	.word	0x7fefffff
 8010cbc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010cc0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010cc4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010cc8:	4630      	mov	r0, r6
 8010cca:	460f      	mov	r7, r1
 8010ccc:	f7ef ff5c 	bl	8000b88 <__aeabi_d2iz>
 8010cd0:	f7ef fc40 	bl	8000554 <__aeabi_i2d>
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	4630      	mov	r0, r6
 8010cda:	4639      	mov	r1, r7
 8010cdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010ce0:	f7ef faea 	bl	80002b8 <__aeabi_dsub>
 8010ce4:	4b22      	ldr	r3, [pc, #136]	@ (8010d70 <__ieee754_rem_pio2+0x3f0>)
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	f7ef fc9e 	bl	8000628 <__aeabi_dmul>
 8010cec:	460f      	mov	r7, r1
 8010cee:	4606      	mov	r6, r0
 8010cf0:	f7ef ff4a 	bl	8000b88 <__aeabi_d2iz>
 8010cf4:	f7ef fc2e 	bl	8000554 <__aeabi_i2d>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	4639      	mov	r1, r7
 8010d00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d04:	f7ef fad8 	bl	80002b8 <__aeabi_dsub>
 8010d08:	4b19      	ldr	r3, [pc, #100]	@ (8010d70 <__ieee754_rem_pio2+0x3f0>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f7ef fc8c 	bl	8000628 <__aeabi_dmul>
 8010d10:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010d14:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010d18:	f04f 0803 	mov.w	r8, #3
 8010d1c:	2600      	movs	r6, #0
 8010d1e:	2700      	movs	r7, #0
 8010d20:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010d24:	4632      	mov	r2, r6
 8010d26:	463b      	mov	r3, r7
 8010d28:	46c2      	mov	sl, r8
 8010d2a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010d2e:	f7ef fee3 	bl	8000af8 <__aeabi_dcmpeq>
 8010d32:	2800      	cmp	r0, #0
 8010d34:	d1f4      	bne.n	8010d20 <__ieee754_rem_pio2+0x3a0>
 8010d36:	4b0f      	ldr	r3, [pc, #60]	@ (8010d74 <__ieee754_rem_pio2+0x3f4>)
 8010d38:	9301      	str	r3, [sp, #4]
 8010d3a:	2302      	movs	r3, #2
 8010d3c:	9300      	str	r3, [sp, #0]
 8010d3e:	462a      	mov	r2, r5
 8010d40:	4653      	mov	r3, sl
 8010d42:	4621      	mov	r1, r4
 8010d44:	a806      	add	r0, sp, #24
 8010d46:	f000 f817 	bl	8010d78 <__kernel_rem_pio2>
 8010d4a:	9b04      	ldr	r3, [sp, #16]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	4605      	mov	r5, r0
 8010d50:	f6bf ae53 	bge.w	80109fa <__ieee754_rem_pio2+0x7a>
 8010d54:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010d58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d5c:	e9c4 2300 	strd	r2, r3, [r4]
 8010d60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010d64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010d6c:	e740      	b.n	8010bf0 <__ieee754_rem_pio2+0x270>
 8010d6e:	bf00      	nop
 8010d70:	41700000 	.word	0x41700000
 8010d74:	0801488c 	.word	0x0801488c

08010d78 <__kernel_rem_pio2>:
 8010d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d7c:	ed2d 8b02 	vpush	{d8}
 8010d80:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010d84:	f112 0f14 	cmn.w	r2, #20
 8010d88:	9306      	str	r3, [sp, #24]
 8010d8a:	9104      	str	r1, [sp, #16]
 8010d8c:	4bbe      	ldr	r3, [pc, #760]	@ (8011088 <__kernel_rem_pio2+0x310>)
 8010d8e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010d90:	9008      	str	r0, [sp, #32]
 8010d92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d96:	9300      	str	r3, [sp, #0]
 8010d98:	9b06      	ldr	r3, [sp, #24]
 8010d9a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010d9e:	bfa8      	it	ge
 8010da0:	1ed4      	subge	r4, r2, #3
 8010da2:	9305      	str	r3, [sp, #20]
 8010da4:	bfb2      	itee	lt
 8010da6:	2400      	movlt	r4, #0
 8010da8:	2318      	movge	r3, #24
 8010daa:	fb94 f4f3 	sdivge	r4, r4, r3
 8010dae:	f06f 0317 	mvn.w	r3, #23
 8010db2:	fb04 3303 	mla	r3, r4, r3, r3
 8010db6:	eb03 0b02 	add.w	fp, r3, r2
 8010dba:	9b00      	ldr	r3, [sp, #0]
 8010dbc:	9a05      	ldr	r2, [sp, #20]
 8010dbe:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011078 <__kernel_rem_pio2+0x300>
 8010dc2:	eb03 0802 	add.w	r8, r3, r2
 8010dc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010dc8:	1aa7      	subs	r7, r4, r2
 8010dca:	ae20      	add	r6, sp, #128	@ 0x80
 8010dcc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010dd0:	2500      	movs	r5, #0
 8010dd2:	4545      	cmp	r5, r8
 8010dd4:	dd13      	ble.n	8010dfe <__kernel_rem_pio2+0x86>
 8010dd6:	9b06      	ldr	r3, [sp, #24]
 8010dd8:	aa20      	add	r2, sp, #128	@ 0x80
 8010dda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010dde:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010de2:	f04f 0800 	mov.w	r8, #0
 8010de6:	9b00      	ldr	r3, [sp, #0]
 8010de8:	4598      	cmp	r8, r3
 8010dea:	dc31      	bgt.n	8010e50 <__kernel_rem_pio2+0xd8>
 8010dec:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011078 <__kernel_rem_pio2+0x300>
 8010df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010df4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010df8:	462f      	mov	r7, r5
 8010dfa:	2600      	movs	r6, #0
 8010dfc:	e01b      	b.n	8010e36 <__kernel_rem_pio2+0xbe>
 8010dfe:	42ef      	cmn	r7, r5
 8010e00:	d407      	bmi.n	8010e12 <__kernel_rem_pio2+0x9a>
 8010e02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010e06:	f7ef fba5 	bl	8000554 <__aeabi_i2d>
 8010e0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010e0e:	3501      	adds	r5, #1
 8010e10:	e7df      	b.n	8010dd2 <__kernel_rem_pio2+0x5a>
 8010e12:	ec51 0b18 	vmov	r0, r1, d8
 8010e16:	e7f8      	b.n	8010e0a <__kernel_rem_pio2+0x92>
 8010e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010e20:	f7ef fc02 	bl	8000628 <__aeabi_dmul>
 8010e24:	4602      	mov	r2, r0
 8010e26:	460b      	mov	r3, r1
 8010e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e2c:	f7ef fa46 	bl	80002bc <__adddf3>
 8010e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e34:	3601      	adds	r6, #1
 8010e36:	9b05      	ldr	r3, [sp, #20]
 8010e38:	429e      	cmp	r6, r3
 8010e3a:	f1a7 0708 	sub.w	r7, r7, #8
 8010e3e:	ddeb      	ble.n	8010e18 <__kernel_rem_pio2+0xa0>
 8010e40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e44:	f108 0801 	add.w	r8, r8, #1
 8010e48:	ecaa 7b02 	vstmia	sl!, {d7}
 8010e4c:	3508      	adds	r5, #8
 8010e4e:	e7ca      	b.n	8010de6 <__kernel_rem_pio2+0x6e>
 8010e50:	9b00      	ldr	r3, [sp, #0]
 8010e52:	f8dd 8000 	ldr.w	r8, [sp]
 8010e56:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e5e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010e60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e66:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8010e6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e6c:	ab98      	add	r3, sp, #608	@ 0x260
 8010e6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010e72:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8010e76:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e7a:	ac0c      	add	r4, sp, #48	@ 0x30
 8010e7c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010e7e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8010e82:	46a1      	mov	r9, r4
 8010e84:	46c2      	mov	sl, r8
 8010e86:	f1ba 0f00 	cmp.w	sl, #0
 8010e8a:	f1a5 0508 	sub.w	r5, r5, #8
 8010e8e:	dc77      	bgt.n	8010f80 <__kernel_rem_pio2+0x208>
 8010e90:	4658      	mov	r0, fp
 8010e92:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010e96:	f000 fc53 	bl	8011740 <scalbn>
 8010e9a:	ec57 6b10 	vmov	r6, r7, d0
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	4639      	mov	r1, r7
 8010ea8:	f7ef fbbe 	bl	8000628 <__aeabi_dmul>
 8010eac:	ec41 0b10 	vmov	d0, r0, r1
 8010eb0:	f000 fcc6 	bl	8011840 <floor>
 8010eb4:	4b75      	ldr	r3, [pc, #468]	@ (801108c <__kernel_rem_pio2+0x314>)
 8010eb6:	ec51 0b10 	vmov	r0, r1, d0
 8010eba:	2200      	movs	r2, #0
 8010ebc:	f7ef fbb4 	bl	8000628 <__aeabi_dmul>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	4639      	mov	r1, r7
 8010ec8:	f7ef f9f6 	bl	80002b8 <__aeabi_dsub>
 8010ecc:	460f      	mov	r7, r1
 8010ece:	4606      	mov	r6, r0
 8010ed0:	f7ef fe5a 	bl	8000b88 <__aeabi_d2iz>
 8010ed4:	9002      	str	r0, [sp, #8]
 8010ed6:	f7ef fb3d 	bl	8000554 <__aeabi_i2d>
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	4630      	mov	r0, r6
 8010ee0:	4639      	mov	r1, r7
 8010ee2:	f7ef f9e9 	bl	80002b8 <__aeabi_dsub>
 8010ee6:	f1bb 0f00 	cmp.w	fp, #0
 8010eea:	4606      	mov	r6, r0
 8010eec:	460f      	mov	r7, r1
 8010eee:	dd6c      	ble.n	8010fca <__kernel_rem_pio2+0x252>
 8010ef0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8010ef4:	ab0c      	add	r3, sp, #48	@ 0x30
 8010ef6:	9d02      	ldr	r5, [sp, #8]
 8010ef8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010efc:	f1cb 0018 	rsb	r0, fp, #24
 8010f00:	fa43 f200 	asr.w	r2, r3, r0
 8010f04:	4415      	add	r5, r2
 8010f06:	4082      	lsls	r2, r0
 8010f08:	1a9b      	subs	r3, r3, r2
 8010f0a:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f0c:	9502      	str	r5, [sp, #8]
 8010f0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010f12:	f1cb 0217 	rsb	r2, fp, #23
 8010f16:	fa43 f902 	asr.w	r9, r3, r2
 8010f1a:	f1b9 0f00 	cmp.w	r9, #0
 8010f1e:	dd64      	ble.n	8010fea <__kernel_rem_pio2+0x272>
 8010f20:	9b02      	ldr	r3, [sp, #8]
 8010f22:	2200      	movs	r2, #0
 8010f24:	3301      	adds	r3, #1
 8010f26:	9302      	str	r3, [sp, #8]
 8010f28:	4615      	mov	r5, r2
 8010f2a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010f2e:	4590      	cmp	r8, r2
 8010f30:	f300 80b8 	bgt.w	80110a4 <__kernel_rem_pio2+0x32c>
 8010f34:	f1bb 0f00 	cmp.w	fp, #0
 8010f38:	dd07      	ble.n	8010f4a <__kernel_rem_pio2+0x1d2>
 8010f3a:	f1bb 0f01 	cmp.w	fp, #1
 8010f3e:	f000 80bf 	beq.w	80110c0 <__kernel_rem_pio2+0x348>
 8010f42:	f1bb 0f02 	cmp.w	fp, #2
 8010f46:	f000 80c6 	beq.w	80110d6 <__kernel_rem_pio2+0x35e>
 8010f4a:	f1b9 0f02 	cmp.w	r9, #2
 8010f4e:	d14c      	bne.n	8010fea <__kernel_rem_pio2+0x272>
 8010f50:	4632      	mov	r2, r6
 8010f52:	463b      	mov	r3, r7
 8010f54:	494e      	ldr	r1, [pc, #312]	@ (8011090 <__kernel_rem_pio2+0x318>)
 8010f56:	2000      	movs	r0, #0
 8010f58:	f7ef f9ae 	bl	80002b8 <__aeabi_dsub>
 8010f5c:	4606      	mov	r6, r0
 8010f5e:	460f      	mov	r7, r1
 8010f60:	2d00      	cmp	r5, #0
 8010f62:	d042      	beq.n	8010fea <__kernel_rem_pio2+0x272>
 8010f64:	4658      	mov	r0, fp
 8010f66:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011080 <__kernel_rem_pio2+0x308>
 8010f6a:	f000 fbe9 	bl	8011740 <scalbn>
 8010f6e:	4630      	mov	r0, r6
 8010f70:	4639      	mov	r1, r7
 8010f72:	ec53 2b10 	vmov	r2, r3, d0
 8010f76:	f7ef f99f 	bl	80002b8 <__aeabi_dsub>
 8010f7a:	4606      	mov	r6, r0
 8010f7c:	460f      	mov	r7, r1
 8010f7e:	e034      	b.n	8010fea <__kernel_rem_pio2+0x272>
 8010f80:	4b44      	ldr	r3, [pc, #272]	@ (8011094 <__kernel_rem_pio2+0x31c>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f88:	f7ef fb4e 	bl	8000628 <__aeabi_dmul>
 8010f8c:	f7ef fdfc 	bl	8000b88 <__aeabi_d2iz>
 8010f90:	f7ef fae0 	bl	8000554 <__aeabi_i2d>
 8010f94:	4b40      	ldr	r3, [pc, #256]	@ (8011098 <__kernel_rem_pio2+0x320>)
 8010f96:	2200      	movs	r2, #0
 8010f98:	4606      	mov	r6, r0
 8010f9a:	460f      	mov	r7, r1
 8010f9c:	f7ef fb44 	bl	8000628 <__aeabi_dmul>
 8010fa0:	4602      	mov	r2, r0
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fa8:	f7ef f986 	bl	80002b8 <__aeabi_dsub>
 8010fac:	f7ef fdec 	bl	8000b88 <__aeabi_d2iz>
 8010fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010fb4:	f849 0b04 	str.w	r0, [r9], #4
 8010fb8:	4639      	mov	r1, r7
 8010fba:	4630      	mov	r0, r6
 8010fbc:	f7ef f97e 	bl	80002bc <__adddf3>
 8010fc0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8010fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fc8:	e75d      	b.n	8010e86 <__kernel_rem_pio2+0x10e>
 8010fca:	d107      	bne.n	8010fdc <__kernel_rem_pio2+0x264>
 8010fcc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8010fd0:	aa0c      	add	r2, sp, #48	@ 0x30
 8010fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fd6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8010fda:	e79e      	b.n	8010f1a <__kernel_rem_pio2+0x1a2>
 8010fdc:	4b2f      	ldr	r3, [pc, #188]	@ (801109c <__kernel_rem_pio2+0x324>)
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f7ef fda8 	bl	8000b34 <__aeabi_dcmpge>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	d143      	bne.n	8011070 <__kernel_rem_pio2+0x2f8>
 8010fe8:	4681      	mov	r9, r0
 8010fea:	2200      	movs	r2, #0
 8010fec:	2300      	movs	r3, #0
 8010fee:	4630      	mov	r0, r6
 8010ff0:	4639      	mov	r1, r7
 8010ff2:	f7ef fd81 	bl	8000af8 <__aeabi_dcmpeq>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	f000 80bf 	beq.w	801117a <__kernel_rem_pio2+0x402>
 8010ffc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011000:	2200      	movs	r2, #0
 8011002:	9900      	ldr	r1, [sp, #0]
 8011004:	428b      	cmp	r3, r1
 8011006:	da6e      	bge.n	80110e6 <__kernel_rem_pio2+0x36e>
 8011008:	2a00      	cmp	r2, #0
 801100a:	f000 8089 	beq.w	8011120 <__kernel_rem_pio2+0x3a8>
 801100e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011012:	ab0c      	add	r3, sp, #48	@ 0x30
 8011014:	f1ab 0b18 	sub.w	fp, fp, #24
 8011018:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d0f6      	beq.n	801100e <__kernel_rem_pio2+0x296>
 8011020:	4658      	mov	r0, fp
 8011022:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011080 <__kernel_rem_pio2+0x308>
 8011026:	f000 fb8b 	bl	8011740 <scalbn>
 801102a:	f108 0301 	add.w	r3, r8, #1
 801102e:	00da      	lsls	r2, r3, #3
 8011030:	9205      	str	r2, [sp, #20]
 8011032:	ec55 4b10 	vmov	r4, r5, d0
 8011036:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011038:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8011094 <__kernel_rem_pio2+0x31c>
 801103c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011040:	4646      	mov	r6, r8
 8011042:	f04f 0a00 	mov.w	sl, #0
 8011046:	2e00      	cmp	r6, #0
 8011048:	f280 80cf 	bge.w	80111ea <__kernel_rem_pio2+0x472>
 801104c:	4644      	mov	r4, r8
 801104e:	2c00      	cmp	r4, #0
 8011050:	f2c0 80fd 	blt.w	801124e <__kernel_rem_pio2+0x4d6>
 8011054:	4b12      	ldr	r3, [pc, #72]	@ (80110a0 <__kernel_rem_pio2+0x328>)
 8011056:	461f      	mov	r7, r3
 8011058:	ab70      	add	r3, sp, #448	@ 0x1c0
 801105a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801105e:	9306      	str	r3, [sp, #24]
 8011060:	f04f 0a00 	mov.w	sl, #0
 8011064:	f04f 0b00 	mov.w	fp, #0
 8011068:	2600      	movs	r6, #0
 801106a:	eba8 0504 	sub.w	r5, r8, r4
 801106e:	e0e2      	b.n	8011236 <__kernel_rem_pio2+0x4be>
 8011070:	f04f 0902 	mov.w	r9, #2
 8011074:	e754      	b.n	8010f20 <__kernel_rem_pio2+0x1a8>
 8011076:	bf00      	nop
	...
 8011084:	3ff00000 	.word	0x3ff00000
 8011088:	080149d8 	.word	0x080149d8
 801108c:	40200000 	.word	0x40200000
 8011090:	3ff00000 	.word	0x3ff00000
 8011094:	3e700000 	.word	0x3e700000
 8011098:	41700000 	.word	0x41700000
 801109c:	3fe00000 	.word	0x3fe00000
 80110a0:	08014998 	.word	0x08014998
 80110a4:	f854 3b04 	ldr.w	r3, [r4], #4
 80110a8:	b945      	cbnz	r5, 80110bc <__kernel_rem_pio2+0x344>
 80110aa:	b123      	cbz	r3, 80110b6 <__kernel_rem_pio2+0x33e>
 80110ac:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80110b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80110b4:	2301      	movs	r3, #1
 80110b6:	3201      	adds	r2, #1
 80110b8:	461d      	mov	r5, r3
 80110ba:	e738      	b.n	8010f2e <__kernel_rem_pio2+0x1b6>
 80110bc:	1acb      	subs	r3, r1, r3
 80110be:	e7f7      	b.n	80110b0 <__kernel_rem_pio2+0x338>
 80110c0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80110c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80110c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80110ce:	a90c      	add	r1, sp, #48	@ 0x30
 80110d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80110d4:	e739      	b.n	8010f4a <__kernel_rem_pio2+0x1d2>
 80110d6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80110da:	ab0c      	add	r3, sp, #48	@ 0x30
 80110dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80110e4:	e7f3      	b.n	80110ce <__kernel_rem_pio2+0x356>
 80110e6:	a90c      	add	r1, sp, #48	@ 0x30
 80110e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80110ec:	3b01      	subs	r3, #1
 80110ee:	430a      	orrs	r2, r1
 80110f0:	e787      	b.n	8011002 <__kernel_rem_pio2+0x28a>
 80110f2:	3401      	adds	r4, #1
 80110f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80110f8:	2a00      	cmp	r2, #0
 80110fa:	d0fa      	beq.n	80110f2 <__kernel_rem_pio2+0x37a>
 80110fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011102:	eb0d 0503 	add.w	r5, sp, r3
 8011106:	9b06      	ldr	r3, [sp, #24]
 8011108:	aa20      	add	r2, sp, #128	@ 0x80
 801110a:	4443      	add	r3, r8
 801110c:	f108 0701 	add.w	r7, r8, #1
 8011110:	3d98      	subs	r5, #152	@ 0x98
 8011112:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011116:	4444      	add	r4, r8
 8011118:	42bc      	cmp	r4, r7
 801111a:	da04      	bge.n	8011126 <__kernel_rem_pio2+0x3ae>
 801111c:	46a0      	mov	r8, r4
 801111e:	e6a2      	b.n	8010e66 <__kernel_rem_pio2+0xee>
 8011120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011122:	2401      	movs	r4, #1
 8011124:	e7e6      	b.n	80110f4 <__kernel_rem_pio2+0x37c>
 8011126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011128:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801112c:	f7ef fa12 	bl	8000554 <__aeabi_i2d>
 8011130:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80113f8 <__kernel_rem_pio2+0x680>
 8011134:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011138:	ed8d 7b02 	vstr	d7, [sp, #8]
 801113c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011140:	46b2      	mov	sl, r6
 8011142:	f04f 0800 	mov.w	r8, #0
 8011146:	9b05      	ldr	r3, [sp, #20]
 8011148:	4598      	cmp	r8, r3
 801114a:	dd05      	ble.n	8011158 <__kernel_rem_pio2+0x3e0>
 801114c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011150:	3701      	adds	r7, #1
 8011152:	eca5 7b02 	vstmia	r5!, {d7}
 8011156:	e7df      	b.n	8011118 <__kernel_rem_pio2+0x3a0>
 8011158:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801115c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011160:	f7ef fa62 	bl	8000628 <__aeabi_dmul>
 8011164:	4602      	mov	r2, r0
 8011166:	460b      	mov	r3, r1
 8011168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801116c:	f7ef f8a6 	bl	80002bc <__adddf3>
 8011170:	f108 0801 	add.w	r8, r8, #1
 8011174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011178:	e7e5      	b.n	8011146 <__kernel_rem_pio2+0x3ce>
 801117a:	f1cb 0000 	rsb	r0, fp, #0
 801117e:	ec47 6b10 	vmov	d0, r6, r7
 8011182:	f000 fadd 	bl	8011740 <scalbn>
 8011186:	ec55 4b10 	vmov	r4, r5, d0
 801118a:	4b9d      	ldr	r3, [pc, #628]	@ (8011400 <__kernel_rem_pio2+0x688>)
 801118c:	2200      	movs	r2, #0
 801118e:	4620      	mov	r0, r4
 8011190:	4629      	mov	r1, r5
 8011192:	f7ef fccf 	bl	8000b34 <__aeabi_dcmpge>
 8011196:	b300      	cbz	r0, 80111da <__kernel_rem_pio2+0x462>
 8011198:	4b9a      	ldr	r3, [pc, #616]	@ (8011404 <__kernel_rem_pio2+0x68c>)
 801119a:	2200      	movs	r2, #0
 801119c:	4620      	mov	r0, r4
 801119e:	4629      	mov	r1, r5
 80111a0:	f7ef fa42 	bl	8000628 <__aeabi_dmul>
 80111a4:	f7ef fcf0 	bl	8000b88 <__aeabi_d2iz>
 80111a8:	4606      	mov	r6, r0
 80111aa:	f7ef f9d3 	bl	8000554 <__aeabi_i2d>
 80111ae:	4b94      	ldr	r3, [pc, #592]	@ (8011400 <__kernel_rem_pio2+0x688>)
 80111b0:	2200      	movs	r2, #0
 80111b2:	f7ef fa39 	bl	8000628 <__aeabi_dmul>
 80111b6:	460b      	mov	r3, r1
 80111b8:	4602      	mov	r2, r0
 80111ba:	4629      	mov	r1, r5
 80111bc:	4620      	mov	r0, r4
 80111be:	f7ef f87b 	bl	80002b8 <__aeabi_dsub>
 80111c2:	f7ef fce1 	bl	8000b88 <__aeabi_d2iz>
 80111c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80111c8:	f10b 0b18 	add.w	fp, fp, #24
 80111cc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80111d0:	f108 0801 	add.w	r8, r8, #1
 80111d4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80111d8:	e722      	b.n	8011020 <__kernel_rem_pio2+0x2a8>
 80111da:	4620      	mov	r0, r4
 80111dc:	4629      	mov	r1, r5
 80111de:	f7ef fcd3 	bl	8000b88 <__aeabi_d2iz>
 80111e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80111e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80111e8:	e71a      	b.n	8011020 <__kernel_rem_pio2+0x2a8>
 80111ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80111ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80111f0:	f7ef f9b0 	bl	8000554 <__aeabi_i2d>
 80111f4:	4622      	mov	r2, r4
 80111f6:	462b      	mov	r3, r5
 80111f8:	f7ef fa16 	bl	8000628 <__aeabi_dmul>
 80111fc:	4652      	mov	r2, sl
 80111fe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011202:	465b      	mov	r3, fp
 8011204:	4620      	mov	r0, r4
 8011206:	4629      	mov	r1, r5
 8011208:	f7ef fa0e 	bl	8000628 <__aeabi_dmul>
 801120c:	3e01      	subs	r6, #1
 801120e:	4604      	mov	r4, r0
 8011210:	460d      	mov	r5, r1
 8011212:	e718      	b.n	8011046 <__kernel_rem_pio2+0x2ce>
 8011214:	9906      	ldr	r1, [sp, #24]
 8011216:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801121a:	9106      	str	r1, [sp, #24]
 801121c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011220:	f7ef fa02 	bl	8000628 <__aeabi_dmul>
 8011224:	4602      	mov	r2, r0
 8011226:	460b      	mov	r3, r1
 8011228:	4650      	mov	r0, sl
 801122a:	4659      	mov	r1, fp
 801122c:	f7ef f846 	bl	80002bc <__adddf3>
 8011230:	3601      	adds	r6, #1
 8011232:	4682      	mov	sl, r0
 8011234:	468b      	mov	fp, r1
 8011236:	9b00      	ldr	r3, [sp, #0]
 8011238:	429e      	cmp	r6, r3
 801123a:	dc01      	bgt.n	8011240 <__kernel_rem_pio2+0x4c8>
 801123c:	42b5      	cmp	r5, r6
 801123e:	dae9      	bge.n	8011214 <__kernel_rem_pio2+0x49c>
 8011240:	ab48      	add	r3, sp, #288	@ 0x120
 8011242:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011246:	e9c5 ab00 	strd	sl, fp, [r5]
 801124a:	3c01      	subs	r4, #1
 801124c:	e6ff      	b.n	801104e <__kernel_rem_pio2+0x2d6>
 801124e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011250:	2b02      	cmp	r3, #2
 8011252:	dc0b      	bgt.n	801126c <__kernel_rem_pio2+0x4f4>
 8011254:	2b00      	cmp	r3, #0
 8011256:	dc39      	bgt.n	80112cc <__kernel_rem_pio2+0x554>
 8011258:	d05d      	beq.n	8011316 <__kernel_rem_pio2+0x59e>
 801125a:	9b02      	ldr	r3, [sp, #8]
 801125c:	f003 0007 	and.w	r0, r3, #7
 8011260:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011264:	ecbd 8b02 	vpop	{d8}
 8011268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801126e:	2b03      	cmp	r3, #3
 8011270:	d1f3      	bne.n	801125a <__kernel_rem_pio2+0x4e2>
 8011272:	9b05      	ldr	r3, [sp, #20]
 8011274:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011278:	eb0d 0403 	add.w	r4, sp, r3
 801127c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011280:	4625      	mov	r5, r4
 8011282:	46c2      	mov	sl, r8
 8011284:	f1ba 0f00 	cmp.w	sl, #0
 8011288:	f1a5 0508 	sub.w	r5, r5, #8
 801128c:	dc6b      	bgt.n	8011366 <__kernel_rem_pio2+0x5ee>
 801128e:	4645      	mov	r5, r8
 8011290:	2d01      	cmp	r5, #1
 8011292:	f1a4 0408 	sub.w	r4, r4, #8
 8011296:	f300 8087 	bgt.w	80113a8 <__kernel_rem_pio2+0x630>
 801129a:	9c05      	ldr	r4, [sp, #20]
 801129c:	ab48      	add	r3, sp, #288	@ 0x120
 801129e:	441c      	add	r4, r3
 80112a0:	2000      	movs	r0, #0
 80112a2:	2100      	movs	r1, #0
 80112a4:	f1b8 0f01 	cmp.w	r8, #1
 80112a8:	f300 809c 	bgt.w	80113e4 <__kernel_rem_pio2+0x66c>
 80112ac:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80112b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80112b4:	f1b9 0f00 	cmp.w	r9, #0
 80112b8:	f040 80a6 	bne.w	8011408 <__kernel_rem_pio2+0x690>
 80112bc:	9b04      	ldr	r3, [sp, #16]
 80112be:	e9c3 7800 	strd	r7, r8, [r3]
 80112c2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80112c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80112ca:	e7c6      	b.n	801125a <__kernel_rem_pio2+0x4e2>
 80112cc:	9d05      	ldr	r5, [sp, #20]
 80112ce:	ab48      	add	r3, sp, #288	@ 0x120
 80112d0:	441d      	add	r5, r3
 80112d2:	4644      	mov	r4, r8
 80112d4:	2000      	movs	r0, #0
 80112d6:	2100      	movs	r1, #0
 80112d8:	2c00      	cmp	r4, #0
 80112da:	da35      	bge.n	8011348 <__kernel_rem_pio2+0x5d0>
 80112dc:	f1b9 0f00 	cmp.w	r9, #0
 80112e0:	d038      	beq.n	8011354 <__kernel_rem_pio2+0x5dc>
 80112e2:	4602      	mov	r2, r0
 80112e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112e8:	9c04      	ldr	r4, [sp, #16]
 80112ea:	e9c4 2300 	strd	r2, r3, [r4]
 80112ee:	4602      	mov	r2, r0
 80112f0:	460b      	mov	r3, r1
 80112f2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80112f6:	f7ee ffdf 	bl	80002b8 <__aeabi_dsub>
 80112fa:	ad4a      	add	r5, sp, #296	@ 0x128
 80112fc:	2401      	movs	r4, #1
 80112fe:	45a0      	cmp	r8, r4
 8011300:	da2b      	bge.n	801135a <__kernel_rem_pio2+0x5e2>
 8011302:	f1b9 0f00 	cmp.w	r9, #0
 8011306:	d002      	beq.n	801130e <__kernel_rem_pio2+0x596>
 8011308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801130c:	4619      	mov	r1, r3
 801130e:	9b04      	ldr	r3, [sp, #16]
 8011310:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011314:	e7a1      	b.n	801125a <__kernel_rem_pio2+0x4e2>
 8011316:	9c05      	ldr	r4, [sp, #20]
 8011318:	ab48      	add	r3, sp, #288	@ 0x120
 801131a:	441c      	add	r4, r3
 801131c:	2000      	movs	r0, #0
 801131e:	2100      	movs	r1, #0
 8011320:	f1b8 0f00 	cmp.w	r8, #0
 8011324:	da09      	bge.n	801133a <__kernel_rem_pio2+0x5c2>
 8011326:	f1b9 0f00 	cmp.w	r9, #0
 801132a:	d002      	beq.n	8011332 <__kernel_rem_pio2+0x5ba>
 801132c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011330:	4619      	mov	r1, r3
 8011332:	9b04      	ldr	r3, [sp, #16]
 8011334:	e9c3 0100 	strd	r0, r1, [r3]
 8011338:	e78f      	b.n	801125a <__kernel_rem_pio2+0x4e2>
 801133a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801133e:	f7ee ffbd 	bl	80002bc <__adddf3>
 8011342:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011346:	e7eb      	b.n	8011320 <__kernel_rem_pio2+0x5a8>
 8011348:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801134c:	f7ee ffb6 	bl	80002bc <__adddf3>
 8011350:	3c01      	subs	r4, #1
 8011352:	e7c1      	b.n	80112d8 <__kernel_rem_pio2+0x560>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	e7c6      	b.n	80112e8 <__kernel_rem_pio2+0x570>
 801135a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801135e:	f7ee ffad 	bl	80002bc <__adddf3>
 8011362:	3401      	adds	r4, #1
 8011364:	e7cb      	b.n	80112fe <__kernel_rem_pio2+0x586>
 8011366:	ed95 7b00 	vldr	d7, [r5]
 801136a:	ed8d 7b00 	vstr	d7, [sp]
 801136e:	ed95 7b02 	vldr	d7, [r5, #8]
 8011372:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011376:	ec53 2b17 	vmov	r2, r3, d7
 801137a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801137e:	f7ee ff9d 	bl	80002bc <__adddf3>
 8011382:	4602      	mov	r2, r0
 8011384:	460b      	mov	r3, r1
 8011386:	4606      	mov	r6, r0
 8011388:	460f      	mov	r7, r1
 801138a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801138e:	f7ee ff93 	bl	80002b8 <__aeabi_dsub>
 8011392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011396:	f7ee ff91 	bl	80002bc <__adddf3>
 801139a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801139e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80113a2:	e9c5 6700 	strd	r6, r7, [r5]
 80113a6:	e76d      	b.n	8011284 <__kernel_rem_pio2+0x50c>
 80113a8:	ed94 7b00 	vldr	d7, [r4]
 80113ac:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80113b0:	ec51 0b17 	vmov	r0, r1, d7
 80113b4:	4652      	mov	r2, sl
 80113b6:	465b      	mov	r3, fp
 80113b8:	ed8d 7b00 	vstr	d7, [sp]
 80113bc:	f7ee ff7e 	bl	80002bc <__adddf3>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	4606      	mov	r6, r0
 80113c6:	460f      	mov	r7, r1
 80113c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113cc:	f7ee ff74 	bl	80002b8 <__aeabi_dsub>
 80113d0:	4652      	mov	r2, sl
 80113d2:	465b      	mov	r3, fp
 80113d4:	f7ee ff72 	bl	80002bc <__adddf3>
 80113d8:	3d01      	subs	r5, #1
 80113da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113de:	e9c4 6700 	strd	r6, r7, [r4]
 80113e2:	e755      	b.n	8011290 <__kernel_rem_pio2+0x518>
 80113e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80113e8:	f7ee ff68 	bl	80002bc <__adddf3>
 80113ec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80113f0:	e758      	b.n	80112a4 <__kernel_rem_pio2+0x52c>
 80113f2:	bf00      	nop
 80113f4:	f3af 8000 	nop.w
	...
 8011400:	41700000 	.word	0x41700000
 8011404:	3e700000 	.word	0x3e700000
 8011408:	9b04      	ldr	r3, [sp, #16]
 801140a:	9a04      	ldr	r2, [sp, #16]
 801140c:	601f      	str	r7, [r3, #0]
 801140e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8011412:	605c      	str	r4, [r3, #4]
 8011414:	609d      	str	r5, [r3, #8]
 8011416:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801141a:	60d3      	str	r3, [r2, #12]
 801141c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011420:	6110      	str	r0, [r2, #16]
 8011422:	6153      	str	r3, [r2, #20]
 8011424:	e719      	b.n	801125a <__kernel_rem_pio2+0x4e2>
 8011426:	bf00      	nop

08011428 <__kernel_cos>:
 8011428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142c:	ec57 6b10 	vmov	r6, r7, d0
 8011430:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011434:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011438:	ed8d 1b00 	vstr	d1, [sp]
 801143c:	d206      	bcs.n	801144c <__kernel_cos+0x24>
 801143e:	4630      	mov	r0, r6
 8011440:	4639      	mov	r1, r7
 8011442:	f7ef fba1 	bl	8000b88 <__aeabi_d2iz>
 8011446:	2800      	cmp	r0, #0
 8011448:	f000 8088 	beq.w	801155c <__kernel_cos+0x134>
 801144c:	4632      	mov	r2, r6
 801144e:	463b      	mov	r3, r7
 8011450:	4630      	mov	r0, r6
 8011452:	4639      	mov	r1, r7
 8011454:	f7ef f8e8 	bl	8000628 <__aeabi_dmul>
 8011458:	4b51      	ldr	r3, [pc, #324]	@ (80115a0 <__kernel_cos+0x178>)
 801145a:	2200      	movs	r2, #0
 801145c:	4604      	mov	r4, r0
 801145e:	460d      	mov	r5, r1
 8011460:	f7ef f8e2 	bl	8000628 <__aeabi_dmul>
 8011464:	a340      	add	r3, pc, #256	@ (adr r3, 8011568 <__kernel_cos+0x140>)
 8011466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146a:	4682      	mov	sl, r0
 801146c:	468b      	mov	fp, r1
 801146e:	4620      	mov	r0, r4
 8011470:	4629      	mov	r1, r5
 8011472:	f7ef f8d9 	bl	8000628 <__aeabi_dmul>
 8011476:	a33e      	add	r3, pc, #248	@ (adr r3, 8011570 <__kernel_cos+0x148>)
 8011478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147c:	f7ee ff1e 	bl	80002bc <__adddf3>
 8011480:	4622      	mov	r2, r4
 8011482:	462b      	mov	r3, r5
 8011484:	f7ef f8d0 	bl	8000628 <__aeabi_dmul>
 8011488:	a33b      	add	r3, pc, #236	@ (adr r3, 8011578 <__kernel_cos+0x150>)
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	f7ee ff13 	bl	80002b8 <__aeabi_dsub>
 8011492:	4622      	mov	r2, r4
 8011494:	462b      	mov	r3, r5
 8011496:	f7ef f8c7 	bl	8000628 <__aeabi_dmul>
 801149a:	a339      	add	r3, pc, #228	@ (adr r3, 8011580 <__kernel_cos+0x158>)
 801149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a0:	f7ee ff0c 	bl	80002bc <__adddf3>
 80114a4:	4622      	mov	r2, r4
 80114a6:	462b      	mov	r3, r5
 80114a8:	f7ef f8be 	bl	8000628 <__aeabi_dmul>
 80114ac:	a336      	add	r3, pc, #216	@ (adr r3, 8011588 <__kernel_cos+0x160>)
 80114ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b2:	f7ee ff01 	bl	80002b8 <__aeabi_dsub>
 80114b6:	4622      	mov	r2, r4
 80114b8:	462b      	mov	r3, r5
 80114ba:	f7ef f8b5 	bl	8000628 <__aeabi_dmul>
 80114be:	a334      	add	r3, pc, #208	@ (adr r3, 8011590 <__kernel_cos+0x168>)
 80114c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c4:	f7ee fefa 	bl	80002bc <__adddf3>
 80114c8:	4622      	mov	r2, r4
 80114ca:	462b      	mov	r3, r5
 80114cc:	f7ef f8ac 	bl	8000628 <__aeabi_dmul>
 80114d0:	4622      	mov	r2, r4
 80114d2:	462b      	mov	r3, r5
 80114d4:	f7ef f8a8 	bl	8000628 <__aeabi_dmul>
 80114d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114dc:	4604      	mov	r4, r0
 80114de:	460d      	mov	r5, r1
 80114e0:	4630      	mov	r0, r6
 80114e2:	4639      	mov	r1, r7
 80114e4:	f7ef f8a0 	bl	8000628 <__aeabi_dmul>
 80114e8:	460b      	mov	r3, r1
 80114ea:	4602      	mov	r2, r0
 80114ec:	4629      	mov	r1, r5
 80114ee:	4620      	mov	r0, r4
 80114f0:	f7ee fee2 	bl	80002b8 <__aeabi_dsub>
 80114f4:	4b2b      	ldr	r3, [pc, #172]	@ (80115a4 <__kernel_cos+0x17c>)
 80114f6:	4598      	cmp	r8, r3
 80114f8:	4606      	mov	r6, r0
 80114fa:	460f      	mov	r7, r1
 80114fc:	d810      	bhi.n	8011520 <__kernel_cos+0xf8>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4650      	mov	r0, sl
 8011504:	4659      	mov	r1, fp
 8011506:	f7ee fed7 	bl	80002b8 <__aeabi_dsub>
 801150a:	460b      	mov	r3, r1
 801150c:	4926      	ldr	r1, [pc, #152]	@ (80115a8 <__kernel_cos+0x180>)
 801150e:	4602      	mov	r2, r0
 8011510:	2000      	movs	r0, #0
 8011512:	f7ee fed1 	bl	80002b8 <__aeabi_dsub>
 8011516:	ec41 0b10 	vmov	d0, r0, r1
 801151a:	b003      	add	sp, #12
 801151c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011520:	4b22      	ldr	r3, [pc, #136]	@ (80115ac <__kernel_cos+0x184>)
 8011522:	4921      	ldr	r1, [pc, #132]	@ (80115a8 <__kernel_cos+0x180>)
 8011524:	4598      	cmp	r8, r3
 8011526:	bf8c      	ite	hi
 8011528:	4d21      	ldrhi	r5, [pc, #132]	@ (80115b0 <__kernel_cos+0x188>)
 801152a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801152e:	2400      	movs	r4, #0
 8011530:	4622      	mov	r2, r4
 8011532:	462b      	mov	r3, r5
 8011534:	2000      	movs	r0, #0
 8011536:	f7ee febf 	bl	80002b8 <__aeabi_dsub>
 801153a:	4622      	mov	r2, r4
 801153c:	4680      	mov	r8, r0
 801153e:	4689      	mov	r9, r1
 8011540:	462b      	mov	r3, r5
 8011542:	4650      	mov	r0, sl
 8011544:	4659      	mov	r1, fp
 8011546:	f7ee feb7 	bl	80002b8 <__aeabi_dsub>
 801154a:	4632      	mov	r2, r6
 801154c:	463b      	mov	r3, r7
 801154e:	f7ee feb3 	bl	80002b8 <__aeabi_dsub>
 8011552:	4602      	mov	r2, r0
 8011554:	460b      	mov	r3, r1
 8011556:	4640      	mov	r0, r8
 8011558:	4649      	mov	r1, r9
 801155a:	e7da      	b.n	8011512 <__kernel_cos+0xea>
 801155c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8011598 <__kernel_cos+0x170>
 8011560:	e7db      	b.n	801151a <__kernel_cos+0xf2>
 8011562:	bf00      	nop
 8011564:	f3af 8000 	nop.w
 8011568:	be8838d4 	.word	0xbe8838d4
 801156c:	bda8fae9 	.word	0xbda8fae9
 8011570:	bdb4b1c4 	.word	0xbdb4b1c4
 8011574:	3e21ee9e 	.word	0x3e21ee9e
 8011578:	809c52ad 	.word	0x809c52ad
 801157c:	3e927e4f 	.word	0x3e927e4f
 8011580:	19cb1590 	.word	0x19cb1590
 8011584:	3efa01a0 	.word	0x3efa01a0
 8011588:	16c15177 	.word	0x16c15177
 801158c:	3f56c16c 	.word	0x3f56c16c
 8011590:	5555554c 	.word	0x5555554c
 8011594:	3fa55555 	.word	0x3fa55555
 8011598:	00000000 	.word	0x00000000
 801159c:	3ff00000 	.word	0x3ff00000
 80115a0:	3fe00000 	.word	0x3fe00000
 80115a4:	3fd33332 	.word	0x3fd33332
 80115a8:	3ff00000 	.word	0x3ff00000
 80115ac:	3fe90000 	.word	0x3fe90000
 80115b0:	3fd20000 	.word	0x3fd20000
 80115b4:	00000000 	.word	0x00000000

080115b8 <__kernel_sin>:
 80115b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115bc:	ec55 4b10 	vmov	r4, r5, d0
 80115c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80115c4:	b085      	sub	sp, #20
 80115c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80115ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 80115ce:	4680      	mov	r8, r0
 80115d0:	d205      	bcs.n	80115de <__kernel_sin+0x26>
 80115d2:	4620      	mov	r0, r4
 80115d4:	4629      	mov	r1, r5
 80115d6:	f7ef fad7 	bl	8000b88 <__aeabi_d2iz>
 80115da:	2800      	cmp	r0, #0
 80115dc:	d052      	beq.n	8011684 <__kernel_sin+0xcc>
 80115de:	4622      	mov	r2, r4
 80115e0:	462b      	mov	r3, r5
 80115e2:	4620      	mov	r0, r4
 80115e4:	4629      	mov	r1, r5
 80115e6:	f7ef f81f 	bl	8000628 <__aeabi_dmul>
 80115ea:	4682      	mov	sl, r0
 80115ec:	468b      	mov	fp, r1
 80115ee:	4602      	mov	r2, r0
 80115f0:	460b      	mov	r3, r1
 80115f2:	4620      	mov	r0, r4
 80115f4:	4629      	mov	r1, r5
 80115f6:	f7ef f817 	bl	8000628 <__aeabi_dmul>
 80115fa:	a342      	add	r3, pc, #264	@ (adr r3, 8011704 <__kernel_sin+0x14c>)
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	e9cd 0100 	strd	r0, r1, [sp]
 8011604:	4650      	mov	r0, sl
 8011606:	4659      	mov	r1, fp
 8011608:	f7ef f80e 	bl	8000628 <__aeabi_dmul>
 801160c:	a33f      	add	r3, pc, #252	@ (adr r3, 801170c <__kernel_sin+0x154>)
 801160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011612:	f7ee fe51 	bl	80002b8 <__aeabi_dsub>
 8011616:	4652      	mov	r2, sl
 8011618:	465b      	mov	r3, fp
 801161a:	f7ef f805 	bl	8000628 <__aeabi_dmul>
 801161e:	a33d      	add	r3, pc, #244	@ (adr r3, 8011714 <__kernel_sin+0x15c>)
 8011620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011624:	f7ee fe4a 	bl	80002bc <__adddf3>
 8011628:	4652      	mov	r2, sl
 801162a:	465b      	mov	r3, fp
 801162c:	f7ee fffc 	bl	8000628 <__aeabi_dmul>
 8011630:	a33a      	add	r3, pc, #232	@ (adr r3, 801171c <__kernel_sin+0x164>)
 8011632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011636:	f7ee fe3f 	bl	80002b8 <__aeabi_dsub>
 801163a:	4652      	mov	r2, sl
 801163c:	465b      	mov	r3, fp
 801163e:	f7ee fff3 	bl	8000628 <__aeabi_dmul>
 8011642:	a338      	add	r3, pc, #224	@ (adr r3, 8011724 <__kernel_sin+0x16c>)
 8011644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011648:	f7ee fe38 	bl	80002bc <__adddf3>
 801164c:	4606      	mov	r6, r0
 801164e:	460f      	mov	r7, r1
 8011650:	f1b8 0f00 	cmp.w	r8, #0
 8011654:	d11b      	bne.n	801168e <__kernel_sin+0xd6>
 8011656:	4602      	mov	r2, r0
 8011658:	460b      	mov	r3, r1
 801165a:	4650      	mov	r0, sl
 801165c:	4659      	mov	r1, fp
 801165e:	f7ee ffe3 	bl	8000628 <__aeabi_dmul>
 8011662:	a325      	add	r3, pc, #148	@ (adr r3, 80116f8 <__kernel_sin+0x140>)
 8011664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011668:	f7ee fe26 	bl	80002b8 <__aeabi_dsub>
 801166c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011670:	f7ee ffda 	bl	8000628 <__aeabi_dmul>
 8011674:	4602      	mov	r2, r0
 8011676:	460b      	mov	r3, r1
 8011678:	4620      	mov	r0, r4
 801167a:	4629      	mov	r1, r5
 801167c:	f7ee fe1e 	bl	80002bc <__adddf3>
 8011680:	4604      	mov	r4, r0
 8011682:	460d      	mov	r5, r1
 8011684:	ec45 4b10 	vmov	d0, r4, r5
 8011688:	b005      	add	sp, #20
 801168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801168e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011692:	4b1b      	ldr	r3, [pc, #108]	@ (8011700 <__kernel_sin+0x148>)
 8011694:	2200      	movs	r2, #0
 8011696:	f7ee ffc7 	bl	8000628 <__aeabi_dmul>
 801169a:	4632      	mov	r2, r6
 801169c:	4680      	mov	r8, r0
 801169e:	4689      	mov	r9, r1
 80116a0:	463b      	mov	r3, r7
 80116a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116a6:	f7ee ffbf 	bl	8000628 <__aeabi_dmul>
 80116aa:	4602      	mov	r2, r0
 80116ac:	460b      	mov	r3, r1
 80116ae:	4640      	mov	r0, r8
 80116b0:	4649      	mov	r1, r9
 80116b2:	f7ee fe01 	bl	80002b8 <__aeabi_dsub>
 80116b6:	4652      	mov	r2, sl
 80116b8:	465b      	mov	r3, fp
 80116ba:	f7ee ffb5 	bl	8000628 <__aeabi_dmul>
 80116be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116c2:	f7ee fdf9 	bl	80002b8 <__aeabi_dsub>
 80116c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80116f8 <__kernel_sin+0x140>)
 80116c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116cc:	4606      	mov	r6, r0
 80116ce:	460f      	mov	r7, r1
 80116d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116d4:	f7ee ffa8 	bl	8000628 <__aeabi_dmul>
 80116d8:	4602      	mov	r2, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	4630      	mov	r0, r6
 80116de:	4639      	mov	r1, r7
 80116e0:	f7ee fdec 	bl	80002bc <__adddf3>
 80116e4:	4602      	mov	r2, r0
 80116e6:	460b      	mov	r3, r1
 80116e8:	4620      	mov	r0, r4
 80116ea:	4629      	mov	r1, r5
 80116ec:	f7ee fde4 	bl	80002b8 <__aeabi_dsub>
 80116f0:	e7c6      	b.n	8011680 <__kernel_sin+0xc8>
 80116f2:	bf00      	nop
 80116f4:	f3af 8000 	nop.w
 80116f8:	55555549 	.word	0x55555549
 80116fc:	3fc55555 	.word	0x3fc55555
 8011700:	3fe00000 	.word	0x3fe00000
 8011704:	5acfd57c 	.word	0x5acfd57c
 8011708:	3de5d93a 	.word	0x3de5d93a
 801170c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011710:	3e5ae5e6 	.word	0x3e5ae5e6
 8011714:	57b1fe7d 	.word	0x57b1fe7d
 8011718:	3ec71de3 	.word	0x3ec71de3
 801171c:	19c161d5 	.word	0x19c161d5
 8011720:	3f2a01a0 	.word	0x3f2a01a0
 8011724:	1110f8a6 	.word	0x1110f8a6
 8011728:	3f811111 	.word	0x3f811111

0801172c <fabs>:
 801172c:	ec51 0b10 	vmov	r0, r1, d0
 8011730:	4602      	mov	r2, r0
 8011732:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011736:	ec43 2b10 	vmov	d0, r2, r3
 801173a:	4770      	bx	lr
 801173c:	0000      	movs	r0, r0
	...

08011740 <scalbn>:
 8011740:	b570      	push	{r4, r5, r6, lr}
 8011742:	ec55 4b10 	vmov	r4, r5, d0
 8011746:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801174a:	4606      	mov	r6, r0
 801174c:	462b      	mov	r3, r5
 801174e:	b991      	cbnz	r1, 8011776 <scalbn+0x36>
 8011750:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011754:	4323      	orrs	r3, r4
 8011756:	d03d      	beq.n	80117d4 <scalbn+0x94>
 8011758:	4b35      	ldr	r3, [pc, #212]	@ (8011830 <scalbn+0xf0>)
 801175a:	4620      	mov	r0, r4
 801175c:	4629      	mov	r1, r5
 801175e:	2200      	movs	r2, #0
 8011760:	f7ee ff62 	bl	8000628 <__aeabi_dmul>
 8011764:	4b33      	ldr	r3, [pc, #204]	@ (8011834 <scalbn+0xf4>)
 8011766:	429e      	cmp	r6, r3
 8011768:	4604      	mov	r4, r0
 801176a:	460d      	mov	r5, r1
 801176c:	da0f      	bge.n	801178e <scalbn+0x4e>
 801176e:	a328      	add	r3, pc, #160	@ (adr r3, 8011810 <scalbn+0xd0>)
 8011770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011774:	e01e      	b.n	80117b4 <scalbn+0x74>
 8011776:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801177a:	4291      	cmp	r1, r2
 801177c:	d10b      	bne.n	8011796 <scalbn+0x56>
 801177e:	4622      	mov	r2, r4
 8011780:	4620      	mov	r0, r4
 8011782:	4629      	mov	r1, r5
 8011784:	f7ee fd9a 	bl	80002bc <__adddf3>
 8011788:	4604      	mov	r4, r0
 801178a:	460d      	mov	r5, r1
 801178c:	e022      	b.n	80117d4 <scalbn+0x94>
 801178e:	460b      	mov	r3, r1
 8011790:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011794:	3936      	subs	r1, #54	@ 0x36
 8011796:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801179a:	4296      	cmp	r6, r2
 801179c:	dd0d      	ble.n	80117ba <scalbn+0x7a>
 801179e:	2d00      	cmp	r5, #0
 80117a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011818 <scalbn+0xd8>)
 80117a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117a6:	da02      	bge.n	80117ae <scalbn+0x6e>
 80117a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011820 <scalbn+0xe0>)
 80117aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117ae:	a31a      	add	r3, pc, #104	@ (adr r3, 8011818 <scalbn+0xd8>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	f7ee ff38 	bl	8000628 <__aeabi_dmul>
 80117b8:	e7e6      	b.n	8011788 <scalbn+0x48>
 80117ba:	1872      	adds	r2, r6, r1
 80117bc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80117c0:	428a      	cmp	r2, r1
 80117c2:	dcec      	bgt.n	801179e <scalbn+0x5e>
 80117c4:	2a00      	cmp	r2, #0
 80117c6:	dd08      	ble.n	80117da <scalbn+0x9a>
 80117c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80117cc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80117d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80117d4:	ec45 4b10 	vmov	d0, r4, r5
 80117d8:	bd70      	pop	{r4, r5, r6, pc}
 80117da:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80117de:	da08      	bge.n	80117f2 <scalbn+0xb2>
 80117e0:	2d00      	cmp	r5, #0
 80117e2:	a10b      	add	r1, pc, #44	@ (adr r1, 8011810 <scalbn+0xd0>)
 80117e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117e8:	dac1      	bge.n	801176e <scalbn+0x2e>
 80117ea:	a10f      	add	r1, pc, #60	@ (adr r1, 8011828 <scalbn+0xe8>)
 80117ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117f0:	e7bd      	b.n	801176e <scalbn+0x2e>
 80117f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80117f6:	3236      	adds	r2, #54	@ 0x36
 80117f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80117fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011800:	4620      	mov	r0, r4
 8011802:	4b0d      	ldr	r3, [pc, #52]	@ (8011838 <scalbn+0xf8>)
 8011804:	4629      	mov	r1, r5
 8011806:	2200      	movs	r2, #0
 8011808:	e7d4      	b.n	80117b4 <scalbn+0x74>
 801180a:	bf00      	nop
 801180c:	f3af 8000 	nop.w
 8011810:	c2f8f359 	.word	0xc2f8f359
 8011814:	01a56e1f 	.word	0x01a56e1f
 8011818:	8800759c 	.word	0x8800759c
 801181c:	7e37e43c 	.word	0x7e37e43c
 8011820:	8800759c 	.word	0x8800759c
 8011824:	fe37e43c 	.word	0xfe37e43c
 8011828:	c2f8f359 	.word	0xc2f8f359
 801182c:	81a56e1f 	.word	0x81a56e1f
 8011830:	43500000 	.word	0x43500000
 8011834:	ffff3cb0 	.word	0xffff3cb0
 8011838:	3c900000 	.word	0x3c900000
 801183c:	00000000 	.word	0x00000000

08011840 <floor>:
 8011840:	ec51 0b10 	vmov	r0, r1, d0
 8011844:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801184c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011850:	2e13      	cmp	r6, #19
 8011852:	460c      	mov	r4, r1
 8011854:	4605      	mov	r5, r0
 8011856:	4680      	mov	r8, r0
 8011858:	dc34      	bgt.n	80118c4 <floor+0x84>
 801185a:	2e00      	cmp	r6, #0
 801185c:	da17      	bge.n	801188e <floor+0x4e>
 801185e:	a332      	add	r3, pc, #200	@ (adr r3, 8011928 <floor+0xe8>)
 8011860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011864:	f7ee fd2a 	bl	80002bc <__adddf3>
 8011868:	2200      	movs	r2, #0
 801186a:	2300      	movs	r3, #0
 801186c:	f7ef f96c 	bl	8000b48 <__aeabi_dcmpgt>
 8011870:	b150      	cbz	r0, 8011888 <floor+0x48>
 8011872:	2c00      	cmp	r4, #0
 8011874:	da55      	bge.n	8011922 <floor+0xe2>
 8011876:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801187a:	432c      	orrs	r4, r5
 801187c:	2500      	movs	r5, #0
 801187e:	42ac      	cmp	r4, r5
 8011880:	4c2b      	ldr	r4, [pc, #172]	@ (8011930 <floor+0xf0>)
 8011882:	bf08      	it	eq
 8011884:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011888:	4621      	mov	r1, r4
 801188a:	4628      	mov	r0, r5
 801188c:	e023      	b.n	80118d6 <floor+0x96>
 801188e:	4f29      	ldr	r7, [pc, #164]	@ (8011934 <floor+0xf4>)
 8011890:	4137      	asrs	r7, r6
 8011892:	ea01 0307 	and.w	r3, r1, r7
 8011896:	4303      	orrs	r3, r0
 8011898:	d01d      	beq.n	80118d6 <floor+0x96>
 801189a:	a323      	add	r3, pc, #140	@ (adr r3, 8011928 <floor+0xe8>)
 801189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a0:	f7ee fd0c 	bl	80002bc <__adddf3>
 80118a4:	2200      	movs	r2, #0
 80118a6:	2300      	movs	r3, #0
 80118a8:	f7ef f94e 	bl	8000b48 <__aeabi_dcmpgt>
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d0eb      	beq.n	8011888 <floor+0x48>
 80118b0:	2c00      	cmp	r4, #0
 80118b2:	bfbe      	ittt	lt
 80118b4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80118b8:	4133      	asrlt	r3, r6
 80118ba:	18e4      	addlt	r4, r4, r3
 80118bc:	ea24 0407 	bic.w	r4, r4, r7
 80118c0:	2500      	movs	r5, #0
 80118c2:	e7e1      	b.n	8011888 <floor+0x48>
 80118c4:	2e33      	cmp	r6, #51	@ 0x33
 80118c6:	dd0a      	ble.n	80118de <floor+0x9e>
 80118c8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80118cc:	d103      	bne.n	80118d6 <floor+0x96>
 80118ce:	4602      	mov	r2, r0
 80118d0:	460b      	mov	r3, r1
 80118d2:	f7ee fcf3 	bl	80002bc <__adddf3>
 80118d6:	ec41 0b10 	vmov	d0, r0, r1
 80118da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118de:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80118e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80118e6:	40df      	lsrs	r7, r3
 80118e8:	4207      	tst	r7, r0
 80118ea:	d0f4      	beq.n	80118d6 <floor+0x96>
 80118ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8011928 <floor+0xe8>)
 80118ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f2:	f7ee fce3 	bl	80002bc <__adddf3>
 80118f6:	2200      	movs	r2, #0
 80118f8:	2300      	movs	r3, #0
 80118fa:	f7ef f925 	bl	8000b48 <__aeabi_dcmpgt>
 80118fe:	2800      	cmp	r0, #0
 8011900:	d0c2      	beq.n	8011888 <floor+0x48>
 8011902:	2c00      	cmp	r4, #0
 8011904:	da0a      	bge.n	801191c <floor+0xdc>
 8011906:	2e14      	cmp	r6, #20
 8011908:	d101      	bne.n	801190e <floor+0xce>
 801190a:	3401      	adds	r4, #1
 801190c:	e006      	b.n	801191c <floor+0xdc>
 801190e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011912:	2301      	movs	r3, #1
 8011914:	40b3      	lsls	r3, r6
 8011916:	441d      	add	r5, r3
 8011918:	4545      	cmp	r5, r8
 801191a:	d3f6      	bcc.n	801190a <floor+0xca>
 801191c:	ea25 0507 	bic.w	r5, r5, r7
 8011920:	e7b2      	b.n	8011888 <floor+0x48>
 8011922:	2500      	movs	r5, #0
 8011924:	462c      	mov	r4, r5
 8011926:	e7af      	b.n	8011888 <floor+0x48>
 8011928:	8800759c 	.word	0x8800759c
 801192c:	7e37e43c 	.word	0x7e37e43c
 8011930:	bff00000 	.word	0xbff00000
 8011934:	000fffff 	.word	0x000fffff

08011938 <_init>:
 8011938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801193a:	bf00      	nop
 801193c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801193e:	bc08      	pop	{r3}
 8011940:	469e      	mov	lr, r3
 8011942:	4770      	bx	lr

08011944 <_fini>:
 8011944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011946:	bf00      	nop
 8011948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801194a:	bc08      	pop	{r3}
 801194c:	469e      	mov	lr, r3
 801194e:	4770      	bx	lr
